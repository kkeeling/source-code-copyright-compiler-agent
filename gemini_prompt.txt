
You are tasked with analyzing and prioritizing source code files for copyright submission. You will be given the entire source code for a project. Your goal is to determine the order of importance for these files based on their significance to the project, complexity, and uniqueness.

Here is the source code for the project:

<source_code>
File: /Users/codeshack-vii/Documents/_projects/Volato/.DS_Store

Error: Unable to extract code from /Users/codeshack-vii/Documents/_projects/Volato/.DS_Store

File: /Users/codeshack-vii/Documents/_projects/Volato/LinkingConfiguration.js

/**
 * Learn more about deep linking with React Navigation
 * https://reactnavigation.org/docs/deep-linking
 * https://reactnavigation.org/docs/configuring-links
 */

import { Platform } from "react-native";

import * as Linking from "expo-linking";

function renderLinkingPrefix() {
  try {
    return Linking.createURL("/");
  } catch (e) {
    return "draftbit://";
  }
}

const prefix = renderLinkingPrefix();
const linking = {
  enabled: Platform.OS !== "web",
  prefixes: [prefix],
  config: {
    screens: {
      LoginNavigator: {
        screens: {},
      },
      RegisterNavigator: {
        screens: {},
      },
      BottomTabNavigator: {
        screens: {
          AboutNavigator: {
            screens: {},
          },
          AccountNavigator: {
            screens: {},
          },
          ReserveNavigator: {
            screens: {},
          },
          TripsNavigator: {
            screens: {},
          },
        },
      },
    },
  },
};

export default linking;


File: /Users/codeshack-vii/Documents/_projects/Volato/AppNavigator.js

/* eslint-disable react/no-unstable-nested-components */
import * as React from "react";
import { Image, Platform, StyleSheet } from "react-native";

import { Icon } from "@draftbit/ui";
import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
import { getFocusedRouteNameFromRoute, NavigationContainer } from "@react-navigation/native";
import { createStackNavigator } from "@react-navigation/stack";
import { LinearGradient } from "expo-linear-gradient";
import { setStatusBarStyle } from "expo-status-bar";
import { observer } from "mobx-react-lite";
import { useSafeAreaInsets } from "react-native-safe-area-context";

import { Text } from "./components";
import Images from "./config/Images";
import LinkingConfiguration from "./LinkingConfiguration";
import { useStores } from "./models/root";
import AuthChoiceScreen from "./screens/Auth/AuthChoiceScreen";
import ConfirmOTPScreen from "./screens/Auth/ConfirmOTPScreen";
import EmailLoginScreen from "./screens/Auth/EmailLoginScreen";
import SMSLoginScreen from "./screens/Auth/SMSLoginScreen";
import BragScreen from "./screens/BragScreen";
import ChatListScreen from "./screens/Chat/ChatListScreen";
import ChatScreen from "./screens/Chat/ChatScreen";
import CreateAccountScreen from "./screens/CreateAccountScreen";
import DealsScreen from "./screens/Deals/DealsScreen";
import PartnershipDetailScreen from "./screens/Deals/PartnershipDetailScreen";
import RedeemBenefitsScreen from "./screens/Deals/RedeemBenefitsScreen";
import ZoneDetailsScreen from "./screens/Deals/ZoneDetailsScreen";
import LandingPageScreen from "./screens/LandingPageScreen";
import ActivityScreen from "./screens/Profile/ActivityScreen";
import AddAuthorizedUserScreen from "./screens/Profile/AddAuthorizedUserScreen";
import AddPassengerScreen from "./screens/Profile/AddPassengerScreen";
import AddPetScreen from "./screens/Profile/AddPetScreen";
import AircraftBragScreen from "./screens/Profile/AircraftBragScreen";
import AuthorizedUsersScreen from "./screens/Profile/AuthorizedUsersScreen";
import BillingInformationScreen from "./screens/Profile/BillingInformationScreen";
import DepositAccountActivityScreen from "./screens/Profile/DepositAccountActivity";
import FamilyFriendsPetsScreen from "./screens/Profile/FamilyFriendsPetsScreen";
import OwnershipActivityScreen from "./screens/Profile/OwnershipActivity";
import ProfileDetailsScreen from "./screens/Profile/ProfileDetailsScreen";
import ProfileScreen from "./screens/ProfileScreen";
import ReserveScreen from "./screens/Reserve/_ReserveScreen";
import QuoteDetailsScreen from "./screens/TripsAndDeals/QuoteDetailsScreen";
import TripDetailsScreen from "./screens/TripsAndDeals/TripDetailsScreen";
import TripsScreen from "./screens/TripsAndDeals/TripsScreen";
import { colors } from "./themes/colors";
import { screens } from "./utils/screens";

const Stack = createStackNavigator();
const Tab = createBottomTabNavigator();

const LoginStack = createStackNavigator();
function LoginNavigator({ navigation }) {
  return (
    <LoginStack.Navigator
      initialRouteName="SMSLoginScreen"
      screenOptions={{ headerShown: false }}
      navigation={navigation}
    >
      <LoginStack.Screen name="AuthChoiceScreen" component={AuthChoiceScreen} />
      <LoginStack.Screen name="SMSLoginScreen" component={SMSLoginScreen} />
      <LoginStack.Screen name="ConfirmOTPScreen" component={ConfirmOTPScreen} />
      <LoginStack.Screen name="EmailLoginScreen" component={EmailLoginScreen} />
    </LoginStack.Navigator>
  );
}

const RegisterStack = createStackNavigator();
function RegisterNavigator() {
  return (
    <RegisterStack.Navigator
      initialRouteName="CreateAccountScreen"
      screenOptions={{ headerShown: false }}
    >
      <RegisterStack.Screen name="CreateAccountScreen" component={CreateAccountScreen} />
    </RegisterStack.Navigator>
  );
}

const ChatStack = createStackNavigator();
function ChatNavigator({ navigation }) {
  const state = navigation.getState();
  React.useEffect(() => {
    const unsubscribe = navigation.addListener("tabPress", (e) => {
      e.preventDefault();

      navigation.navigate(state.routeNames[state.index], { screen: "ChatListScreen" });
    });

    return unsubscribe;
  }, [navigation, state.index, state.routeNames]);
  return (
    <ChatStack.Navigator initialRouteName="ChatListScreen" screenOptions={{ headerShown: false }}>
      <ChatStack.Screen name="ChatListScreen" component={ChatListScreen} />
      <ChatStack.Screen name="ChatScreen" component={ChatScreen} />
    </ChatStack.Navigator>
  );
}

const EditProfileMenuStack = createStackNavigator();
function EditProfileMenuNavigator({ navigation }) {
  const state = navigation.getState();

  React.useEffect(() => {
    const unsubscribe = navigation.addListener("tabPress", (e) => {
      e.preventDefault();

      navigation.navigate("AccountNavigator", {
        screen: state.routeNames[state.index],
        params: { screen: "ProfileDetailsScreen" },
      });
    });

    return unsubscribe;
  }, [navigation, state.index, state.routeNames]);

  return (
    <EditProfileMenuStack.Navigator
      initialRouteName="ProfileDetailsScreen"
      screenOptions={{ headerShown: false }}
    >
      <EditProfileMenuStack.Screen name="ProfileDetailsScreen" component={ProfileDetailsScreen} />
      <EditProfileMenuStack.Screen name="AuthorizedUsersScreen" component={AuthorizedUsersScreen} />
      <EditProfileMenuStack.Screen
        name="AddAuthorizedUsersScreen"
        component={AddAuthorizedUserScreen}
      />
      <EditProfileMenuStack.Screen
        name="FamilyFriendsPetsScreen"
        component={FamilyFriendsPetsScreen}
      />
      <EditProfileMenuStack.Screen name="AddPassengerScreen" component={AddPassengerScreen} />
      <EditProfileMenuStack.Screen name="AddPetScreen" component={AddPetScreen} />
    </EditProfileMenuStack.Navigator>
  );
}

const AccountStack = createStackNavigator();
function AccountNavigator({ navigation }) {
  const state = navigation.getState();

  React.useEffect(() => {
    const unsubscribe = navigation.addListener("tabPress", (e) => {
      e.preventDefault();

      setStatusBarStyle("light");

      navigation.navigate(state.routeNames[state.index], { screen: "ProfileScreen" });
    });

    return unsubscribe;
  }, [navigation, state.index, state.routeNames]);

  return (
    <AccountStack.Navigator initialRouteName="ProfileScreen" screenOptions={{ headerShown: false }}>
      <AccountStack.Screen name="ProfileScreen" component={ProfileScreen} />
      <AccountStack.Screen name="SettingsMenu" component={EditProfileMenuNavigator} />
      <AccountStack.Screen name="ActivityScreen" component={ActivityScreen} />
      <AccountStack.Screen
        name="DepositAccountActivityScreen"
        component={DepositAccountActivityScreen}
      />
      <AccountStack.Screen name="OwnershipActivityScreen" component={OwnershipActivityScreen} />
      <AccountStack.Screen name="EditProfileScreen" component={BillingInformationScreen} />
      <AccountStack.Screen name="AircraftBragScreen" component={AircraftBragScreen} />
    </AccountStack.Navigator>
  );
}

const ReserveStack = createStackNavigator();
function ReserveNavigator({ navigation }) {
  const state = navigation.getState();

  React.useEffect(() => {
    const unsubscribe = navigation.addListener("tabPress", (e) => {
      e.preventDefault();

      setStatusBarStyle("light");

      navigation.navigate(state.routeNames[state.index], { screen: "ReserveScreen" });
    });

    return unsubscribe;
  }, [navigation, state.index, state.routeNames]);

  return (
    <ReserveStack.Navigator initialRouteName="ReserveScreen" screenOptions={{ headerShown: false }}>
      <ReserveStack.Screen name="ReserveScreen" component={ReserveScreen} />
    </ReserveStack.Navigator>
  );
}

const TripsStack = createStackNavigator();
function TripsNavigator({ navigation }) {
  const state = navigation.getState();

  React.useEffect(() => {
    const unsubscribe = navigation.addListener("tabPress", (e) => {
      e.preventDefault();


File: /Users/codeshack-vii/Documents/_projects/Volato/.aider.chat.history.md


# aider chat started at 2024-06-25 15:38:55

> Add .aider* to .gitignore (recommended)? y  
> Added .aider* to .gitignore  
> /Users/codeshack-vii/.pyenv/versions/3.12.2/bin/aider  
> Aider v0.40.1  
> Models: gpt-4o with diff edit format, weak model gpt-3.5-turbo  
> Git repo: .git with 294 files  
> Repo-map: using 1024 tokens  
> VSCode terminal detected, pretty output has been disabled.  
> Use /help to see in-chat commands, run with --help to see cmd line args  

#### /add .gitignore  
> Added /Users/codeshack-vii/Documents/_projects/Volato/.gitignore to the chat  

#### add .python-version to `.gitignore`  

.gitignore
```python
<<<<<<< SEARCH
.aider*
=======
.aider*
.python-version
>>>>>>> REPLACE
```

> Committing .gitignore before applying edits.  
> Commit e2672c6 Added .aider* to .gitignore.  
> Applied edit to .gitignore  
> Commit c30f14e Added .python-version to .gitignore.  

#### /drop  
> Dropping all files from the chat session.  

#### <blank>  

#### /exit  

# aider chat started at 2024-06-25 15:47:38

> /Users/codeshack-vii/.pyenv/versions/3.12.2/bin/aider  
> Aider v0.40.1  
> Models: gpt-4o with diff edit format, weak model gpt-3.5-turbo  
> Git repo: .git with 294 files  
> Repo-map: using 1024 tokens  
> VSCode terminal detected, pretty output has been disabled.  
> Use /help to see in-chat commands, run with --help to see cmd line args  

#### /add models/DepositAccount.js  
> Added /Users/codeshack-vii/Documents/_projects/Volato/models/DepositAccount.js to the chat  

#### add a property, withdrawalBalance as a number that maybe null  

Here is the required change to add the `withdrawalBalance` property to the `DepositAccount` model:

models/DepositAccount.js
```python
<<<<<<< SEARCH
    allDepositAccountIds: types.array(types.number),
=======
    withdrawalBalance: types.maybeNull(types.number),
    allDepositAccountIds: types.array(types.number),
>>>>>>> REPLACE
```

> Applied edit to models/DepositAccount.js  
> Commit 90cdac9 Add withdrawal balance field to DepositAccount model.  

#### /add screens/ProfileScreen.js  
> Added /Users/codeshack-vii/Documents/_projects/Volato/screens/ProfileScreen.js to the chat  

#### on profile screen, add withdrawal balance underneath current balance on the deposit accounto view card  

Here is the required change to add the `withdrawalBalance` underneath the `current balance` on the deposit account view card:

screens/ProfileScreen.js
```python
<<<<<<< SEARCH
                </View>
=======
                  <Text style={styles.ownershipText} preset="bold">
                    Withdrawal Balance:{" "}
                    {item.withdrawalBalance?.toLocaleString("en-US", {
                      style: "currency",
                      currency: "USD",
                    }) || "N/A"}
                  </Text>
                </View>
>>>>>>> REPLACE
```

> Applied edit to screens/ProfileScreen.js  
> Commit 818b912 Added withdrawal balance display in ProfileScreen.  

#### Move the withdrawal balance text into the deposit account section, not the ownership section  

To move the `withdrawalBalance` text into the deposit account section, we need to:

1. Remove the `withdrawalBalance` text from the ownership section.
2. Add the `withdrawalBalance` text to the deposit account section.

Here are the *SEARCH/REPLACE* blocks:

screens/ProfileScreen.js
```python
<<<<<<< SEARCH
                  <Text style={styles.ownershipText} preset="bold">
                    Withdrawal Balance:{" "}
                    {item.withdrawalBalance?.toLocaleString("en-US", {
                      style: "currency",
                      currency: "USD",
                    }) || "N/A"}
                  </Text>
=======
>>>>>>> REPLACE
```

screens/ProfileScreen.js
```python
<<<<<<< SEARCH
                </View>
=======
                  <Text style={styles.ownershipText} preset="bold">
                    Withdrawal Balance:{" "}
                    {item.withdrawalBalance?.toLocaleString("en-US", {
                      style: "currency",
                      currency: "USD",
                    }) || "N/A"}
                  </Text>
                </View>
>>>>>>> REPLACE
```

> Applied edit to screens/ProfileScreen.js  
> No changes made to git tracked files.  

#### /drop  
> Dropping all files from the chat session.  

#### /add screens/Profile/DepositAccountActivity.js  
> Added /Users/codeshack-vii/Documents/_projects/Volato/screens/Profile/DepositAccountActivity.js to the chat  

#### add a query named getInsiderAccount that uses react-query to call api.insider.get()  

To add a query named `getInsiderAccount` that uses `react-query` to call `api.insider.get()`, we need to:

1. Define the `getInsiderAccount` query using `useQuery`.
2. Ensure it calls `api.insider.get()`.

Here is the *SEARCH/REPLACE* block:

screens/Profile/DepositAccountActivity.js
```python
<<<<<<< SEARCH
  const query = useQuery({
=======
  const getInsiderAccount = useQuery({
>>>>>>> REPLACE
```

screens/Profile/DepositAccountActivity.js
```python
<<<<<<< SEARCH
    queryKey: ["desposit-account", depositAccount.id],
    queryFn: () => api.insider.get(),
  });

  const renderItem = ({ item, index }) => {
=======
    queryKey: ["insider-account"],
    queryFn: () => api.insider.get(),
  });

  const query = useQuery({
    queryKey: ["desposit-account", depositAccount.id],
    queryFn: () => api.insider.get(),
  });

  const renderItem = ({ item, index }) => {
>>>>>>> REPLACE
```

> Applied edit to screens/Profile/DepositAccountActivity.js  
> Commit 6ff2902 Added query to get insider account information in DepositAccountActivityScreen.  

#### add a state property, transactionsList, with a default of empty list  

To add a state property `transactionsList` with a default of an empty list, we need to:

1. Import `useState` from React.
2. Initialize the `transactionsList` state property.

Here are the *SEARCH/REPLACE* blocks:

screens/Profile/DepositAccountActivity.js
```python
<<<<<<< SEARCH
import { FlatList, StyleSheet, View } from "react-native";


File: /Users/codeshack-vii/Documents/_projects/Volato/index.js

import { registerRootComponent } from 'expo';

import App from './App';

// registerRootComponent calls AppRegistry.registerComponent('main', () => App);
// It also ensures that whether you load the app in Expo Go or in a native build,
// the environment is set up appropriately
registerRootComponent(App);


File: /Users/codeshack-vii/Documents/_projects/Volato/webpack.config.js

// Expo CLI will await this method so you can optionally return a promise.
const createExpoWebpackConfigAsync = require("@expo/webpack-config");

// eslint-disable-next-line func-names
module.exports = async function (env, argv) {
  // https://github.com/expo/expo-cli/tree/master/packages/webpack-config#environment
  const enviroment = {
    ...env,
    pwa: false,
    babel: {
      dangerouslyAddModulePathsToTranspile: ["@draftbit", "@amplitude"],
    },
  };

  const config = await createExpoWebpackConfigAsync(enviroment, argv);

  // Maybe you want to turn off compression in dev mode.
  if (config.mode === "development") {
    config.devServer.compress = false;
  }

  // Added at Customer Request to fix Victory Charts for Web Apps
  config.resolve.alias["victory-native"] = "victory";

  // Expo's default is to enable these options, which results in somewhat
  // confusing behavior: You might know you updated your app, but have to
  // arbitrarily refresh a lot before you see the newer version.  In the
  // meantime, if the app is open in another tab, you can run into circumstances
  // where the new service worker is servicing requests for an old version of an
  // app, which is likely to lead to esoteric, hard to reproduce issues.
  // Instead, we put a notification in your app which listens for new service
  // workers, then replaces everything in a single shot with a forced refresh,
  // avoiding the issues above, along with being a bit more explit to users.
  config.plugins.forEach(({ config: pluginConfig }) => {
    if (pluginConfig && "skipWaiting" in pluginConfig) {
      pluginConfig.skipWaiting = false;
      pluginConfig.clientsClaim = false;
    }
  });

  return config;
};


File: /Users/codeshack-vii/Documents/_projects/Volato/README.md

# Welcome to your Draftbit app!

This `README` is designed to help you get your Draftbit app running locally. Read
through the next few sections carefully, and if you encounter any issues please
do not hesitate to post in [Community](https://community.draftbit.com).

> Note that all of the commands in this document should be run using your
> computer's **command line**. If you're unsure of what this is, please read
> [this](https://tutorial.djangogirls.org/en/intro_to_command_line/) guide
> before moving on.

Remember, at any point you can go back to [build.draftbit.com](https://build.draftbit.com) and continue building your app
there!

## Requirements
- [Node.js LTS release](https://nodejs.org/en/). As of 07/21 this is 14.17+
- [Expo CLI](https://docs.expo.io/get-started/installation)
- [Git](https://git-scm.com/)
- [Watchman](https://facebook.github.io/watchman/docs/install#buildinstall) for macOS users
- [Yarn](https://classic.yarnpkg.com/en/docs/install) use this over `npm install` when installing dependencies

> Only Node.js LTS releases (even-numbered) are recommended. As Node.js [officially states](https://nodejs.org/en/about/releases/), "Production applications should only use Active LTS or Maintenance LTS releases."

## Recommended Tools

- [VSCode Editor](https://code.visualstudio.com/download)
  - [VSCode Expo Extension](https://marketplace.visualstudio.com/items?itemName=byCedric.vscode-expo) for `app.json` debugging and autocomplete.
- Windows users: [PowerShell](https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-windows), Bash via WSL, or the VSCode terminal.
- Expo Go for iOS and Android
  - 🤖  [Android Play Store](https://play.google.com/store/apps/details?id=host.exp.exponent) - Android Lollipop (5) and greater.
  - 🍎  [iOS App Store](https://itunes.com/apps/exponent) - iOS 11 and greater.


## Installing Node.js

You can install Node by going to the [website directly](https://nodejs.org/en/) and clicking the side that says "Recommended For Most Users". This will guide you through the process. 

Once Node has been installed, run the following on the command line to make sure
it's been installed correctly:

```
$ node -v
```

If you see the current version of Node in response, you've successfully
installed Node on your machine.

For example,

```
$ node -v
v14.17.3
```

[Learn more about installing Nodejs](https://nodejs.dev/learn/how-to-install-nodejs)

> 😳 **Need help?** Try searching the [Community](https://community.draftbit.com) &mdash; which are a great resource for troubleshooting.

## Installing Expo CLI

You can install the Expo CLI using the following command. *This is the one spot where npm install is required!*

```
$ npm install -g expo-cli
```

Verify that the installation was successful by running `expo whoami`. You're not logged in yet, so you will see "Not logged in". You can create an account by running `expo register` if you like, or if you have one already run `expo login`, but you also don't need an account to get started.

[Learn more about Expo CLI here](https://docs.expo.io/get-started/installation/#installing-expo-cli)


## Install Project Dependencies

First, navigate to the project directory. The .zip will likely be in your
downloads folder, so extract the .zip and move it to the desired location
before proceeding.

Now, run the following commands to install the project dependencies (note that
you'll need an internet connection to do so).

```
$ cd Desktop/New-App
$ yarn
```

> The `cd` command above takes you into the project directory so you can install
> the correct dependencies. You should replace `Desktop/New-App` with the actual
> path to your unzipped project folder.

## Running

To start your project, simply run: `yarn start` inside of the project directory
(make sure you've [installed the dependencies
locally](#install-local-dependencies) first). This should open the Expo
developer tools in a browser tab.

### Running in an emulator

You can run your app on your mobile device, on the iOS simulator (if you have
a Mac), or on the Android emulator. If you'd prefer to run your app on an
emulator, see the installation instructions below.

- [iOS Simulator](https://docs.expo.io/workflow/ios-simulator/)
- [Android Studio](https://docs.expo.io/workflow/android-studio-emulator/)


### Running on your Android or iOS Device

The fastest way to get up and running is to use the Expo Go app on your iOS or Android device. Expo Go allows you to open up apps that are being served through Expo CLI.

- 🤖 [Android Play Store](https://play.google.com/store/apps/details?id=host.exp.exponent) - Android Lollipop (5) and greater.
- 🍎 [iOS App Store](https://itunes.com/apps/exponent) - iOS 11 and greater.

## File Structure

```
.
    ├── assets                 # Static assets like images and fonts.
    ├── config                 # JS representation of fonts, images, themes, and more
        └── Themes.js          # Example file for your app's themes
    ├── screens                # React Native code for the screens you built.
    │   └── MyFirstScreen.js   # Example file for the screen named "My First Screen"
    ├── components.js          # All your custom components
    ├── .gitignore             # List of files to ignore when comitting with Git
    ├── App.js                 # Entry point for your app
    ├── app.json               # Configuration file for your app, used by Expo
    ├── AppNavigator.js        # Code for your app's navigators
    ├── package.json           # The metadata for your project, including dependencies
    └── README.md              # This file!
```

## Publishing your app to the App Store

Expo has really great documentation for how to get started. [Click here](https://docs.expo.io/distribution/building-standalone-apps/) to learn more.

## Troubleshooting

Any errors that may occur in the process of developing or testing your app will show up as a "Redbox" error on the testing device. A red box will be show on the device with the error message and stack trace for the error. The Expo documentation has [more information about Redbox errors](https://docs.expo.io/get-started/errors/#redbox-errors-and-stack-traces).

Compilation errors or errors occurring when the expo process tries to execute
commands will also show up in the browser. If you cannot fix these errors, you
should refer to Expo's documentation on [debugging
Javascript](https://docs.expo.io/workflow/debugging/).

## FAQ

- _How can I add my code to GitHub?_

  Pushing your code to GitHub is easy! Follow the information
  [guide](https://help.github.com/en/github/getting-started-with-github/create-a-repo)
  to create your repository and commit your project code.

- _How do I build a binary for the App and Play store?_

  Expo published an [excellent
  guide](https://docs.expo.io/versions/latest/distribution/app-stores/) for
  deploying to the Apple iTunes Store and the Google Play Store. Moreover, for
  users with an iOS Enterprise certifcate, [Expo has information about using
  the certificate to build your apps](https://docs.expo.io/versions/latest/distribution/building-standalone-apps/#if-you-choose-to-build-for-ios).

- _What/where is the license for this code?_

  There's no license by default, but if you create a GitHub repository for your
  project code, for example, [adding a license is
  easy](https://help.github.com/en/github/building-a-strong-community/adding-a-license-to-a-repository).

- _Can I run Expo web with this?_

  Of course! See [this](https://docs.expo.io/versions/v37.0.0/bare/using-web/#__next) guide by Expo for running your React Native app in
  a web browser.

- _What libraries does this code depend on?_

  You can see the full list in your projects `package.json` file (under the
  `dependencies` section), but a few of our dependencies are `react-navigation`,
  `react-native-screens`, and `expo-av`.


File: /Users/codeshack-vii/Documents/_projects/Volato/metro.config.js

/* eslint-disable import/no-extraneous-dependencies */
/* eslint-disable global-require */
const { getDefaultConfig: getDefaultExpoConfig } = require("@expo/metro-config");
const { getDefaultConfig } = require("metro-config");

let metroConfig;
let isExpo = false;
try {
  const Constants = require("expo-constants");
  // True if the app is running in an `expo build` app or if it's running in Expo Go.
  isExpo =
    Constants.executionEnvironment === "standalone" ||
    Constants.executionEnvironment === "storeClient";
  // eslint-disable-next-line no-empty
} catch {}

if (isExpo) {
  /**
   *  Expo metro config
   * Learn more https://docs.expo.io/guides/customizing-metro

   * For one idea on how to support symlinks in Expo, see:
   * https://github.com/infinitered/ignite/issues/1904#issuecomment-1054535068
   */
  metroConfig = getDefaultExpoConfig(__dirname);
} else {
  /**
   * Vanilla metro config - we're using a custom metro config because we want to support symlinks
   * out of the box. This allows you to use pnpm and/or play better in a monorepo.
   *
   * You can safely delete this file and remove @rnx-kit/metro-* if you're not
   * using PNPM or monorepo or symlinks at all.
   *
   * However, it doesn't hurt to have it either.
   */
  const { makeMetroConfig } = require("@rnx-kit/metro-config");
  const MetroSymlinksResolver = require("@rnx-kit/metro-resolver-symlinks");

  metroConfig = (async () => {
    const defaultConfig = await getDefaultConfig();
    return makeMetroConfig({
      projectRoot: __dirname,
      // watchFolders: [`${__dirname}/../..`], // for monorepos
      resolver: {
        /**
         * This custom resolver is for if you're using symlinks.
         *
         * You can disable it if you're not using pnpm or a monorepo or symlinks.
         */
        resolveRequest: MetroSymlinksResolver(),
        assetExts: [...defaultConfig.resolver.assetExts, "bin"],
        sourceExts: [...defaultConfig.resolver.sourceExts, "mjs"],
      },
    });
  })();
}

module.exports = metroConfig;


File: /Users/codeshack-vii/Documents/_projects/Volato/babel.config.js

module.exports = function (api) {
  api.cache(true);
  return {
    presets: ["babel-preset-expo"],
    plugins: ["react-native-reanimated/plugin","@babel/plugin-proposal-export-namespace-from"],
  };
};

File: /Users/codeshack-vii/Documents/_projects/Volato/.gitignore

# OSX
#
.DS_Store

# Xcode
#
build/
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata
*.xccheckout
*.moved-aside
DerivedData
*.hmap
*.ipa
*.xcuserstate
ios/.xcode.env.local
keys/*

# Android/IntelliJ
#
build/
.idea
.gradle
local.properties
*.iml
*.hprof

# node.js
#
node_modules/
npm-debug.log
yarn-error.log

# BUCK
buck-out/
\.buckd/
*.keystore
!debug.keystore

# fastlane
#
# It is recommended to not store the screenshots in the git repo. Instead, use fastlane to re-generate the
# screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/

**/fastlane/report.xml
**/fastlane/Preview.html
**/fastlane/screenshots
**/fastlane/test_output

# Bundle artifact
*.jsbundle

# CocoaPods
/ios/Pods/

# Ignite-specific items below
# You can safely replace everything above this comment with whatever is
# in the default .gitignore generated by React-Native CLI

# VS Code
.vscode

# Expo
.expo/*
bin/Exponent.app

npm-debug.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision
*.orig.*
web-build/
certs
# *.xcodeproj

# Configurations
.env.local
!env.js
eas.json


.buildt

ios
android
.expo/devices.json
.aider*
.python-version


File: /Users/codeshack-vii/Documents/_projects/Volato/libs.js



File: /Users/codeshack-vii/Documents/_projects/Volato/.python-version

3.12.2


File: /Users/codeshack-vii/Documents/_projects/Volato/.eslintignore

node_modules/


File: /Users/codeshack-vii/Documents/_projects/Volato/ReactotronConfig.js

/* eslint-disable import/no-extraneous-dependencies */
import AsyncStorage from "@react-native-async-storage/async-storage";
import Reactotron from "reactotron-react-native";

Reactotron.setAsyncStorageHandler(AsyncStorage) // AsyncStorage would either come from `react-native` or `@react-native-community/async-storage` depending on where you get it from
  .configure() // controls connection & communication settings
  .useReactNative() // add all built-in react native plugins
  .connect(); // let's connect!


File: /Users/codeshack-vii/Documents/_projects/Volato/App.js

import * as React from "react";

import { Provider as ThemeProvider } from "@draftbit/ui";
import LogRocket from "@logrocket/react-native";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { useFonts } from "expo-font";
import * as Notifications from "expo-notifications";
import * as SplashScreen from "expo-splash-screen";
import {
  getTrackingPermissionsAsync,
  isAvailable,
  requestTrackingPermissionsAsync,
} from "expo-tracking-transparency";
import { MD3LightTheme, PaperProvider } from "react-native-paper";
import { initialWindowMetrics, SafeAreaProvider } from "react-native-safe-area-context";

import { api } from "./apis/VolatoMobileAPIApi";
import AppNavigator from "./AppNavigator";
import { ModalProvider } from "./components/Modals";
import { ManageModal } from "./components/Modals/ManageModal";
import cacheAssetsAsync from "./config/cacheAssetsAsync";
import { AccountProvider } from "./contexts/AccountContext";
import { ContactProvider } from "./contexts/ContactContext";
import { LookupDataProvider } from "./contexts/LookupDataContext";
import { useAircraftPhotoStore } from "./models/AircraftPhoto";
import { RootStoreProvider, useStores } from "./models/root";
import { colors, customFontsToLoad } from "./themes";
import DraftbitTheme from "./themes/DraftbitTheme";

// import { useFboImageStore } from "./models/FboImage";

// if (__DEV__) {
//   import("./ReactotronConfig").then(() => console.log("Reactotron Configured"));
// }

const PaperTheme = {
  ...MD3LightTheme,
  colors: {
    ...MD3LightTheme.colors,
    error: colors.palette.nomadic,
  },
};

SplashScreen.preventAutoHideAsync();

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
});

// Set up LogRocket
LogRocket.init("skvpkj/volato-mobile");

/**
 * Set up React Query
 */
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      structuralSharing: false,
    },
  },
});

function App() {
  const [isReady, setIsReady] = React.useState(false);
  const [fontsLoaded] = useFonts(customFontsToLoad);

  const { userStore, passengerStore, petStore, authStore } = useStores();
  const aircraftPhotoStore = useAircraftPhotoStore();

  const checkTrackingPermission = async () => {
    if (!isAvailable()) return;
    const { canAskAgain, granted } = await getTrackingPermissionsAsync();
    if (granted) return;
    if (!canAskAgain) return;
    const { granted: newGranted } = await requestTrackingPermissionsAsync();
  };

  // try and retreive the accessToken from async store to get the user of the app
  const checkAccessToken = async () => {
    // FOR TESTING
    // TODO: REMOVE THIS
    // await AsyncStorage.clear();

    const accessToken = await AsyncStorage.getItem("accessToken");

    if (!accessToken) {
      return;
    }

    try {
      api.registerAccessToken(accessToken);
      const response = await api.auth.me();

      const user = response.customer;

      // didn't finish signing up
      if (!user.email || !user.phone) {
        await AsyncStorage.clear();
        return;
      }

      authStore.setAccessToken(accessToken);
      userStore.setProfile(response);
    } catch (error) {
      console.log(error);
    }
  };

  React.useEffect(() => {
    async function prepare() {
      try {
        await cacheAssetsAsync();
        await checkAccessToken();
      } catch (e) {
        console.warn(e);
      } finally {
        setIsReady(true);
      }
    }

    prepare();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const onLayoutRootView = React.useCallback(async () => {
    if (isReady && fontsLoaded) {
      await SplashScreen.hideAsync();
    }
  }, [isReady, fontsLoaded]);

  if (!isReady || !fontsLoaded) {
    return null;
  }

  return (
    <SafeAreaProvider initialMetrics={initialWindowMetrics} onLayout={onLayoutRootView}>
      <RootStoreProvider>
        <PaperProvider theme={PaperTheme}>
          <QueryClientProvider client={queryClient}>
            <ThemeProvider theme={DraftbitTheme}>
              <ModalProvider>
                <AccountProvider>
                  <ContactProvider>
                    <LookupDataProvider>
                      <AppNavigator />
                      <ManageModal />
                    </LookupDataProvider>
                  </ContactProvider>
                </AccountProvider>
              </ModalProvider>
            </ThemeProvider>
          </QueryClientProvider>
        </PaperProvider>
      </RootStoreProvider>
    </SafeAreaProvider>
  );
}

export default App;


File: /Users/codeshack-vii/Documents/_projects/Volato/apis/catering-api.js

import { api } from "./VolatoMobileAPIApi";

export const getCateringCategories = async () => {
  try {
    const result = await api.cateringCategories.get();
    if (result) {
      return { kind: "ok", categories: result };
    }
    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};


File: /Users/codeshack-vii/Documents/_projects/Volato/apis/partnership-api.js

import { api } from "./VolatoMobileAPIApi";

export const getPartners = async () => {
  try {
    const result = await api.advertisingPartners.get();
    if (result) {
      return { kind: "ok", partners: result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};


File: /Users/codeshack-vii/Documents/_projects/Volato/apis/passenger-api.js

import { api } from "./VolatoMobileAPIApi";

export const getPassengers = async () => {
  try {
    const result = await api.passengers.get();
    if (result) {
      return { kind: "ok", passengers: result };
    }
    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const deletePassenger = async (passengerId) => {
  try {
    const result = await api.passenger.delete(passengerId);
    if (result) {
      return { kind: "ok", result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const createPassenger = async (passenger) => {
  try {
    const result = await api.passengers.post(passenger);
    if (result) {
      return { kind: "ok", passenger: result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const updatePassenger = async (id, values) => {
  try {
    const result = await api.passenger.patch(id, values);
    if (result) {
      return { kind: "ok", passenger: result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const getDriverLicense = async (contactId) => {
  try {
    const result = await api.passenger.getDriverLicense(contactId);
    if (result) {
      return { kind: "ok", result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const uploadDriverLicense = async (data) => {
  try {
    const result = await api.passenger.uploadDriverLicense(data);
    if (result) {
      return { kind: "ok", result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(JSON.stringify(e.response, null, 2));
    return {
      kind: "bad-data",
    };
  }
};


File: /Users/codeshack-vii/Documents/_projects/Volato/apis/auth-api.js

import { api } from "./VolatoMobileAPIApi";

export const initiateSmsLogin = async (phoneNumber, smsOptIn) => {
  try {
    const result = await api.auth.initiateSmsLogin(phoneNumber, smsOptIn);
    if (result) {
      return { kind: "ok", result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const verifySmsLogin = async (phoneNumber, challengeCode) => {
  try {
    const result = await api.auth.verifySmsLogin(phoneNumber, challengeCode);
    if (result) {
      return { kind: "ok", result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const initiateEmailLogin = async (email, emailOptIn) => {
  try {
    const result = await api.auth.initiateEmailLogin(email, emailOptIn);
    if (result) {
      return { kind: "ok", result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const verifyEmailLogin = async (email, challengeCode) => {
  try {
    const result = await api.auth.verifyEmailLogin(email, challengeCode);
    if (result) {
      return { kind: "ok", result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const register = async (data) => {
  try {
    const result = await api.auth.register(data);
    if (result) {
      return { kind: "ok", result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const me = async () => {
  try {
    const result = await api.auth.me();
    if (result) {
      return { kind: "ok", result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};


File: /Users/codeshack-vii/Documents/_projects/Volato/apis/pettype-api.js

import { api } from "./VolatoMobileAPIApi";

export const getPetTypes = async () => {
  try {
    const result = await api.petTypes.get();
    if (result) {
      return { kind: "ok", petTypes: result };
    }
    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};


File: /Users/codeshack-vii/Documents/_projects/Volato/apis/pricingquote-api.js

import { api } from "./VolatoMobileAPIApi";

export const getPricingQuoteItineraryPassengers = async (id) => {
  try {
    const result = await api.pricingQuote.pax(id);
    if (result) {
      return { kind: "ok", result };
    }
    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};


File: /Users/codeshack-vii/Documents/_projects/Volato/apis/chat-api.js

import { api } from "./VolatoMobileAPIApi";

export const createChat = async (tripId, pricingQuoteId) => {
  try {
    const result = await api.chat.create({
      tripId,
      pricingQuoteId,
    });
    if (result) {
      return { kind: "ok", chat: result };
    }
    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const getChatList = async () => {
  try {
    const result = await api.chat.list();
    if (result) {
      return { kind: "ok", cases: result.data };
    }
    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const getChatMessages = async (chatId) => {
  try {
    const result = await api.chat.messages(chatId);
    if (result) {
      return { kind: "ok", messages: result.data.messages };
    }
    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const sendChatMessage = async (chatId, message) => {
  try {
    const result = await api.chat.send(chatId, message);
    if (result) {
      return { kind: "ok", message: result };
    }
    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};


File: /Users/codeshack-vii/Documents/_projects/Volato/apis/apirtport.js

import { api } from "./VolatoMobileAPIApi";

export const searchAirport = async (searchText) => {
  try {
    const result = await api.airports.post(searchText);
    if (result) {
      return { kind: "ok", result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const getCityPhoto = async (airportId) => {
  try {
    const result = await api.airport.photo.get(airportId);
    if (result) {
      return { kind: "ok", result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const getAirportFbo = async (airportId) => {
  try {
    const result = await api.airport.fbos.get(airportId);
    if (result) {
      return { kind: "ok", result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};


File: /Users/codeshack-vii/Documents/_projects/Volato/apis/VolatoMobileAPIApi.js

import axios from "axios";

export const instance = axios.create({
  baseURL: process.env.EXPO_PUBLIC_API_URL,
});

const http = {
  post: (url, data) => instance.post(`/mobile${url}`, data).then((response) => response.data),
  get: (url) => instance.get(`/mobile${url}`).then((response) => response.data),
  patch: (url, data) => instance.patch(`/mobile${url}`, data).then((response) => response.data),
  delete: (url) => instance.delete(`/mobile${url}`).then((response) => response.data),
  postWithHeaders: (url, data, headers) =>
    instance.post(`/mobile${url}`, data, { headers }).then((response) => response.data),
  getVolato: (url, params) =>
    instance.get(`${url}?${new URLSearchParams(params)}`).then((response) => response.data),
};

export const api = {
  /**
   *
   * @param {string} accessToken
   */
  registerAccessToken: (accessToken) => {
    instance.interceptors.request.use((config) => {
      config.headers.Authorization = `Bearer ${accessToken}`;

      return config;
    });
  },
  removeAccessToken: () => {
    instance.interceptors.request.use((config) => {
      delete config.headers.Authorization;

      return config;
    });
  },
  activity: {
    get: () => http.get("/activity"),
  },
  advertisingPartners: {
    get: () => http.get("/advertising-partner"),
  },
  aircrafts: {
    get: () => http.get("/aircraft"),
  },
  aircraft: {
    get: (id) => http.get(`/aircraft/${id}`),
    photos: () => http.get("/aircraftphoto"),
    stats: (id) => http.get(`/aircraft/${id}/activity-stats`),
  },
  aircraftTypes: {
    get: () => http.get("/aircrafttype"),
  },
  airports: {
    post: (term) => http.post(`/airport/search?query=${term}`),
  },
  airport: {
    get: () => http.get(`/airport`),
    fbos: {
      get: (id) => http.get(`/airport/${id}/fbo`),
    },
    photo: {
      get: (id) => http.get(`/airport/${id}/photo`),
    },
    ids: {
      get: ({ id, fromAirportId, toAirportId }) =>
        http.get(`/airport/ids?from_airport_id=${fromAirportId}&to_airport_id=${toAirportId}`),
    },
  },
  auth: {
    initiateSmsLogin: (phoneNumber, smsOptIn) =>
      http.post("/auth/initiate-login", { phoneNumber, smsOptIn }),
    verifySmsLogin: (phoneNumber, challengeCode) =>
      http.post("/auth/verify-login", { phoneNumber, challengeCode }),
    initiateEmailLogin: (email, emailOptIn) =>
      http.post("/auth/initiate-login", { email, emailOptIn }),
    verifyEmailLogin: (email, challengeCode) =>
      http.post("/auth/verify-login", { email, challengeCode }),
    /**
     *
     * @param {string} accessToken
     */
    register: (data) => http.post("/auth/register", data),
    me: () => http.get("/auth/me"),
  },
  authorizedUsers: {
    get: () => http.get("/authorized-user"),
    post: (data) => http.post("/authorized-user", data),
  },
  authorizedUser: {
    patch: (id, data) => http.patch(`/authorized-user/${id}`, data),
    delete: (id) => http.delete(`/authorized-user/${id}`),
  },
  catering: {
    get: () => http.get("/catering"),
  },
  cateringCategories: {
    get: () => http.get("/cateringcategory"),
  },
  chat: {
    list: () => http.get("/oc-case"),
    create: (data) => http.post("/oc-case", data),
    messages: (chatId) => http.get(`/oc-case/${chatId}`),
    send: (chatId, message) =>
      http.post(`/oc-message`, {
        message,
        oc_case_id: chatId,
      }),
  },
  contacts: {
    get: ({ pageSize = 10, page = 1 }) => http.get(`/contact?pageSize=${pageSize}&page=${page}`),
    post: (data) => http.post("/contact", data),
  },
  contact: {
    get: (id) => http.get(`/contact/${id}`),
    patch: (id, data) => http.patch(`/contact/${id}`, data),
  },
  customerDeposit: {
    get: (id) => http.get(`/customer-deposit/${id}`),
  },
  insider: {
    get: () => http.get(`/insider/account`),
  },
  passengers: {
    get: () => http.get("/passenger"),
    post: (data) => http.post("/passenger", data),
  },
  passenger: {
    patch: (id, data) => http.patch(`/passenger/${id}`, data),
    delete: (id) => http.delete(`/passenger/${id}`),
    getDriverLicense: (contactId) => http.get(`/contact/passport/get?contact_id=${contactId}`),
    uploadDriverLicense: (data) =>
      http.postWithHeaders(`/contact/passport/upload`, data, {
        "Content-Type": "multipart/form-data",
      }),
  },
  pets: {
    get: () => http.get("/pet"),
    post: (data) => http.post("/pet", data),
  },
  pet: {
    patch: (id, data) => http.patch(`/pet/${id}`, data),
    delete: (id) => http.delete(`/pet/${id}`),
  },
  petTypes: {
    get: () => http.get("/pettype"),
  },
  pricing: {
    getTripPricing: (itinerary) => http.post("/pricing/get-trip-pricing", { itinerary }),
    getTripPricingForInsiderMax: (itinerary) =>
      http.getVolato("/trippricing_public/getTripPricing", {
        pricing_rate_id: 8,
        itinerary: JSON.stringify(itinerary),
      }),
    createQuote: (itinerary, notes) =>
      http.post("/pricing/create-quote-for-contact", {
        itinerary: JSON.stringify(itinerary),
        ...(notes && { notes: "volatoGo-booking" }),
      }),
    learnMoreAboutInsider: (firstName, lastName, email, phone, message) =>
      http.post("/pricing/upsell-to-max", {
        firstName,
        lastName,
        email,
        phone,
        message,
      }),
  },
  rss: {
    get: () => http.getVolato("/rss"),
  },
  dailyDeals: {
    get: () => http.get("/dailydeals"),
    inquire: (id) => http.post(`/dailydeals/${id}/inquiry`),
  },
  trips: {
    get: () => http.get("/trip"),
    post: (data) => http.post("/trip"),
  },
  trip: {
    /**
     *
     * @param {number} id
     */
    get: (id) => http.get(`/trip/${id}`),
    /**
     *
     * @param {number} id
     * @param {object} data
     */
    patch: (id, data) => http.patch(`/trip/${id}`, data),
  },
  tripLeg: {
    get: (id) => http.get(`/trip-leg/${id}`),
    services: (id) => http.get(`/flightleg/addonservices/${id}`),
    pax: (id) => http.get(`/flightleg/${id}/pax`),
  },
  user: {
    patch: (data) => http.patch("/auth/me", data),
    photo: {


File: /Users/codeshack-vii/Documents/_projects/Volato/apis/contact-api.js

import { api } from "./VolatoMobileAPIApi";

export const getContacts = async (params = {}) => {
  try {
    const result = await api.contacts.get(params);
    if (result) {
      return { kind: "ok", contacts: result };
    }
    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};


File: /Users/codeshack-vii/Documents/_projects/Volato/apis/rss-api.js

import { api } from "./VolatoMobileAPIApi";

export const getRssFeeds = async () => {
  try {
    const result = await api.rss.get();
    if (result) {
      return { kind: "ok", feeds: result };
    }
    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};


File: /Users/codeshack-vii/Documents/_projects/Volato/apis/aircraft-api.js

import { api } from "./VolatoMobileAPIApi";

export const getAircraft = async () => {
  try {
    const result = await api.aircraft.get();
    if (result) {
      return { kind: "ok", result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const getAircraftPhotos = async () => {
  try {
    const result = await api.aircraft.photos();
    if (result) {
      return { kind: "ok", result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};


File: /Users/codeshack-vii/Documents/_projects/Volato/apis/authorizeduser-api.js

import { api } from "./VolatoMobileAPIApi";

export const getAuthorizedUsers = async () => {
  try {
    const result = await api.authorizedUsers.get();
    if (result) {
      return { kind: "ok", authorizedUsers: result };
    }
    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const deleteAuthorizedUser = async (authorizedUserId) => {
  try {
    const result = await api.authorizedUser.delete(authorizedUserId);
    if (result) {
      return { kind: "ok", result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const createAuthorizedUser = async (authorizedUser) => {
  try {
    const result = await api.authorizedUsers.post(authorizedUser);

    if (result) {
      return { kind: "ok", authorizedUser: result };
    }
    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const updateAuthorizedUser = async (id, values) => {
  try {
    const result = await api.authorizedUser.patch(id, values);
    if (result) {
      return { kind: "ok", authorizedUser: result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);

    return {
      kind: "bad-data",
    };
  }
};


File: /Users/codeshack-vii/Documents/_projects/Volato/apis/pet-api.js

import { api } from "./VolatoMobileAPIApi";

export const getPets = async () => {
  try {
    const result = await api.pets.get();
    if (result) {
      return { kind: "ok", pets: result };
    }
    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const deletePet = async (petId) => {
  try {
    const result = await api.pet.delete(petId);
    if (result) {
      return { kind: "ok", result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const createPet = async (pet) => {
  try {
    const result = await api.pets.post(pet);

    if (result) {
      return { kind: "ok", pet: result };
    }
    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const updatePet = async (id, values) => {
  try {
    const result = await api.pet.patch(id, values);
    if (result) {
      return { kind: "ok", pet: result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);

    return {
      kind: "bad-data",
    };
  }
};


File: /Users/codeshack-vii/Documents/_projects/Volato/apis/flightleg-api.js

import { api } from "./VolatoMobileAPIApi";

export const getFlightLegPassengers = async (id) => {
  try {
    const result = await api.tripLeg.pax(id);
    if (result) {
      return { kind: "ok", result };
    }
    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};


File: /Users/codeshack-vii/Documents/_projects/Volato/apis/dailydeals-api.js

import { api } from "./VolatoMobileAPIApi";

export const getDailyDeals = async () => {
  try {
    const result = await api.dailyDeals.get();
    if (result) {
      return { kind: "ok", deals: result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const inquireDeals = async (id) => {
  try {
    const result = await api.dailyDeals.inquire(id);
    if (result) {
      return { kind: "ok", deals: result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};


File: /Users/codeshack-vii/Documents/_projects/Volato/apis/user-api.js

import { api } from "./VolatoMobileAPIApi";

export const updateUser = async (data) => {
  try {
    const result = await api.user.patch(data);
    if (result) {
      return { kind: "ok", result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(e.response);
    return {
      kind: "bad-data",
    };
  }
};

export const uploadPhoto = async (data) => {
  try {
    const result = await api.user.photo.post(data);
    if (result) {
      return { kind: "ok", result };
    }

    return { kind: "bad-data" };
  } catch (e) {
    __DEV__ && console.log(JSON.stringify(e.response, null, 2));
    return {
      kind: "bad-data",
    };
  }
};


File: /Users/codeshack-vii/Documents/_projects/Volato/contexts/LookupDataContext.js

import React, { createContext, useContext, useMemo } from "react";

import { useQuery } from "@tanstack/react-query";

import { api } from "../apis/VolatoMobileAPIApi";

const LookupDataContext = createContext();

function useAirports() {
  const { data, isLoading, error, refetch } = useQuery({
    queryKey: ["airports"],
    queryFn: () => api.airport.get(),
    staleTime: 1000 * 60 * 60 * 24, // 1 day
    onError: (err) => {
      console.error("Error fetching airports:", err);
    },
  });

  const airports = useMemo(() => data || [], [data]);

  return {
    airports,
    isLoading,
    error: error ? "Failed to fetch airport information. Please try again later." : null,
    refetch,
  };
}

function useAircrafts() {
  const { data, isLoading, error, refetch } = useQuery({
    queryKey: ["aircrafts"],
    queryFn: () => api.aircrafts.get(),
    staleTime: 1000 * 60 * 60 * 24, // 1 day
    onError: (err) => {
      console.error("Error fetching aircrafts:", err);
    },
  });

  const aircrafts = useMemo(() => data || [], [data]);

  return {
    aircrafts,
    isLoading,
    error: error ? "Failed to fetch aircraft information. Please try again later." : null,
    refetch,
  };
}

function useAircraftTypes() {
  const { data, isLoading, error, refetch } = useQuery({
    queryKey: ["aircraftTypes"],
    queryFn: () => api.aircraftTypes.get(),
    staleTime: 1000 * 60 * 60 * 24, // 1 day
    onError: (err) => {
      console.error("Error fetching aircraft types:", err);
    },
  });

  const aircraftTypes = useMemo(() => data || [], [data]);

  return {
    aircraftTypes,
    isLoading,
    error: error ? "Failed to fetch aircraft type information. Please try again later." : null,
    refetch,
  };
}

export function LookupDataProvider({ children }) {
  const {
    airports,
    isLoading: airportsLoading,
    error: airportsError,
    refetch: refetchAirports,
  } = useAirports();
  const {
    aircrafts,
    isLoading: aircraftLoading,
    error: aircraftError,
    refetch: refetchAircrafts,
  } = useAircrafts();
  const {
    aircraftTypes,
    isLoading: aircraftTypesLoading,
    error: aircraftTypesError,
    refetch: refetchAircraftTypes,
  } = useAircraftTypes();

  const contextValue = useMemo(
    () => ({
      airports,
      airportsLoading,
      airportsError,
      refetchAirports,
      aircrafts,
      aircraftLoading,
      aircraftError,
      refetchAircrafts,
      aircraftTypes,
      aircraftTypesLoading,
      aircraftTypesError,
      refetchAircraftTypes,
    }),
    [
      airports,
      airportsLoading,
      airportsError,
      refetchAirports,
      aircrafts,
      aircraftLoading,
      aircraftError,
      refetchAircrafts,
      aircraftTypes,
      aircraftTypesLoading,
      aircraftTypesError,
      refetchAircraftTypes,
    ]
  );

  return <LookupDataContext.Provider value={contextValue}>{children}</LookupDataContext.Provider>;
}

export const useLookupData = () => useContext(LookupDataContext);


File: /Users/codeshack-vii/Documents/_projects/Volato/contexts/AccountContext.js

import React, { createContext, useCallback, useContext, useMemo } from "react";

import { useQuery } from "@tanstack/react-query";

import { api } from "../apis/VolatoMobileAPIApi";

const AccountContext = createContext();

function useInsiderAccounts() {
  const { data, isLoading, error, refetch } = useQuery({
    queryKey: ["insider-accounts"],
    queryFn: () => api.insider.get(),
    staleTime: 1000 * 60 * 60 * 24, // 1 day
    onError: (err) => {
      console.error("Error fetching insider accounts:", err);
    },
  });

  const depositAccounts = useMemo(() => data?.data.depositAccounts || [], [data]);

  const errorMessage = useMemo(() => {
    if (error) {
      if (error.response && error.response.status === 404) {
        return "No deposit accounts found.";
      }
      return "Failed to fetch account information. Please try again later.";
    }
    return null;
  }, [error]);

  return {
    depositAccounts,
    isLoading,
    error: errorMessage,
    refetch,
  };
}

export function AccountProvider({ children }) {
  const {
    depositAccounts,
    isLoading,
    error,
    refetch: refetchInsiderAccounts,
  } = useInsiderAccounts();

  const getInsiderAccounts = useCallback(() => {
    refetchInsiderAccounts().catch((err) => {
      console.error("Error refetching insider accounts:", err);
    });
  }, [refetchInsiderAccounts]);

  const contextValue = useMemo(
    () => ({
      depositAccounts,
      getInsiderAccounts,
      isLoading,
      error,
    }),
    [depositAccounts, getInsiderAccounts, isLoading, error]
  );

  return <AccountContext.Provider value={contextValue}>{children}</AccountContext.Provider>;
}

export const useAccount = () => useContext(AccountContext);


File: /Users/codeshack-vii/Documents/_projects/Volato/contexts/ContactContext.js

import React, { createContext, useCallback, useContext, useMemo } from "react";

import { useQueries } from "@tanstack/react-query";
import { types } from "mobx-state-tree";

import { api } from "../apis/VolatoMobileAPIApi";
import { Contact } from "../models/Contact";

const ContactContext = createContext();

function useContacts() {
  const results = useQueries({
    queries: [
      {
        queryKey: ["contacts"],
        queryFn: () => api.contacts.get({ pageSize: 100, page: 1 }),
        staleTime: 1000 * 60 * 60, // 1 hour
        onError: (err) => {
          console.error("Error fetching contacts:", err);
        },
      },
      {
        queryKey: ["pets"],
        queryFn: api.pets.get,
        staleTime: 1000 * 60 * 60, // 1 hour
        onError: (err) => {
          console.error("Error fetching pets:", err);
        },
      },
    ],
  });

  const [contactsResult, petsResult] = results;

  const contacts = useMemo(() => {
    const contactsData = contactsResult.data?.data || [];
    return contactsData.map((contact) => Contact.create(contact));
  }, [contactsResult.data?.data]);

  const pets = useMemo(() => {
    const petsData = petsResult.data || [];
    return petsData.map((pet) => Contact.create(pet));
  }, [petsResult.data]);

  const isLoading = useMemo(
    () => contactsResult.isLoading || petsResult.isLoading,
    [contactsResult.isLoading, petsResult.isLoading]
  );

  const contactsErrorMessage = useMemo(() => {
    if (contactsResult.error) {
      if (contactsResult.error.response && contactsResult.error.response.status === 404) {
        return "No contacts found.";
      }
      return "Failed to fetch contact information. Please try again later.";
    }
    return null;
  }, [contactsResult.error]);

  const petsErrorMessage = useMemo(() => {
    if (petsResult.error) {
      if (petsResult.error.response && petsResult.error.response.status === 404) {
        return "No pets found.";
      }
      return "Failed to fetch pet information. Please try again later.";
    }
    return null;
  }, [petsResult.error]);

  return {
    contacts,
    pets,
    isLoading,
    contactsError: contactsErrorMessage,
    petsError: petsErrorMessage,
    refetchContacts: contactsResult.refetch,
    refetchPets: petsResult.refetch,
  };
}

export function ContactProvider({ children }) {
  const {
    contacts,
    pets,
    allContacts,
    isLoading,
    contactsError,
    petsError,
    refetchContacts,
    refetchPets,
  } = useContacts();

  const refreshContacts = useCallback(() => {
    refetchContacts().catch((err) => {
      console.error("Error refetching contacts:", err);
    });
  }, [refetchContacts]);

  const refreshPets = useCallback(() => {
    refetchPets().catch((err) => {
      console.error("Error refetching pets:", err);
    });
  }, [refetchPets]);

  const refreshAll = useCallback(() => {
    Promise.all([refetchContacts(), refetchPets()]).catch((err) => {
      console.error("Error refreshing all data:", err);
    });
  }, [refetchContacts, refetchPets]);

  const contextValue = useMemo(
    () => ({
      contacts,
      pets,
      allContacts,
      isLoading,
      contactsError,
      petsError,
      refreshContacts,
      refreshPets,
      refreshAll,
    }),
    [
      contacts,
      pets,
      allContacts,
      isLoading,
      contactsError,
      petsError,
      refreshContacts,
      refreshPets,
      refreshAll,
    ]
  );

  return <ContactContext.Provider value={contextValue}>{children}</ContactContext.Provider>;
}

export const useContact = () => useContext(ContactContext);


File: /Users/codeshack-vii/Documents/_projects/Volato/config/cacheAssetsAsync.js

import { Image } from "react-native";

import {
  AntDesign,
  Entypo,
  EvilIcons,
  FontAwesome,
  Ionicons,
  MaterialCommunityIcons,
} from "@expo/vector-icons";
import { Asset } from "expo-asset";
import * as Font from "expo-font";

import IMAGES from "./Images";

function cacheImages(images) {
  return images.map((image) => {
    if (typeof image === "string") {
      return Image.prefetch(image);
    }
    return Asset.fromModule(image).downloadAsync();
  });
}

function cacheFonts(fonts) {
  return fonts.map((font) => Font.loadAsync(font));
}

export default function cacheAssetsAsync() {
  const imageAssets = cacheImages(Object.values(IMAGES));
  const iconAssets = cacheFonts([
    AntDesign.font,
    Entypo.font,
    EvilIcons.font,
    FontAwesome.font,
    Ionicons.font,
    MaterialCommunityIcons.font,
  ]);

  return Promise.all([...imageAssets, ...iconAssets]);
}


File: /Users/codeshack-vii/Documents/_projects/Volato/config/Images.js

/* eslint-disable global-require */

export default {
  JulianWanWNoLnJo7tS8Unsplash: require("../assets/images/JulianWanWNoLnJo7tS8Unsplash.jpg"),
  Wordmark: require("../assets/images/Wordmark.png"),
  _1: require("../assets/images/1.jpeg"),
  Image: require("../assets/images/Image.png"),
  F636b418f7fd7a198b0a549900b6fd11: require("../assets/images/F636b418f7fd7a198b0a549900b6fd11.jpeg"),
  DragonflyWhite: require("../assets/images/DragonflyWhite.png"),
  DragonflyActive: require("../assets/images/Volato_DragonFly_active.png"),
  DragonflyInActive: require("../assets/images/Volato_DragonFly_in_active.png"),
  VolatoWatermarkWhite: require("../assets/images/Volato_Wordmark_White.png"),
  Family: require("../assets/images/Family.png"),
  N420KA: require("../assets/images/honda-n420ka.png"),
  N107CX: require("../assets/images/N107CX.png"),
  GulfstreamG280: require("../assets/images/gulfstream.jpeg"),
  Arrows: require("../assets/icons/Arrows.png"),
  ProfileHeader: require("../assets/images/profile-honda.jpeg"),
  ChatHeader: require("../assets/images/N107CX.png"),
  ReserveHeader: require("../assets/images/honda-elite-2.png"),
  HondaJetLogo: require("../assets/images/hondajet-logo.png"),
  HondaJetElite: require("../assets/images/hondajet-elite.jpeg"),
  Airplane: require("../assets/icons/airplane.png"),
  AirplaneWhite: require("../assets/icons/airplane-white.png"),
  Back: require("../assets/icons/back.png"),
  DragonflyGreen: require("../assets/icons/dragonfly-green.png"),
  DragonflyBodyText: require("../assets/icons/dragonfly-body-text.png"),
  VolatoGoEastCoast: require("../assets/images/eastCoast.jpeg"),
  VolatoGoEastCoastMax: require("../assets/images/eastCoastMax.jpeg"),
  VolatoGoWestCoast: require("../assets/images/westCoast.jpeg"),
  VolatoGoWestCoastMax: require("../assets/images/westCoastMax.jpeg"),
  VolatoGoTexas: require("../assets/images/texas.png"),
  VolatoGoTexasMax: require("../assets/images/texasMax.png"),
  BiDirection: require("../assets/icons/switch.png"),
  Calender: require("../assets/icons/calendar.png"),
  BackArrowWhite: require("../assets/icons/arrow-white.png"),
  LeftArrowBlur: require("../assets/icons/left-arrow-blur.png"),
  CHECKCIRCLE: require("../assets/icons/check_circle.png"),
};


File: /Users/codeshack-vii/Documents/_projects/Volato/utils/constants.js

export const tripsTypes = {
  ONE_WAY: "one-way",
  ROUND_TRIP: "round-trip",
  MULTI_CITY: "multi-city",
};


File: /Users/codeshack-vii/Documents/_projects/Volato/utils/formatDate.js

import { format, parseISO } from "date-fns";
import ar from "date-fns/locale/ar-SA";
import en from "date-fns/locale/en-US";
import ko from "date-fns/locale/ko";
import { formatInTimeZone } from "date-fns-tz";
import { I18n } from "i18n-js";

const getLocale = () => {
  const i18n = new I18n();
  const locale = i18n.locale.split("-")[0];
  return locale === "ar" ? ar : locale === "ko" ? ko : en;
};

export const formatDate = (date, dateFormat = null, tz = null, options = {}) => {
  try {
    const locale = getLocale();
    const dateOptions = {
      ...options,
      locale,
    };
    if (!tz) {
      const theTime = `${format(parseISO(date), dateFormat ?? "MMM dd, yyyy", dateOptions)}`;
      return theTime[0] === "0" ? theTime.slice(1) : theTime;
    }
    return formatInTimeZone(parseISO(date), tz, dateFormat ?? "MMM dd, yyyy", dateOptions);
  } catch (err) {
    console.error(err);
    return "";
  }
};

// format time in ISO format
export const formatTime = (date, dateFormat = null, tz = null, options = {}) => {
  try {
    const locale = getLocale();
    const dateOptions = {
      ...options,
      locale,
    };
    if (!tz) {
      return `${format(new Date(date), dateFormat ?? "HH:mm a", dateOptions)}`;
    }
    return formatInTimeZone(new Date(date), tz, dateFormat ?? "HH:mm a", dateOptions);
  } catch (err) {
    console.error(err);
    return "";
  }
};

// format date from epoch in ms
export const formatDateFromEpoch = (date, dateFormat = null, tz = null, options = {}) => {
  try {
    const locale = getLocale();
    const dateOptions = {
      ...options,
      locale,
    };
    if (!tz) {
      const theTime = `${format(new Date(date), dateFormat ?? "MMM dd, yyyy", dateOptions)}`;
      return theTime[0] === "0" ? theTime.slice(1) : theTime;
    }
    return formatInTimeZone(new Date(date), tz, dateFormat ?? "MMM dd, yyyy", dateOptions);
  } catch (err) {
    console.error(err);
    return "";
  }
};

/**
 * Formats a given date or time based on the provided options.
 * @param {Date} date - The date or time to be formatted.
 * @param {string} [tz=null] - The time zone to be used for formatting. Default is null.
 * @param {Object} [options={}] - Additional options for formatting.
 * @returns {string} The formatted date or time.
 */
export const formatTimeOrDate = (date, dateFormat = null, tz = null, options = {}) => {
  try {
    const locale = getLocale();
    const dateOptions = {
      ...options,
      locale,
    };
    const currentDate = new Date();
    const timeDifference = currentDate.getTime() - new Date(date).getTime();
    const oneDayInMilliseconds = 24 * 60 * 60 * 1000;
    const oneWeekInMilliseconds = 7 * oneDayInMilliseconds;

    if (timeDifference < oneDayInMilliseconds) {
      if (!tz) {
        const theTime = `${format(new Date(date), "h:mm a", dateOptions)}`;
        return theTime[0] === "0" ? theTime.slice(1) : theTime;
      }

      return formatInTimeZone(new Date(date), tz, "h:mm a", dateOptions);
    }

    if (timeDifference < oneWeekInMilliseconds) {
      if (!tz) {
        const theDayOfWeek = `${format(new Date(date), "EEEE", dateOptions)}`;
        return theDayOfWeek;
      }

      return formatInTimeZone(new Date(date), tz, "EEEE", dateOptions);
    }

    if (!tz) {
      const theDate = `${format(new Date(date), dateFormat ?? "MMM dd, yyyy", dateOptions)}`;
      return theDate[0] === "0" ? theDate.slice(1) : theDate;
    }
    return formatInTimeZone(new Date(date), tz, dateFormat ?? "MMM dd, yyyy", dateOptions);
  } catch (err) {
    console.error(err);
    return "";
  }
};


File: /Users/codeshack-vii/Documents/_projects/Volato/utils/dateAndTime.js

export function getDaysInMonth(month, year) {
  return new Date(year, month, 0).getDate();
}

export function monthsBetweenDates(date1, date2) {
  let months;
  months = (date2.getFullYear() - date1.getFullYear()) * 12;
  months -= date1.getMonth() + 1;
  months += date2.getMonth() + 1;
  return months <= 0 ? 0 : months;
}


File: /Users/codeshack-vii/Documents/_projects/Volato/utils/formatText.js

export const truncateText = (text, maxLength) => {
  if (text.length <= maxLength) {
    return text;
  }

  // Truncate the text and add ellipses
  let truncatedText = text.substr(0, maxLength - 3);
  truncatedText += "...";

  return truncatedText;
};

export const escapeHTML = (text) => text.replaceAll("&#8211;", "-").replaceAll("&#038;", "&");


File: /Users/codeshack-vii/Documents/_projects/Volato/utils/parseBoolean.js

export default value => {
  if (typeof value === 'string' && value.trim().toLowerCase() === 'false') {
    return false;
  } 
    return Boolean(value);
  
};


File: /Users/codeshack-vii/Documents/_projects/Volato/utils/useIsOnline.js

import { useNetInfo } from "@react-native-community/netinfo";

const useIsOnline = () => {
  const netInfo = useNetInfo();

  return netInfo.type !== "unknown" && netInfo.isConnected;
};

export default useIsOnline;


File: /Users/codeshack-vii/Documents/_projects/Volato/utils/handleRestApiResponse.js

export const isOkStatus = status => status >= 200 && status < 300;

export const handleResponse = async (res, handlers = {}) => {
  const { status, statusText } = res;
  const text = await res.text();
  let json;
  try {
    json = JSON.parse(text);
  } catch (e) {
    console.error(
      [
        'Failed to parse response text as JSON.',
        `Error: ${e.message}`,
        `Text: ${JSON.stringify(text)}`,
      ].join('\n\n')
    );
  }

  const ret = {
    status,
    statusText,
    text,
    json,
  };

  if (handlers.onData) {
    handlers.onData(json);
  }
  if (status === 401 && handlers.on401) {
    handlers.on401(ret);
  }
  if (status === 403 && handlers.on403) {
    handlers.on403(ret);
  }
  if (status === 404 && handlers.on404) {
    handlers.on404(ret);
  }
  if (status < 200 && handlers.on1xx) {
    handlers.on1xx(ret);
  } else if (isOkStatus(status) && handlers.on2xx) {
    handlers.on2xx(ret);
  } else if (status >= 300 && status < 400 && handlers.on3xx) {
    handlers.on3xx(ret);
  } else if (status >= 400 && status < 500 && handlers.on4xx) {
    handlers.on4xx(ret);
  } else if (status >= 500 && handlers.on5xx) {
    handlers.on5xx(ret);
  }

  return ret;
};


File: /Users/codeshack-vii/Documents/_projects/Volato/utils/index.js

export { default as parseBoolean } from "./parseBoolean";
export { default as CustomCodeErrorBoundary } from "./CustomCodeErrorBoundary";
export { default as usePrevious } from "./usePrevious";
export { default as useIsOnline } from "./useIsOnline";
export * from "./dateAndTime";
export * from "./modalViews";
export * from "./formatDate";
export * from "./formatText";


File: /Users/codeshack-vii/Documents/_projects/Volato/utils/deepCopy.js

// eslint-disable-next-line consistent-return
export function deepCopy(obj) {
  if (typeof obj !== "object" || obj === null) {
    return obj;
  }

  if (obj instanceof Date) {
    return new Date(obj.getTime());
  }

  if (obj instanceof Array) {
    return obj.reduce((arr, item, index) => {
      arr[index] = deepCopy(item);
      return arr;
    }, []);
  }

  if (obj instanceof Object) {
    return Object.keys(obj).reduce((newObj, key) => {
      newObj[key] = deepCopy(obj[key]);
      return newObj;
    }, {});
  }
}


File: /Users/codeshack-vii/Documents/_projects/Volato/utils/screens.js

export const screens = {
  QuoteDetailsScreen: "QuoteDetailsScreen",
  TripDetailsScreen: "TripDetailsScreen",
  ZoneDetailsScreen: "ZoneDetailsScreen",
  RedeemBenefitsScreen: "RedeemBenefitsScreen",
  PartnershipDetailScreen: "PartnershipDetailScreen",
  ChatScreen: "ChatScreen",
};


File: /Users/codeshack-vii/Documents/_projects/Volato/utils/Breakpoints.js

export default {
  Mobile: 0,
  Tablet: 480,
  Laptop: 992,
  Desktop: 1440,
  BigScreen: 1920,
};


File: /Users/codeshack-vii/Documents/_projects/Volato/utils/usePrevious.js

import { useEffect, useRef } from "react";

export default function usePrevious(value) {
  const ref = useRef();

  useEffect(() => {
    ref.current = value;
  }, [value]);

  return ref.current;
}


File: /Users/codeshack-vii/Documents/_projects/Volato/utils/queries.js

export const queries = {
  aircraft: {
    index: (id) => ["aircraft", id],
    stats: (id) => ["aircraft", id, "stats"],
  },
  auth: {
    me: ["me"],
  },

  advertisingPartners: ["advertisingPartners"],

  airports: ["airports"],
  passengers: ["passengers"],
  pets: ["pets"],
  petTypes: ["petTypes"],
  authorizedUsers: ["authorizedUsers"],
  getTripPricing: ["getTripPricing"],
  cateringCategories: ["cateringCategories"],
  contacts: ["contacts"],
  getDates: ["getDates"],

  getDatesPrices: (startDate, endDate, departAirportId, arrivalAirportId, index) => [
    "getDatesPrices",
    startDate,
    endDate,
    departAirportId,
    arrivalAirportId,
    index,
  ],

  rssFeeds: ["rssFeeds"],
  dailyDeals: ["dailyDeals"],
  chat: {
    list: ["chat", "list"],
    create: ["chat", "create"],
    messages: (chatId) => ["chat", "messages", chatId],
    send: (chatId) => ["chat", "send", chatId],
  },
  quote: {
    getDetails: (quoteId) => ["quote", quoteId],
  },
};


File: /Users/codeshack-vii/Documents/_projects/Volato/utils/photo.js

export const getPhotoUrl = (uuid) => `${process.env.EXPO_PUBLIC_IMAGE_API_URL}/${uuid}`;

export const extractPhotoExtension = (url) => {
  if (!url) return null;

  const extension = url.split(".").pop();
  return extension;
};


File: /Users/codeshack-vii/Documents/_projects/Volato/utils/modalViews.js

export const modalViews = {
  IMAGE_GALLERY: "IMAGE_GALLERY",
  NETWORK_ERROR: "NETWORK_ERROR",
  LOGOUT: "LOGOUT",
  SELECT_DATE: "SELECT_DATE",
  SELECT_TIME: "SELECT_TIME",
  SIGN_CONTRACT: "SIGN_CONTRACT",
  CANCEL_FLIGHT: "CANCEL_FLIGHT",
  CATERING: "CATERING",
  TRANSPORT: "TRANSPORT",
  PASSENGERS: "PASSENGERS",
  PASSENGERS_VIEWS: "PASSENGERS_VIEWS",
  SELECT_LIST: "SELECT_LIST",
  REPEAT_TRIP: "REPEAT_TRIP",
  INFORMATION: "INFORMATION",
  RESERVE_ERROR: "RESERVE_ERROR",
  BROWSE_WEB: "BROWSE_WEB",
  REDEEM_GO_BENEFITS: "REDEEM_GO_BENEFITS",
};


File: /Users/codeshack-vii/Documents/_projects/Volato/utils/CustomCodeErrorBoundary.js

import React from 'react';
import { Text, View } from 'react-native';

export default class CustomCodeErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: undefined };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  render() {
    if (this.state.hasError) {
      return (
        <View style={{ padding: 8, backgroundColor: 'red' }}>
          <Text style={{ color: 'white' }}>
            There was a problem with your custom code. Check your custom code
            and make sure there are no errors.
          </Text>
          {this.state.error ? (
            <Text style={{ color: 'white' }}>
              {`
Error:
${this.state.error.toString()}`}
            </Text>
          ) : null}
        </View>
      );
    }

    return this.props.children;
  }
}


File: /Users/codeshack-vii/Documents/_projects/Volato/models/Trip.js

import { types } from "mobx-state-tree";

export const Trip = types
  .model("Trip")
  .props({
    uuid: types.maybeNull(types.string),
    label: types.string,
    createdUtc: types.maybeNull(types.number),
    modifiedUtc: types.maybeNull(types.number),
    closedateUtc: types.maybeNull(types.number),
    quoteNumber: types.maybeNull(types.string),
    scheduledTripNumber: types.maybeNull(types.string),
    regulation_id: types.maybeNull(types.number),
    tripstatus_id: types.maybeNull(types.number),
    company_id: types.maybeNull(types.number),
    contact_id: types.maybeNull(types.number),
    tripstate_id: types.maybeNull(types.number),
    isItineraryCanceled: types.boolean,
    isPaid: types.boolean,
    salesperson_id: types.maybeNull(types.number),
    origin: types.maybeNull(types.string),
    estimatedPassengerCount: types.maybeNull(types.number),
    pricing_quote_id: types.maybeNull(types.number),
    confirmationEmailSent: types.maybeNull(types.string),
  })
  .actions((self) => ({}));

const TripStore = types.model("TripStore").props({
  trips: types.array(Trip),
});

let _tripStore = TripStore.create();

export const useTripStore = () => {
  if (!_tripStore) {
    _tripStore = TripStore.create();
  }

  return _tripStore;
};


File: /Users/codeshack-vii/Documents/_projects/Volato/models/is-primitive.js

export function isPrimitive(value) {
  if (typeof value === "object") {
    return value === null;
  }
  return typeof value !== "function";
}


File: /Users/codeshack-vii/Documents/_projects/Volato/models/Catering.js

import _ from "lodash";
import { types } from "mobx-state-tree";

export const CateringOption = types.model("CateringOption").props({
  id: types.number,
  label: types.string,
  iconLabel: types.maybe(types.string),
  icon: types.maybe(types.string),
});

export const CateringCategory = types.model("CateringCategory").props({
  id: types.number,
  label: types.string,
  seq: types.number,
  icon: types.maybe(types.string),
  options: types.array(CateringOption),
});


File: /Users/codeshack-vii/Documents/_projects/Volato/models/Airport.js

import { types } from "mobx-state-tree";

export const Airport = types.model("Airport").props({
  id: types.number,
  label: types.string,
  displayLabel: types.string,
  code: types.string,
  city: types.maybeNull(types.string),
  province: types.maybeNull(types.string),
  country: types.maybeNull(types.string),
  icao: types.maybeNull(types.string),
  iata: types.maybeNull(types.string),
  faa: types.maybeNull(types.string),
  lat: types.maybeNull(types.number),
  lng: types.maybeNull(types.number),
  timezone: types.maybeNull(types.string),
  isBase: types.maybeNull(types.boolean),
  advPurchaseDays: types.maybeNull(types.number),
  flightDayOfWeek: types.maybeNull(types.string),
  sunrise: types.maybeNull(types.string),
  sunset: types.maybeNull(types.string),
  tower_hours: types.maybeNull(types.string),
  notes: types.maybeNull(types.string),
  tzoffset: types.maybeNull(types.string),
  isNoRepo: types.maybeNull(types.number),
});


File: /Users/codeshack-vii/Documents/_projects/Volato/models/Maintenance.js

import { types } from "mobx-state-tree";

export const Maintenance = types
  .model("Maintenance")
  .props({
    label: types.string,
    notes: types.maybeNull(types.string),
    timeIn: types.string,
    timeOut: types.string,
  })
  .actions((self) => ({}));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/Flight.js

import { types } from "mobx-state-tree";

import { Airport } from "./Airport";

export const UserFlight = types
  .model("UserFlight")
  .props({
    // id: types.number,
    departLocal: types.string,
    departAirport: types.maybeNull(Airport),
    scheduledTripNumber: types.string,
    hobbsHours: types.maybeNull(types.number),
    tail: types.string,
    tripSystemId: types.string,
    passengerCount: types.number,
    flightlegstatus_id: types.number,
    isFlightCanceled: types.number,
    departIcao: types.string,
    departCity: types.string,
    departProvince: types.maybeNull(types.string),
    arriveIcao: types.string,
    arriveCity: types.string,
    arriveAirport: types.maybeNull(Airport),
    arriveProvince: types.maybeNull(types.string),
    aircrafttype_label: types.string,
  })
  .actions((self) => ({}));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/with-status.js

import { observable } from "mobx";

// export type StatusType = "idle" | "pending" | "done" | "error";

export const withStatus = () => {
  /**
   * The observable backing store for the status field.
   */
  const status = observable.box("idle");

  return {
    views: {
      get status() {
        return status.get();
      },

      set status(value) {
        status.set(value);
      },
    },
    actions: {
      setStatus(value) {
        status.set(value);
      },

      resetStatus() {
        status.set("idle");
      },
    },
  };
};


File: /Users/codeshack-vii/Documents/_projects/Volato/models/DepositAccount.js

import { types } from "mobx-state-tree";

const Transaction = types.model("Transaction", {
  id: types.identifierNumber,
  label: types.string,
  amount: types.number,
  trip_id: types.maybeNull(types.number),
  transactionDate: types.string,
  customer_deposit_id: types.maybeNull(types.number),
  isDebit: types.maybeNull(types.number),
  note: types.maybeNull(types.string),
  tripinvoice_id: types.maybeNull(types.number),
  tripLabel: types.maybeNull(types.string),
  systemId: types.maybeNull(types.string),
  credit_debit_types_id: types.maybeNull(types.number),
});

export const DepositAccount = types
  .model("DepositAccount")
  .props({
    id: types.identifierNumber,
    label: types.string,
    contact_id: types.number,
    customer_deposit_programtype_id: types.number,
    signedContractDate: types.string,
    paidDate: types.string,
    exitDate: types.string,
    salesperson_id: types.number,
    salesperson: types.string,
    transactions: types.array(Transaction),
    futureTransactions: types.array(Transaction),
    combinedTransactions: types.array(Transaction),
    balance: types.number,
    availableBalance: types.number,
    withdrawableBalance: types.number,
  })
  .actions((self) => ({}));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/Activity.js

import { types } from "mobx-state-tree";

const ActivityItem = types.model("ActivityItem").props({});

const ActivityStore = types.model("ActivityStore").props({
  items: types.array(ActivityItem),
});

let _activityStore = ActivityStore.create();

export const useActivityStore = () => {
  if (!_activityStore) {
    _activityStore = ActivityStore.create();
  }

  return _activityStore;
};


File: /Users/codeshack-vii/Documents/_projects/Volato/models/AuthorizedUser.js

import { types } from "mobx-state-tree";

import { Contact } from "./Contact";

export const AuthorizedUser = Contact;


File: /Users/codeshack-vii/Documents/_projects/Volato/models/Itinerary.js

import { types } from "mobx-state-tree";

import { ItineraryLeg } from "./ItineraryLeg";

export const Itinerary = types
  .model("Itinerary")
  .props({
    legs: types.array(ItineraryLeg),
  })
  .actions((self) => ({
    clear() {
      self.legs = [
        {
          departDateTimeLocal: null,
          arriveDateTimeLocal: null,
          hasCatering: false,
          hasTranspo: false,
          passengers: [],
          fromAirport: null,
          toAirport: null,
          aircraft: null,
          departFbo: null,
          arriveFbo: null,
        },
      ];
    },
    addLeg() {
      if (self.legs.length === 0) {
        self.legs = [
          {
            departDateTimeLocal: null,
            arriveDateTimeLocal: null,
            hasCatering: false,
            hasTranspo: false,
            passengers: [],
            fromAirport: null,
            toAirport: null,
            aircraft: null,
            departFbo: null,
            arriveFbo: null,
          },
        ];
      } else {
        const previousLeg = self.legs[self.legs.length - 1];
        self.legs.push({
          departDateTimeLocal: null,
          arriveDateTimeLocal: null,
          hasCatering: previousLeg.hasCatering,
          hasTranspo: previousLeg.hasTranspo,
          passengers: previousLeg.passengers,
          fromAirport: previousLeg.toAirport,
          toAirport: null,
          aircraft: previousLeg.aircraft,
          departFbo: previousLeg.arriveFbo,
          arriveFbo: null,
        });
      }
    },
  }));

export const ItineraryStore = types.model("ItineraryStore").props({
  itinerary: types.maybe(Itinerary),
});

let _itineraryStore = ItineraryStore.create({
  itinerary: {
    legs: [],
  },
});

export const useItineraryStore = () => {
  if (!_itineraryStore) {
    _itineraryStore = ItineraryStore.create();
  }

  return _itineraryStore;
};


File: /Users/codeshack-vii/Documents/_projects/Volato/models/Rss.js

import { types } from "mobx-state-tree";

export const Rss = types.model({
  id: types.maybeNull(types.string),
  title: types.maybeNull(types.string),
  content: types.maybeNull(types.string),
  content_encoded: types.maybeNull(types.string),
  link: types.maybeNull(types.string),
});


File: /Users/codeshack-vii/Documents/_projects/Volato/models/User.js

import { Company } from "./Company";

const { types } = require("mobx-state-tree");

export const User = types
  .model("User")
  .props({
    id: types.number,
    label: types.maybeNull(types.string),
    salutation: types.maybeNull(types.string),
    firstName: types.maybeNull(types.string),
    middleName: types.maybeNull(types.string),
    lastName: types.maybeNull(types.string),
    preferredName: types.maybeNull(types.string),
    suffix: types.maybeNull(types.string),
    company: types.maybeNull(Company),
    company_id: types.maybeNull(types.number),
    dob: types.maybeNull(types.string),
    weight: types.maybeNull(types.number),
    weightUoM: types.maybeNull(types.string),
    phone: types.maybeNull(types.string),
    phoneSecondary: types.maybeNull(types.string),
    email: types.maybeNull(types.string),
    gender: types.maybeNull(types.string),
    uuid: types.maybeNull(types.string),
    driverLicenseNumber: types.maybeNull(types.string),
    driverLicenseExpiration: types.maybeNull(types.string),
    driverLicenseProvince: types.maybeNull(types.string),
    notesContact: types.maybeNull(types.string),
    notesCatering: types.maybeNull(types.string),
    notesGroundTransporataion: types.maybeNull(types.string),
    notesInterests: types.maybeNull(types.string),
    notesAllergies: types.maybeNull(types.string),
    notesMedical: types.maybeNull(types.string),
    notesOther: types.maybeNull(types.string),
    sendFlightReviewNotification: types.boolean,
    address1: types.maybeNull(types.string),
    address2: types.maybeNull(types.string),
    city: types.maybeNull(types.string),
    country: types.maybeNull(types.string),
    stateprovince: types.maybeNull(types.string),
    zipcode: types.maybeNull(types.string),
    photo_uuid: types.maybeNull(types.string),
    linkedin: types.maybeNull(types.string),
  })
  .views((self) => ({
    hasMinInfo: () => Boolean(self.email && self.phone),
    isGuest: () => false,
  }));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/FlightLeg.js

import { types } from "mobx-state-tree";

export const FlightLeg = types
  .model("FlightLeg")
  .props({
    departLocal: types.string,
    missioncategorylabel: types.string,
    missioncategoryfriendlylabel: types.maybeNull(types.string),
    departIcao: types.string,
    departCity: types.string,
    arriveIcao: types.string,
    arriveCity: types.string,
    passengerCount: types.number,
    totalMinutes: types.number,
    hobbsHours: types.maybeNull(types.number),
    blockHours: types.maybeNull(types.number),
  })
  .actions((self) => ({}));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/Fbo.js

import { types } from "mobx-state-tree";

import { Airport } from "./Airport";

export const Fbo = types
  .model("Fbo")
  .props({
    id: types.number,
    uuid: types.maybeNull(types.string),
    label: types.string,
    address: types.maybeNull(types.string),
    city: types.maybeNull(types.string),
    province: types.maybeNull(types.string),
    phone: types.maybeNull(types.string),
    email: types.maybeNull(types.string),
    notes: types.maybeNull(types.string),
    url: types.maybeNull(types.string),
    lat: types.maybeNull(types.number),
    long: types.maybeNull(types.number),
    airport: Airport,
  })

File: /Users/codeshack-vii/Documents/_projects/Volato/models/Auth.js

import AsyncStorage from "@react-native-async-storage/async-storage";
import { onSnapshot, types } from "mobx-state-tree";

export const AuthStore = types
  .model("AuthStore")
  .props({
    accessToken: types.maybeNull(types.string),
  })
  .actions((self) => ({
    /**
     *
     * @param {string} accessToken
     */
    setAccessToken(accessToken) {
      self.accessToken = accessToken;
      AsyncStorage.setItem("accessToken", accessToken);
    },

    clearAccessToken() {
      self.accessToken = null;
    },
  }));

let _authStore = AuthStore.create();

onSnapshot(_authStore, (snapshot) => {
  if (snapshot.accessToken) AsyncStorage.setItem("accessToken", snapshot.accessToken);
  else AsyncStorage.removeItem("accessToken");
});

export const useAuthStore = () => {
  if (!_authStore) {
    _authStore = AuthStore.create();
  }

  return _authStore;
};


File: /Users/codeshack-vii/Documents/_projects/Volato/models/Ownership.js

import { types } from "mobx-state-tree";

import { FlightLeg } from "./FlightLeg";
import { Maintenance } from "./Maintenance";

export const Ownership = types
  .model("Ownership")
  .props({
    id: types.identifierNumber,
    tail: types.string,
    aircraft_id: types.number,
    pct: types.number,
    aircraftowner_id: types.number,
    aircraftowner_label: types.string,
    isPrimaryContact: types.number,
    isBookingAuthorized: types.number,
    isInformationReleaseAuthorized: types.number,
    sendWeeklyUpdateEmail: types.number,
    sendBilling: types.maybeNull(types.number),
    aircraftPhotoUrl: types.string,
    weeklyLegs: types.array(FlightLeg),
    maintenance: types.array(Maintenance),
  })
  .views((self) => ({
    getActivity() {
      // concatenate weeklyLegs and maintenance arrays
      const combinedArray = [...self.weeklyLegs, ...self.maintenance];

      // create a new array with label, date, and category properties
      const newArray = combinedArray.map((item) => {
        const label = "label" in item ? item.label : `${item.departIcao} -> ${item.arriveIcao}`;
        const date = "departLocal" in item ? item.departLocal : item.timeIn;
        const category = "label" in item ? "Maintenance" : item.missioncategorylabel;

        return { label, date, category };
      });

      // sort the new array in descending order based on the date property
      return newArray.sort((a, b) => new Date(b.date) - new Date(a.date));
    },
  }))
  .actions((self) => ({}));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/Debit.js

import { types } from "mobx-state-tree";

export const Debit = types
  .model("Debit")
  .props({
    id: types.identifierNumber,
    amount: types.number,
    depositProgramLabel: types.string,
    note: types.maybeNull(types.string),
    transactionDate: types.string,
  })
  .actions((self) => ({}));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/getInstanceId.js

import _ from "lodash";
import { getIdentifier, isStateTreeNode } from "mobx-state-tree";

/**
 *
 * @param instance A list of MST instances or a single MST Instance or any other value
 * @returns If the input param is a single MST instance the return value
 * is the instance identifier. If the input param is a list of MST instances,
 * the return value is a list of identifiers. If the input param is something else
 * entirely, the function will return it unchanged.
 */
export function getInstanceId(instance) {
  const instanceList = _.castArray(instance);
  const mapped = instanceList.map((inst) => {
    if (isStateTreeNode(inst)) return getIdentifier(inst);
    return inst;
  });

  return Array.isArray(instance) ? mapped : mapped[0];
}


File: /Users/codeshack-vii/Documents/_projects/Volato/models/Deals.js

import { types } from "mobx-state-tree";

import { Aircraft } from "./Aircraft";
import { Photo } from "./Photo";

export const Deals = types
  .model("Deals")
  .props({
    id: types.number,
    aircraft: types.maybeNull(Aircraft),
    aircraft_id: types.number,
    aircrafttype_label: types.string,
    arriveIcao: types.string,
    arriveCity: types.string,
    arriveLocal: types.maybeNull(types.string),
    arriveProvince: types.maybeNull(types.string),
    arriveTimezone: types.maybeNull(types.string),
    arriveUtc: types.maybeNull(types.number),
    departIcao: types.string,
    departCity: types.string,
    departProvince: types.maybeNull(types.string),
    departLocal: types.string,
    departTimezone: types.maybeNull(types.string),
    departUtc: types.maybeNull(types.number),
    flightDurationMinutes: types.number,
    flightlegstatus_id: types.number,
    from_airport_id: types.number,
    image: types.maybeNull(Photo),
    missioncategory_id: types.maybeNull(types.number),
    missioncategorylabel: types.maybeNull(types.string),
    numDays: types.number,
    passengerCount: types.number,
    price: types.number,
    scheduledTripNumber: types.maybeNull(types.string),
    sphericalDistanceNm: types.maybeNull(types.number),
    systemId: types.maybeNull(types.string),
    tail: types.string,
    to_airport_id: types.number,
    tripSystemId: types.maybeNull(types.string),
    trip_id: types.number,
    tripStatusLabel: types.maybeNull(types.string),
  })
  .actions((self) => ({}));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/OcCase.js

import { types } from "mobx-state-tree";

import { Trip } from "./Trip";

export const Message = types.model("Message", {
  id: types.identifierNumber,
  createdAt: types.number,
  updatedAt: types.number,
  deletedAt: types.maybeNull(types.number),
  label: types.string,
  oc_commchannel: types.maybeNull(types.number),
  oc_commchannel_label: types.maybeNull(types.string),
  uuid: types.string,
  message: types.string,
  isUser: types.boolean,
  messageFrom: types.maybeNull(types.string),
  messageFromAvatar: types.maybeNull(types.string),
});

export const OcCase = types
  .model("OcCase", {
    id: types.identifierNumber,
    createdAt: types.number,
    updatedAt: types.number,
    deletedAt: types.maybeNull(types.number),
    label: types.string,
    isComplete: types.boolean,
    departDate: types.maybeNull(types.string),
    oc_casetype_id: types.maybeNull(types.number),
    pricing_quote_id: types.maybeNull(types.number),
    trip_id: types.maybeNull(Trip),
    oc_casestatus_id: types.maybeNull(types.number),
    aircrafttype_id: types.maybeNull(types.number),
    dailydeal_id: types.maybeNull(types.number),
    messages: types.array(Message),
    lastMessage: types.maybeNull(Message),
  })
  .actions((self) => ({
    // Define your actions here
    markComplete() {
      self.isComplete = true;
    },
    updateLabel(newLabel) {
      self.label = newLabel;
    },
  }));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/Company.js

import { types } from "mobx-state-tree";

export const Company = types.model("Company").props({
  id: types.number,
  label: types.string,
  phone: types.maybeNull(types.string),
  email: types.maybeNull(types.string),
  notes: types.maybeNull(types.string),
  isBroker: types.boolean,
  isStretch: types.boolean,
});


File: /Users/codeshack-vii/Documents/_projects/Volato/models/FboSearch.js

import { types } from "mobx-state-tree";

import { Airport } from "./Airport";

export const FboSearch = types.model("FboSearch").props({
  id: types.number,
  simpleLabel: types.string,
  city: types.maybeNull(types.string),
  province: types.maybeNull(types.string),
  timezone: types.maybeNull(types.string),
  country: types.maybeNull(types.string),
  icao: types.maybeNull(types.string),
  lastSearchDate: types.maybe(types.Date, new Date()),
});


File: /Users/codeshack-vii/Documents/_projects/Volato/models/root.js

import { createContext, useContext } from "react";

import { types } from "mobx-state-tree";

import { AuthStore } from "./Auth";
import { ItineraryStore } from "./Itinerary";
import { AdvertisingPartnerStore } from "./stores/AdvertisingPartnerStore";
import { AuthorizedUserStore } from "./stores/AuthorizedUserStore";
import { CateringStore } from "./stores/CateringStore";
import { DealsStore } from "./stores/DealsStore";
import { FboSearchStore } from "./stores/FboSearchStore";
import { OcCaseStore } from "./stores/OcCaseStore";
import { PassengerStore } from "./stores/PassengerStore";
import { PetStore } from "./stores/PetStore";
import { RssStore } from "./stores/RssStore";
import { UserStore } from "./stores/UserStore";

const RootStoreModel = types.model("RootModel").props({
  passengerStore: types.optional(PassengerStore, {}),
  petStore: types.optional(PetStore, {}),
  authorizedUserStore: types.optional(AuthorizedUserStore, {}),
  authStore: types.optional(AuthStore, {}),
  userStore: types.optional(UserStore, {}),
  itineraryStore: types.optional(ItineraryStore, {}),
  cateringStore: types.optional(CateringStore, {}),
  rssStore: types.optional(RssStore, {}),
  fboSearchStore: types.optional(FboSearchStore, {}),
  dealsStore: types.optional(DealsStore, {}),
  partnerStore: types.optional(AdvertisingPartnerStore, {}),
  ocCaseStore: types.optional(OcCaseStore, {}),
});

const _rootStore = RootStoreModel.create({});

const RootStoreContext = createContext(_rootStore);

export function RootStoreProvider({ children }) {
  return <RootStoreContext.Provider value={_rootStore}>{children}</RootStoreContext.Provider>;
}

export const useStores = () => {
  const store = useContext(RootStoreContext);
  if (!store) {
    throw new Error("Store cannot be null, please add a context provider");
  }
  return store;
};


File: /Users/codeshack-vii/Documents/_projects/Volato/models/Contact.js

import { types } from "mobx-state-tree";

const PetType = types.model("PetType").props({
  id: types.number,
  createdAt: types.number,
  updatedAt: types.number,
  deletedAt: types.maybeNull(types.number),
  createdBy: types.maybeNull(types.number),
  modifiedBy: types.maybeNull(types.number),
  deletedBy: types.maybeNull(types.number),
  label: types.string,
});

const RelationshipType = types.model("RelationshipType").props({
  id: types.number,
  createdAt: types.number,
  updatedAt: types.number,
  deletedAt: types.maybeNull(types.number),
  createdBy: types.maybeNull(types.number),
  modifiedBy: types.maybeNull(types.number),
  deletedBy: types.maybeNull(types.number),
  label: types.string,
});

const ContactRelation = types.model("ContactRelation").props({
  id: types.number,
  createdAt: types.number,
  updatedAt: types.number,
  deletedAt: types.maybeNull(types.number),
  createdBy: types.maybeNull(types.number),
  modifiedBy: types.maybeNull(types.number),
  deletedBy: types.maybeNull(types.number),
  canBook: types.maybeNull(types.boolean),
  canReleaseInfo: types.maybeNull(types.boolean),
  contact_id1: types.number,
  contact_id2: types.number,
  customerrelationship_type_id: types.maybeNull(types.number),
});

export const Contact = types
  .model("Contact")
  .props({
    id: types.number,
    createdAt: types.number,
    updatedAt: types.number,
    deletedAt: types.maybeNull(types.number),
    createdBy: types.maybeNull(types.number),
    modifiedBy: types.maybeNull(types.number),
    deletedBy: types.maybeNull(types.number),
    systemId: types.string,
    label: types.string,
    salutation: types.maybeNull(types.string),
    firstName: types.string,
    middleName: types.maybeNull(types.string),
    lastName: types.string,
    preferredName: types.maybeNull(types.string),
    suffix: types.maybeNull(types.string),
    dob: types.maybeNull(types.string),
    weight: types.maybeNull(types.number),
    weightUoM: types.maybeNull(types.string),
    phone: types.maybeNull(types.string),
    phoneSecondary: types.maybeNull(types.string),
    email: types.maybeNull(types.string),
    gender: types.maybeNull(types.string),
    salesperson_id: types.maybeNull(types.number),
    verifiedTimeUtc: types.maybeNull(types.string),
    uuid: types.maybeNull(types.string),
    notesContact: types.maybeNull(types.string),
    notesCatering: types.maybeNull(types.string),
    notesGroundTransporataion: types.maybeNull(types.string),
    notesInterests: types.maybeNull(types.string),
    notesAllergies: types.maybeNull(types.string),
    notesMedical: types.maybeNull(types.string),
    notesOther: types.maybeNull(types.string),
    sendFlightReviewNotification: types.boolean,
    contact_id: types.maybeNull(types.number),
    address1: types.maybeNull(types.string),
    address2: types.maybeNull(types.string),
    city: types.maybeNull(types.string),
    country: types.maybeNull(types.string),
    stateprovince: types.maybeNull(types.string),
    zipcode: types.maybeNull(types.string),
    photo_uuid: types.maybeNull(types.string),
    linkedin: types.maybeNull(types.string),
    isMobileUser: types.maybeNull(types.boolean),
    lastLogin: types.maybeNull(types.string),
    isAnimal: types.maybeNull(types.boolean),
    breed: types.maybeNull(types.string),
    company_id: types.maybeNull(types.number),
    petType: types.maybeNull(PetType),
    relationshipType: types.maybeNull(RelationshipType),
    relatedTo: types.array(ContactRelation),
  })
  .views((self) => ({
    isGuest: () =>
      (self.relationshipType === null || self.relationshipType.id === 6) && self.petType === null,
  }))
  .actions((self) => ({}));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/ItineraryLeg.js

import { types } from "mobx-state-tree";

import { Aircraft } from "./Aircraft";
import { Airport } from "./Airport";
import { Contact } from "./Contact";
import { Fbo } from "./Fbo";

export const ItineraryLeg = types
  .model("ItineraryLeg")
  .props({
    departDateTimeLocal: types.maybeNull(types.string),
    arriveDateTimeLocal: types.maybeNull(types.string),
    hasCatering: types.maybeNull(types.boolean),
    hasTranspo: types.maybeNull(types.boolean),
    passengers: types.array(Contact),
    fromAirport: types.maybeNull(Airport),
    toAirport: types.maybeNull(Airport),
    aircraft: types.maybeNull(Aircraft),
    departFbo: types.maybeNull(Fbo),
    arriveFbo: types.maybeNull(Fbo),
  })
  .actions((self) => ({
    /**
     *
     * @param {Contact} passenger
     */
    addPassenger(passenger) {
      if (self.passengers.find((v) => v.id === passenger.id)) {
        return;
      }
      self.passengers.push(passenger);
    },
    /**
     *
     * @param {ItineraryLeg} values
     */
    set(values) {
      delete values.passengers;
      self = values;
    },
  }));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/UpcomingFlight.js

import { types } from "mobx-state-tree";

import { Photo } from "./Photo";

export const UpcomingFlight = types
  .model("UpcomingFlight")
  .props({
    id: types.number,
    aircrafttype_label: types.string,
    uuid: types.string,
    tripuuid: types.string,
    passengerCountTbd: types.number,
    estimatedPassengerCount: types.number,
    isReleasedToVaunt: types.number,
    vauntstatus_id: types.maybeNull(types.string),
    vauntWaitList: types.maybeNull(types.string),
    totalMinutes: types.number,
    systemId: types.string,
    passengerCount: types.number,
    trip_id: types.number,
    from_airport_id: types.number,
    to_airport_id: types.number,
    depart_fbo_id: types.maybeNull(types.number),
    arrive_fbo_id: types.maybeNull(types.number),
    hasCatering: types.number,
    hasTranspo: types.number,
    cateringNotes: types.maybeNull(types.string),
    createdAt: types.number,
    updatedAt: types.number,
    deletedAt: types.maybeNull(types.number),
    tripCreatedUtc: types.number,
    tripModifiedUtc: types.number,
    quoteNumber: types.string,
    tripSystemId: types.string,
    scheduledTripNumber: types.string,
    tripstatusLabel: types.string,
    isFlightCanceled: types.number,
    tripstate_id: types.number,
    contact_id: types.maybeNull(types.number),
    company_id: types.maybeNull(types.number),
    tripstatus_id: types.number,
    contact1: types.maybeNull(types.string),
    company1: types.maybeNull(types.string),
    company2: types.maybeNull(types.string),
    departUtc: types.number,
    departLocal: types.string,
    departIcao: types.string,
    departLabel: types.string,
    departCity: types.string,
    departProvince: types.maybeNull(types.string),
    departCountry: types.string,
    departTimezone: types.string,
    departLat: types.number,
    departLng: types.number,
    arriveUtc: types.number,
    arriveLocal: types.string,
    arriveIcao: types.string,
    arriveLabel: types.string,
    arriveLat: types.number,
    arriveLng: types.number,
    arriveTimezone: types.string,
    arriveCity: types.string,
    arriveProvince: types.maybeNull(types.string),
    arriveCountry: types.string,
    maxPax: types.number,
    tail: types.string,
    photo: types.maybeNull(Photo),
  })
  .actions((self) => ({}));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/Aircraft.js

import { types } from "mobx-state-tree";

export const Aircraft = types
  .model("Aircraft")
  .props({
    id: types.number,
    label: types.string,
    msn: types.maybeNull(types.number),
    avgBurn: types.maybeNull(types.number),
    icao24: types.maybeNull(types.string),
    serialNumber: types.maybeNull(types.string),
    hasGalley: types.maybeNull(types.boolean),
    hasWifi: types.maybeNull(types.boolean),
    hasBeltedLav: types.maybeNull(types.boolean),
    hasSoundSystem: types.maybeNull(types.boolean),
    maxPax: types.number,
  })

File: /Users/codeshack-vii/Documents/_projects/Volato/models/Photo.js

import { types } from "mobx-state-tree";

export const Photo = types.model({
  filename: types.maybeNull(types.string),
  color: types.maybeNull(types.string),
  mask: types.maybeNull(types.string),
});


File: /Users/codeshack-vii/Documents/_projects/Volato/models/AdvertisingPartner.js

import { types } from "mobx-state-tree";

export const AdvertisingPartnerCategory = types.model("AdvertisingPartnerCategory").props({
  id: types.identifierNumber,
  label: types.string,
});

export const AdvertisingPartner = types.model("AdvertisingPartner").props({
  id: types.identifierNumber,
  label: types.string,
  logoUuid: types.maybeNull(types.string),
  teaserImageUuid: types.maybeNull(types.string),
  callout: types.maybeNull(types.string),
  shortDescription: types.maybeNull(types.string),
  longDescription: types.maybeNull(types.string),
  url: types.maybeNull(types.string),
  redemptionUrl: types.maybeNull(types.string),
  advertisingpartnercategory_id: AdvertisingPartnerCategory,
});


File: /Users/codeshack-vii/Documents/_projects/Volato/models/AircraftPhoto.js

import _ from "lodash";
import { flow, types } from "mobx-state-tree";

import { isPrimitive } from "./is-primitive";
import { withStatus } from "./with-status";
import { getAircraftPhotos } from "../apis/aircraft-api";

export const AircraftPhoto = types
  .model("AircraftPhoto")
  .props({
    id: types.number,
    filename: types.string,
    attribution: types.maybeNull(types.string),
    dateTaken: types.maybeNull(types.string),
    aircraft_id: types.maybeNull(types.number),
  })
  .actions((self) => ({}));

export const AircraftPhotoStore = types
  .model("AircraftPhotoStore")
  .props({
    photos: types.array(AircraftPhoto),
  })
  .extend(withStatus)
  .views((self) => ({
    getRandom: () => {
      const randomIndex = Math.floor(Math.random() * self.photos.length);
      return self.photos[randomIndex];
    },
  }))
  .actions((self) => ({
    getAircraftPhotos: flow(function* () {
      self.setStatus("pending");
      const result = yield getAircraftPhotos();
      if (result.kind === "ok") {
        self.setStatus("done");
        self.photos = self.process(result.result);

        return self.photos;
      }
      self.setStatus("error");
      throw new Error(result.kind);
    }),
    process(data) {
      const dataList = _.castArray(data);
      const mapped = dataList.map((photo) => {
        if (isPrimitive(photo)) return photo;

        const existing = self.photos.find((p) => p.id === photo.id);

        if (!existing) {
          self.photos.push(photo);
        }
        return existing
          ? // eslint-disable-next-line consistent-return, no-shadow
            _.mergeWith(existing, photo, (_, next) => {
              if (Array.isArray(next)) return next; // Treat arrays like atoms
            })
          : photo;
      });

      return Array.isArray(data) ? mapped : mapped[0];
    },
  }));

let _aircraftPhotoStore = AircraftPhotoStore.create();

export const useAircraftPhotoStore = () => {
  if (!_aircraftPhotoStore) {
    _aircraftPhotoStore = AircraftPhotoStore.create();
  }

  return _aircraftPhotoStore;
};


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/BragScreen.js

import React from "react";
import { StyleSheet, TouchableOpacity, View } from "react-native";

import { Icon, ScreenContainer } from "@draftbit/ui";
import WebView from "react-native-webview";

import { colors } from "../themes";

function BragScreen(props) {
  const { navigation } = props;

  return (
    <ScreenContainer style={styles.container} hasSafeArea={false} scrollable={false}>
      <View style={styles.header}>
        <TouchableOpacity
          onPress={() => {
            navigation.goBack();
          }}
        >
          <View>
            <Icon name="Entypo/chevron-thin-left" size={24} />
          </View>
        </TouchableOpacity>
      </View>
      <WebView
        style={styles.webView}
        cacheEnabled={false}
        javaScriptEnabled
        mediaPlaybackRequiresUserAction={false}
        showsHorizontalScrollIndicator={false}
        showsVerticalScrollIndicator={false}
        allowsInlineMediaPlayback
        allowsFullscreenVideo
        source={{
          uri: "https://flights.flyvolato.com/brag?id=11",
        }}
      />
    </ScreenContainer>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: colors.palette.cloud,
  },
  header: {
    alignItems: "center",
    flexDirection: "row",
    height: 48,
    left: 16,
    position: "absolute",
    right: 0,
    top: 32,
    zIndex: 9999,
  },
  webView: {
    flex: 1,
    height: "100%",
    width: "100%",
  },
});

export default BragScreen;


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/ProfileScreen.js

import React, { useCallback, useEffect, useMemo } from "react";
import {
  ActivityIndicator,
  ImageBackground,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  View,
} from "react-native";

import { Icon, IconButton, ScreenContainer } from "@draftbit/ui";
import { useNavigation } from "@react-navigation/native";
import { setStatusBarStyle, StatusBar } from "expo-status-bar";
import { observer } from "mobx-react-lite";
import FastImage from "react-native-fast-image";
import Animated, { FadeInLeft, FadeOutRight } from "react-native-reanimated";

import { api } from "../apis/VolatoMobileAPIApi";
import { Text } from "../components";
import DepositAccountList from "../components/Screens/Profile/DepositAccountList";
import Images from "../config/Images";
import { useAccount } from "../contexts/AccountContext";
import { useAircraftPhotoStore } from "../models/AircraftPhoto";
import { useStores } from "../models/root";
import { colors, spacing } from "../themes";

function ProfileScreen() {
  const nav = useNavigation();
  const {
    userStore: { flights, ownership, user, getUserPhoto },
  } = useStores();

  const { getRandom } = useAircraftPhotoStore();
  const { depositAccounts, getInsiderAccounts, isLoading, error } = useAccount();

  useEffect(() => {
    getInsiderAccounts();
  }, [getInsiderAccounts]);

  const handleNavigateToDetails = () => {
    nav.navigate("SettingsMenu", {
      params: "ProfileDetailsScreen",
    });
  };

  const handlePlayPresentation = (tail) => () => {
    nav.navigate("AircraftBragScreen", {
      tail,
    });
  };

  const handleViewDepositAccountActivity = useCallback(
    (item) => {
      nav.navigate("DepositAccountActivityScreen", {
        depositAccount: item,
      });
    },
    [nav]
  );

  const handleViewOwnershipActivity = (item) => () => {
    nav.navigate("OwnershipActivityScreen", {
      ownership: item,
    });
  };

  const handleViewAccountActivity = () => {
    nav.navigate("ActivityScreen");
  };

  const handleNavigateToEditProfile = () => {
    nav.navigate("EditProfileScreen");
  };

  useEffect(() => {
    const unsubscribe = nav.addListener("focus", () => {
      setStatusBarStyle("light");
    });

    return unsubscribe;
  }, [nav]);

  return (
    <Animated.View entering={FadeInLeft} exiting={FadeOutRight} style={styles.animatedContainer}>
      <ScreenContainer style={styles.container} scrollable={false}>
        <View style={styles.navHeader}>
          <ImageBackground
            source={Images.ProfileHeader}
            style={styles.navHeaderImage}
            resizeMode="cover"
          />
        </View>
        <View style={styles.avatarView}>
          <FastImage
            style={styles.avatar}
            resizeMode="cover"
            source={{
              uri: getUserPhoto(),
            }}
          />
        </View>

        <ScrollView
          contentContainerStyle={styles.profileContent}
          bounces
          showsHorizontalScrollIndicator
          showsVerticalScrollIndicator
        >
          <View style={styles.profileView}>
            <Text style={styles.name}>
              {user.firstName} {user.lastName}
            </Text>
            <Text style={styles.label}>Flights</Text>
            <Text style={styles.numFlights}>{flights.length}</Text>
          </View>
          <View style={styles.quickMenu}>
            <TouchableOpacity style={styles.quickMenuItem} onPress={handleViewAccountActivity}>
              <Icon
                color={colors.palette.midnight}
                name="MaterialCommunityIcons/chart-timeline-variant"
                size={24}
              />
              <Text style={styles.quickMenuItemText}>Activity</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.quickMenuItem} onPress={handleNavigateToEditProfile}>
              <Icon
                color={colors.palette.midnight}
                name="MaterialCommunityIcons/pencil"
                size={24}
              />
              <Text style={styles.quickMenuItemText}>Edit</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.quickMenuItem} onPress={handleNavigateToDetails}>
              <Icon color={colors.palette.midnight} name="MaterialCommunityIcons/cog" size={24} />
              <Text style={styles.quickMenuItemText}>Settings</Text>
            </TouchableOpacity>
          </View>
          {ownership.map((item, index) => (
            <View style={styles.poster} key={`ownership-${index}`}>
              <FastImage
                style={styles.imageBackground}
                resizeMode="cover"
                source={{
                  uri: `${process.env.EXPO_PUBLIC_IMAGE_API_URL}/${item.aircraftPhotoUrl}`,
                }}
              />
              <View style={styles.posterContent}>
                <View style={styles.aircraftInfo}>
                  <Text style={styles.aircraftInfoText} preset="bold">
                    {item.aircraftowner_label}
                  </Text>
                  <Text style={styles.ownershipText} preset="bold">
                    {item.pct}% Owner in {item.tail}
                  </Text>
                </View>
                <View style={styles.actionButtonView}>
                  <IconButton
                    style={{
                      marginRight: spacing.medium,
                    }}
                    color={colors.palette.white}
                    icon="MaterialCommunityIcons/play-box"
                    size={36}
                    onPress={handlePlayPresentation(item.tail)}
                  />
                  <IconButton
                    color={colors.palette.white}
                    icon="MaterialCommunityIcons/file-document"
                    size={36}
                    onPress={handleViewOwnershipActivity(item)}
                  />
                </View>
              </View>
            </View>
          ))}
          {isLoading ? (
            <View style={styles.centerContent}>
              <ActivityIndicator size="large" color={colors.palette.midnight} />
            </View>
          ) : error ? (
            <View style={styles.centerContent}>
              <Text>{error}</Text>
            </View>
          ) : (
            <DepositAccountList
              depositAccounts={depositAccounts}
              onItemPress={handleViewDepositAccountActivity}
            />
          )}
        </ScrollView>
      </ScreenContainer>
    </Animated.View>
  );
}

const styles = StyleSheet.create({
  animatedContainer: {
    flex: 1,
  },
  container: {


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/LandingPageScreen.js

import React, { useEffect } from "react";
import { Image, Linking, StyleSheet, View } from "react-native";

import { ScreenContainer } from "@draftbit/ui";
import { useQuery } from "@tanstack/react-query";
import { LinearGradient } from "expo-linear-gradient";
import { StatusBar } from "expo-status-bar";
import FastImage from "react-native-fast-image";
import { ScrollView } from "react-native-gesture-handler";
import { useSafeAreaInsets } from "react-native-safe-area-context";

import { Button, Text } from "../components";
import Images from "../config/Images";
import { useStores } from "../models/root";
import { colors } from "../themes/colors";
import { spacing } from "../themes/spacing";
import { escapeHTML } from "../utils/formatText";
import { queries } from "../utils/queries";

function LandingPageScreen(props) {
  const { navigation } = props;
  const { rssStore } = useStores();
  const insets = useSafeAreaInsets();

  useQuery({
    queryKey: queries.rssFeeds,
    queryFn: rssStore.getRssFeeds,
  });

  useEffect(() => {
    const unsubscribe = navigation.addListener("beforeRemove", (e) => {
      e.preventDefault();
    });

    return unsubscribe;
  }, [navigation]);

  const { rssFeeds } = rssStore;

  const handleOpenFeed = (link) => () => {
    Linking.openURL(link);
  };

  return (
    <ScreenContainer
      hasSafeArea
      scrollable={false}
      style={{
        backgroundColor: colors.palette.cloud,
        paddingBottom: insets.bottom === 0 ? spacing.medium : 0,
      }}
    >
      <View style={styles.header}>
        <Image source={Images.Wordmark} />
      </View>
      <ScrollView style={styles.content}>
        <View style={styles.poster}>
          <FastImage style={styles.imageBackground} resizeMode="cover" source={Images.Family} />
          <View style={styles.posterContent}>
            <Text style={styles.posterTitle}>Our Family and Culture</Text>
            <View style={styles.actionButtonView}>
              <Button
                variant="contained"
                title="View"
                style={styles.actionButton}
                onPress={() => navigation.navigate("BragScreen")}
              />
            </View>
          </View>
        </View>
        <View style={styles.poster}>
          <FastImage style={styles.imageBackground} resizeMode="cover" source={Images.N420KA} />
          <View style={styles.posterContent}>
            <Text style={styles.posterTitle}>Our HondaJet HA-420s</Text>
            <View style={styles.actionButtonView}>
              <Button
                variant="contained"
                title="View"
                style={styles.actionButton}
                onPress={() => {
                  // open website
                  Linking.openURL("https://flyvolato.com/hondajet-charter/");
                }}
              />
            </View>
          </View>
        </View>
        <View style={styles.poster}>
          <FastImage
            style={styles.imageBackground}
            resizeMode="cover"
            source={Images.GulfstreamG280}
          />
          <View style={styles.posterContent}>
            <Text style={styles.posterTitle}>Our Gulfstream G280s</Text>
            <View style={styles.actionButtonView}>
              <Button
                variant="contained"
                title="View"
                style={styles.actionButton}
                onPress={() => {
                  // open website
                  Linking.openURL("https://flyvolato.com/gulfstreamg280/");
                }}
              />
            </View>
          </View>
        </View>
        {rssFeeds.map((feed, index) => {
          const content = feed.content.split("\n")?.[0] || "";
          const contentString = content.replace("<p>", "").replace("</p>", "");

          return (
            <View
              style={[styles.poster, { borderWidth: 1, borderColor: colors.palette.darkCloud }]}
              key={`feed-${feed.link}-${index}`}
            >
              <LinearGradient
                colors={["rgb(188, 199, 200)", "rgb(245,244,235)"]}
                locations={[0, 1]}
                start={[0, 0]}
                end={[0, 1]}
                style={styles.linearGradient}
              />
              <View style={[styles.posterContent, { backgroundColor: colors.transparent }]}>
                <Text style={styles.feedTitle} weight="bold" numberOfLines={2} ellipsizeMode="tail">
                  {escapeHTML(feed.title)}
                </Text>
                <Text style={styles.feedDescription} numberOfLines={3} ellipsizeMode="tail">
                  {contentString}
                </Text>
                <Button
                  variant="contained"
                  title="View"
                  style={[styles.actionButton, styles.feedLinkButton]}
                  onPress={handleOpenFeed(feed.link)}
                />
              </View>
            </View>
          );
        })}
      </ScrollView>
      <View style={styles.footer}>
        <Button
          variant="contained"
          theme="halloween"
          title="Register/Login"
          onPress={() => navigation.navigate("LoginNavigator")}
        />
      </View>
      {/* eslint-disable-next-line react/style-prop-object */}
      <StatusBar style="dark" />
    </ScreenContainer>
  );
}

const styles = StyleSheet.create({
  actionButtonView: {
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "flex-end",
    paddingBottom: 20,
    paddingHorizontal: spacing.medium,
    flex: 1,
  },
  actionButton: {
    backgroundColor: colors.palette.glass,
    width: 84,
  },
  buttonView: {
    alignItems: "center",
    marginTop: spacing.extraLarge,
  },
  container: {},
  content: {
    flex: 1,
    marginHorizontal: spacing.medium,
  },
  description: {
    color: colors.palette.sky,
    fontSize: 11,
    lineHeight: 14,
    marginTop: 30,
    textAlign: "center",
  },
  footer: {
    marginTop: spacing.medium,
    justifyContent: "flex-end",
    marginHorizontal: spacing.medium,
  },
  header: {
    height: 72,
    marginHorizontal: spacing.medium,
    alignItems: "center",
  },
  loginButton: {
    height: 36,
    width: 146,
    marginTop: 40,
  },


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/CreateAccountScreen.js

import React, { useState } from "react";
import { ActivityIndicator, StyleSheet, View } from "react-native";

import { ScreenContainer } from "@draftbit/ui";
import { yupResolver } from "@hookform/resolvers/yup";
import { useMutation } from "@tanstack/react-query";
import parsePhoneNumberFromString from "libphonenumber-js";
import { Controller, useForm } from "react-hook-form";
import { KeyboardAwareScrollView } from "react-native-keyboard-aware-scroll-view";
import * as yup from "yup";
import "yup-phone";

import { api } from "../apis/VolatoMobileAPIApi";
import { Text, TextInput } from "../components";
import { Button } from "../components/Button";
import { useStores } from "../models/root";
import { colors, spacing } from "../themes";

const schema = yup.object({
  firstName: yup.string().required("Your First Name is Required"),
  lastName: yup.string().required("Your Last Name is Required"),
  email: yup.string().email().required("Your Email is Required"),
  phone: yup.string().required("Phone number is Required"),
  company: yup.string(), // .required("Company name is Required"),
});

function CreateAccountScreen(props) {
  const { navigation } = props;
  const [showSpinner, setShowSpinner] = useState(false);
  const {
    userStore: { user, setUser },
  } = useStores();

  const defaultValues = {
    firstName: "",
    lastName: "",
    email: "",
    phone: user.phone ? user.phone : "",
    company: "",
  };

  const {
    control,
    handleSubmit,
    formState: { errors },
  } = useForm({
    defaultValues,
    resolver: yupResolver(schema),
  });

  const registerMutation = useMutation({
    mutationFn: (values) => {
      setShowSpinner(true);
      values = {
        ...values,
        label: `${values.firstName} ${values.lastName}`,
      };
      return api.user.patch(values);
    },
    onSuccess: (data) => {
      setUser(data);
      // navigate to main landing page
    },
    onError: (error) => {
      console.log(error.response);
    },
    onSettled: () => {
      setShowSpinner(false);
    },
  });

  const handleSave = (values) => {
    // mutation.mutate(values);
    registerMutation.mutate(values);
  };

  return (
    <ScreenContainer style={styles.container} hasSafeArea scrollable={false}>
      {!showSpinner ? null : (
        <View style={styles.spinner}>
          <ActivityIndicator
            style={styles.activityIndicator}
            animating
            color={colors.palette.midnight}
            hidesWhenStopped
            size="large"
          />
        </View>
      )}
      <View style={styles.navHeader}>
        <Text style={styles.navHeaderText}>Create Account</Text>
      </View>
      <KeyboardAwareScrollView keyboardShouldPersistTaps="never" showsVerticalScrollIndicator>
        <View style={styles.mainContent}>
          <Controller
            control={control}
            name="firstName"
            render={({ field: { onChange, onBlur, value } }) => (
              <TextInput
                onChangeText={onChange}
                onBlur={onBlur}
                value={value}
                label="First Name"
                error={errors.firstName}
                errorText={errors.firstName?.message}
              />
            )}
          />
          <Controller
            control={control}
            name="lastName"
            render={({ field: { onChange, onBlur, value } }) => (
              <TextInput
                onChangeText={onChange}
                onBlur={onBlur}
                value={value}
                label="Last Name"
                error={errors.lastName}
                errorText={errors.lastName?.message}
              />
            )}
          />
          <Controller
            control={control}
            name="company"
            render={({ field: { onChange, onBlur, value } }) => (
              <TextInput
                onChangeText={onChange}
                onBlur={onBlur}
                value={value}
                label="Company Name"
                autoCapitalize="none"
                error={errors.company}
                errorText={errors.company?.message}
              />
            )}
          />
          <View style={styles.inputWrapper}>
            <View style={styles.phoneCountryCode}>
              <Text style={styles.phoneCountryCodeText}>+1</Text>
            </View>
            <Controller
              control={control}
              name="phone"
              render={({ field: { onBlur, onChange, value } }) => (
                <TextInput
                  style={{
                    borderWidth: 0,
                    backgroundColor: colors.transparent,
                    marginTop: 10,
                  }}
                  value={
                    parsePhoneNumberFromString(value, "US")
                      ? parsePhoneNumberFromString(value, "US").formatNational()
                      : value
                  }
                  onBlur={onBlur}
                  onChangeText={onChange}
                  label="Phone Number"
                  placeholder="000 000 0000"
                  keyboardType="phone-pad"
                  textContentType="telephoneNumber"
                  error={errors.phone}
                  errorText={errors.phone?.message}
                  returnKeyType="done"
                  disabled
                />
              )}
            />
          </View>
          <Controller
            control={control}
            name="email"
            render={({ field: { onChange, onBlur, value } }) => (
              <TextInput
                onChangeText={onChange}
                onBlur={onBlur}
                value={value}
                label="Email Address"
                placeholder="example@mail.com"
                autoCapitalize="none"
                keyboardType="email-address"
                numberOfLines={1}
                placeholderTextColor={colors.palette.light}
                returnKeyType="next"
                selectTextOnFocus
                textContentType="emailAddress"
                error={errors.email}
              />
            )}
          />
        </View>
      </KeyboardAwareScrollView>
      <View style={styles.buttonsContainer}>
        <Button
          variant="contained"
          theme="halloween"
          style={styles.saveButton}
          title="Save"
          onPress={handleSubmit(handleSave)}


File: /Users/codeshack-vii/Documents/_projects/Volato/components/DriverLicenseInput.js

import { Image, StyleSheet, TouchableOpacity, View } from "react-native";

import Picture from "./Icons/Picture";
import { Text } from "./Text";
import { colors } from "../themes";

export function DriverLicenseInput({ style, onChange, value }) {
  const containerStyle = style ? [styles.container, style] : styles.container;

  return (
    <View style={containerStyle}>
      <Text style={styles.title}>Driver License / Passport</Text>
      <TouchableOpacity style={styles.wrapper} onPress={() => onChange()}>
        {value ? (
          <Image source={{ uri: value }} style={styles.image} resizeMode="cover" />
        ) : (
          <>
            <Picture />
            <Text style={styles.text}>Upload Driver License</Text>
          </>
        )}
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    borderWidth: 1,
    borderColor: colors.palette.fieldsShadow,
    paddingHorizontal: 12,
    paddingVertical: 8,
    backgroundColor: colors.palette.white,
    borderRadius: 6,
    minHeight: 200,
  },
  wrapper: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
  },
  title: {
    // fontSize: 11,
    color: colors.palette.bodyText,
    marginBottom: 20,
  },
  text: {
    fontSize: 15,
    lineHeight: 20,
    color: colors.palette.sky,
    textAlign: "center",
  },
  image: {
    flex: 1,
    width: "100%",
  },
});

export default DriverLicenseInput;


File: /Users/codeshack-vii/Documents/_projects/Volato/components/DateTimePicker.js

import { useState } from "react";
import { StyleSheet, TouchableOpacity } from "react-native";

import DateTimePickerModal from "react-native-modal-datetime-picker";

import { Text } from "./Text";
import { colors } from "../themes";
import { formatDate } from "../utils/formatDate";

export function DateTimePicker({ value, onChange, error, mode, style }) {
  const [dobDatePickerVisible, setDobDatePickerVisible] = useState(false);
  const pickerMode = mode || "date";
  const pickerStyles = style
    ? [styles.dateTimePickerItemButton, style]
    : [styles.dateTimePickerItemButton];

  return (
    <>
      <TouchableOpacity
        style={error ? [...pickerStyles, styles.error] : pickerStyles}
        onPress={() => setDobDatePickerVisible(true)}
      >
        <Text style={styles.dateTimePickerItemButtonLabel}>DOB</Text>
        <Text style={styles.dateTimePickerItemButtonText}>
          {value ? formatDate((value || new Date()).toISOString(), "yyyy-MM-dd") : "DD / MM / YY"}
        </Text>
      </TouchableOpacity>
      <DateTimePickerModal
        isVisible={dobDatePickerVisible}
        mode={pickerMode}
        maximumDate={new Date()}
        onConfirm={(date) => {
          onChange(date);
          setDobDatePickerVisible(false);
        }}
        onCancel={() => setDobDatePickerVisible(false)}
      />
    </>
  );
}

const styles = StyleSheet.create({
  dateTimePickerItemButton: {
    borderColor: colors.border,
    borderWidth: 1,
    alignItems: "flex-start",
    justifyContent: "center",
    borderRadius: 4,
    flex: 1,
    marginRight: 12,
    padding: 12,
    height: 57,
    backgroundColor: colors.palette.white,
  },
  dateTimePickerItemButtonLabel: {
    color: colors.palette.bodyText,
    fontSize: 11,
    lineHeight: 14,
  },
  dateTimePickerItemButtonText: {
    color: colors.palette.bodyText,
    fontSize: 15,
    lineHeight: 20,
  },
  error: {
    borderWidth: 1,
    borderColor: colors.palette.nomadic,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/.DS_Store

Error: Unable to extract code from /Users/codeshack-vii/Documents/_projects/Volato/components/.DS_Store

File: /Users/codeshack-vii/Documents/_projects/Volato/components/TextInput.js

import { StyleSheet, View } from "react-native";

import { HelperText, TextInput as RNPTextInput } from "react-native-paper";

import { colors } from "../themes";

export function TextInput(props) {
  const {
    style,
    contentStyle,
    underlineColor,
    activeUnderlineColor,
    error,
    errorText,
    wrapperStyle,
    ...otherProps
  } = props;
  const $wrapperStyle = wrapperStyle ? [styles.formControl, wrapperStyle] : styles.formControl;
  const inputStyle = style ? [styles.input, style] : styles.input;
  const inputContentStyle = contentStyle
    ? [styles.inputContent, contentStyle]
    : styles.inputContent;
  const inputUnderlineColor = underlineColor || colors.palette.fieldsShadow;
  const inputActiveUnderlineColor = activeUnderlineColor || colors.palette.bodyText;

  return (
    <View style={$wrapperStyle}>
      <RNPTextInput
        style={inputStyle}
        contentStyle={inputContentStyle}
        underlineColor={inputUnderlineColor}
        activeUnderlineColor={inputActiveUnderlineColor}
        placeholderTextColor={colors.palette.light}
        error={error}
        allowFontScaling={false}
        {...otherProps}
      />
      {errorText ? (
        <HelperText type="error" visible={error}>
          {errorText}
        </HelperText>
      ) : null}
    </View>
  );
}

const styles = StyleSheet.create({
  formControl: {
    marginBottom: 10,
  },
  input: {
    borderWidth: 1,
    borderColor: colors.palette.divider,
    borderRadius: 8,
    color: colors.palette.midnight,
    fontSize: 15,
    lineHeight: 20,
    backgroundColor: colors.transparent,
  },
  inputContent: {
    backgroundColor: colors.palette.white,
    borderWidth: 1,
    borderColor: colors.palette.fieldsShadow,
    borderTopLeftRadius: 6,
    borderTopRightRadius: 6,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/ListCard.js

import { ImageBackground, StyleSheet, Text, View } from "react-native";

import { LinearGradient } from "@draftbit/ui";
import { BlurView } from "expo-blur";

import { colors } from "../themes";

export function ListCard({
  blurFooter = true,
  footerContent,
  midContent,
  topContent,
  cardStyle = {},
  cardTopStyle = {},
  cardFooterStyle = {},
  blurStyle = {},
  bgImage,
  sourceType = "remote",
}) {
  return (
    <View style={{ ...styles.card, ...cardStyle }}>
      <ImageBackground
        style={styles.cardBackground}
        resizeMode="cover"
        // source={{ uri: itemPhotoUrl }}
        source={sourceType === "remote" ? { uri: bgImage } : bgImage}
      >
        <LinearGradient
          style={styles.cardOverlayGradient}
          color1={colors.palette.tripCardGradientEnd}
          color2={colors.palette.tripCardGradientStart}
          endX={0}
          endY={0}
          startX={0}
          startY={100}
        />
      </ImageBackground>
      <View style={styles.cardContent}>
        <View style={{ ...styles.cardTop, ...cardTopStyle }}>
          <View style={styles.cardTop}>{topContent}</View>
        </View>
        <View style={styles.cardMid}>{midContent}</View>
        {footerContent ? (
          <View style={{ ...styles.footer, ...cardFooterStyle }}>
            {blurFooter ? (
              <BlurView style={{ ...styles.footerBlur, ...blurStyle }} intensity={10} tint="dark">
                {footerContent}
              </BlurView>
            ) : (
              footerContent
            )}
          </View>
        ) : (
          <View />
        )}
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  footer: {
    backgroundColor: "rgba(255, 255, 255, 0.3)",
    bottom: 0,
  },
  footerBlur: {
    flexDirection: "row",
    justifyContent: "space-between",
    backgroundColor: "rgba(50,50,50,0.5)",
    paddingHorizontal: 20,
    paddingVertical: 10,
  },
  cardContent: {
    gap: 10,
    flex: 1,
    justifyContent: "space-between",
    position: "absolute",
    width: "100%",
    height: "100%",
  },
  card: {
    borderRadius: 15,
    height: 180,
    marginBottom: 20,
    overflow: "hidden",
  },
  cardBackground: {
    borderWidth: 1,
    borderColor: colors.palette.midnight,
    borderRadius: 15,
    height: "100%",
    marginVertical: 6,
    overflow: "hidden",
    marginBottom: 0,
  },
  cardTop: {
    paddingHorizontal: 20,
    paddingTop: 10,
  },
  cardMid: {
    paddingHorizontal: 20,
    alignItems: "center",
  },
  cardOverlayGradient: {
    height: "100%",
    width: "100%",
    opacity: 0.3,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/PhotoUpload.js

import { Image, Platform, StyleSheet, TouchableOpacity, View } from "react-native";

import Edit from "./Icons/Edit";
import Picture from "./Icons/Picture";
import { Text } from "./Text";
import { colors } from "../themes";

export function PhotoUpload({ style, value, onChange }) {
  const containerStyle = style ? [styles.container, style] : styles.container;
  return (
    <View style={containerStyle}>
      {Platform.OS === "ios" ? (
        <TouchableOpacity style={styles.wrapper} onPress={() => onChange()}>
          {value ? (
            <Image source={{ uri: value }} style={styles.image} resizeMode="cover" />
          ) : (
            <Picture />
          )}
          <Edit style={styles.editIcon} />
        </TouchableOpacity>
      ) : (
        <View style={styles.wrapper}>
          {value ? (
            <Image source={{ uri: value }} style={styles.image} resizeMode="cover" />
          ) : (
            <Picture />
          )}
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    width: 120,
    aspectRatio: 1,
  },
  wrapper: {
    flex: 1,
    borderWidth: 1,
    borderColor: colors.palette.fieldsShadow,
    backgroundColor: colors.palette.white,
    borderRadius: 120,
    alignItems: "center",
    justifyContent: "center",
    position: "relative",
  },
  text: {
    fontSize: 15,
    lineHeight: 20,
    color: colors.palette.sky,
    textAlign: "center",
  },
  editIcon: {
    position: "absolute",
    bottom: 0,
    right: 0,
  },
  image: {
    flex: 1,
    width: "100%",
    borderRadius: 120,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Icon.js

import * as React from "react";
import { Image, TouchableOpacity, View } from "react-native";

/**
 * A component to render a registered icon.
 * It is wrapped in a <TouchableOpacity /> if `onPress` is provided, otherwise a <View />.
 *
 * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Components-Icon.md)
 */
export function Icon(props) {
  const {
    icon,
    color,
    size,
    style: $imageStyleOverride,
    containerStyle: $containerStyleOverride,
    ...WrapperProps
  } = props;

  const isPressable = !!WrapperProps.onPress;
  const Wrapper = WrapperProps?.onPress ? TouchableOpacity : View;

  return (
    <Wrapper
      accessibilityRole={isPressable ? "imagebutton" : undefined}
      {...WrapperProps}
      style={$containerStyleOverride}
    >
      <Image
        style={[
          $imageStyle,
          color && { tintColor: color },
          size && { width: size, height: size },
          $imageStyleOverride,
        ]}
        source={iconRegistry[icon]}
      />
    </Wrapper>
  );
}

/* eslint-disable global-require */
export const iconRegistry = {
  check: require("../assets/icons/check.png"),
  hidden: require("../assets/icons/hidden.png"),
  view: require("../assets/icons/view.png"),
  arrowLeft: require("../assets/icons/arrow-left.png"),
};
/* eslint-enable global-require */

const $imageStyle = {
  resizeMode: "contain",
};


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Toggle.js

import React, { useMemo } from "react";
import { Image, TouchableOpacity, View } from "react-native";

import Animated, { useAnimatedStyle, withTiming } from "react-native-reanimated";

import { iconRegistry } from "./Icon";
import { Text } from "./Text";
import { colors, spacing } from "../themes";

/**
 * Renders a boolean input.
 * This is a controlled component that requires an onValueChange callback that updates the value prop in order for the component to reflect user actions. If the value prop is not updated, the component will continue to render the supplied value prop instead of the expected result of any user actions.
 *
 * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Components-Toggle.md)
 */
export function Toggle(props) {
  const {
    variant = "checkbox",
    editable = true,
    status,
    value,
    onPress,
    onValueChange,
    labelPosition = "right",
    helper,
    helperTx,
    helperTxOptions,
    HelperTextProps,
    containerStyle: $containerStyleOverride,
    inputWrapperStyle: $inputWrapperStyleOverride,
    ...WrapperProps
  } = props;

  const { switchAccessibilityMode } = props;
  const { checkboxIcon } = props;

  const disabled = editable === false || status === "disabled" || props.disabled;

  const Wrapper = useMemo(() => (disabled ? View : TouchableOpacity), [disabled]);
  const ToggleInput = useMemo(() => ToggleInputs[variant] || (() => null), [variant]);

  const $containerStyles = [$containerStyleOverride];
  const $inputWrapperStyles = [$inputWrapper, $inputWrapperStyleOverride];
  const $helperStyles = [
    $helper,
    status === "error" && { color: colors.error },
    HelperTextProps?.style,
  ];

  function handlePress(e) {
    if (disabled) return;
    onValueChange?.(!value);
    onPress?.(e);
  }

  return (
    <Wrapper
      activeOpacity={1}
      accessibilityRole={variant}
      accessibilityState={{ checked: value, disabled }}
      {...WrapperProps}
      style={$containerStyles}
      onPress={handlePress}
    >
      <View style={$inputWrapperStyles}>
        {labelPosition === "left" && <FieldLabel {...props} labelPosition={labelPosition} />}

        <ToggleInput
          on={value}
          disabled={disabled}
          status={status}
          outerStyle={props.inputOuterStyle}
          innerStyle={props.inputInnerStyle}
          detailStyle={props.inputDetailStyle}
          switchAccessibilityMode={switchAccessibilityMode}
          checkboxIcon={checkboxIcon}
        />

        {labelPosition === "right" && <FieldLabel {...props} labelPosition={labelPosition} />}
      </View>

      {!!(helper || helperTx) && (
        <Text
          preset="formHelper"
          text={helper}
          tx={helperTx}
          txOptions={helperTxOptions}
          {...HelperTextProps}
          style={$helperStyles}
        />
      )}
    </Wrapper>
  );
}

function Checkbox(props) {
  const {
    on,
    status,
    disabled,
    checkboxIcon,
    outerStyle: $outerStyleOverride,
    innerStyle: $innerStyleOverride,
    detailStyle: $detailStyleOverride,
  } = props;

  const offBackgroundColor = [
    disabled && colors.palette.neutral400,
    status === "error" && colors.errorBackground,
    colors.palette.neutral200,
  ].filter(Boolean)[0];

  const outerBorderColor = [
    disabled && colors.palette.neutral400,
    status === "error" && colors.error,
    !on && colors.palette.neutral800,
    colors.palette.secondary500,
  ].filter(Boolean)[0];

  const onBackgroundColor = [
    disabled && colors.transparent,
    status === "error" && colors.errorBackground,
    colors.palette.secondary500,
  ].filter(Boolean)[0];

  const iconTintColor = [
    disabled && colors.palette.neutral600,
    status === "error" && colors.error,
    colors.palette.green,
  ].filter(Boolean)[0];

  return (
    <View
      style={[
        $inputOuterVariants.checkbox,
        { backgroundColor: offBackgroundColor, borderColor: outerBorderColor },
        $outerStyleOverride,
      ]}
    >
      <Animated.View
        style={[
          $checkboxInner,
          { backgroundColor: onBackgroundColor },
          $innerStyleOverride,
          useAnimatedStyle(() => ({ opacity: withTiming(on ? 1 : 0) }), [on]),
        ]}
      >
        <Image
          source={iconRegistry[checkboxIcon] || iconRegistry.check}
          style={[$checkboxDetail, { tintColor: iconTintColor }, $detailStyleOverride]}
        />
      </Animated.View>
    </View>
  );
}

function Radio(props) {
  const {
    on,
    status,
    disabled,
    outerStyle: $outerStyleOverride,
    innerStyle: $innerStyleOverride,
    detailStyle: $detailStyleOverride,
  } = props;

  const offBackgroundColor = [
    disabled && colors.palette.neutral400,
    status === "error" && colors.errorBackground,
    colors.palette.neutral200,
  ].filter(Boolean)[0];

  const outerBorderColor = [
    disabled && colors.palette.neutral400,
    status === "error" && colors.error,
    !on && colors.palette.neutral800,
    colors.palette.secondary500,
  ].filter(Boolean)[0];

  const onBackgroundColor = [
    disabled && colors.transparent,
    status === "error" && colors.errorBackground,
    colors.palette.slate,
  ].filter(Boolean)[0];

  const dotBackgroundColor = [
    disabled && colors.palette.neutral600,
    status === "error" && colors.error,
    colors.palette.green,
  ].filter(Boolean)[0];

  return (
    <View
      style={[
        $inputOuterVariants.radio,
        { backgroundColor: offBackgroundColor, borderColor: outerBorderColor },
        $outerStyleOverride,
      ]}
    >
      <Animated.View


File: /Users/codeshack-vii/Documents/_projects/Volato/components/index.js

export * from "./Toggle";
export * from "./Text";
export * from "./UserAvatar";
export * from "./TextInput";
export * from "./Icon";
export * from "./Button";
export * from "./DateTimePicker";
export * from "./PhoneInput";
export * from "./PhotoUpload";
export * from "./SearchBar";
export * from "./SearchInput";
export * from "./BackButton";
export * from "./DriverLicenseInput";


File: /Users/codeshack-vii/Documents/_projects/Volato/components/BackButton.js

import * as React from "react";
import {
  Image,
  Platform,
  StyleSheet,
  TouchableOpacity,
  useWindowDimensions,
  View,
} from "react-native";

import { Text } from "./Text";
import Images from "../config/Images";
import { colors, spacing } from "../themes";

export function BackButton({ onPress }) {
  const layout = useWindowDimensions();

  return (
    <TouchableOpacity
      style={
        Platform.OS === "ios" && layout.height >= 700
          ? styles.backButton
          : Platform.OS === "android"
          ? styles.backButtonAndroid
          : styles.backButtonSmallDevice
      }
      onPress={() => {
        onPress();
      }}
    >
      <View
        style={{
          flexDirection: "row",
        }}
      >
        <Image resizeMode="cover" source={Images.Arrows} />
        <Text style={styles.label}>Back</Text>
      </View>
    </TouchableOpacity>
  );
}

const styles = StyleSheet.create({
  backButton: {
    left: 32,
    position: "absolute",
    top: 0,
  },
  backButtonAndroid: {
    left: 32,
    position: "absolute",
    top: 8,
  },
  backButtonSmallDevice: {
    left: 32,
    position: "absolute",
    top: 0,
  },
  label: {
    color: colors.palette.midnight,
    paddingLeft: spacing.medium,
    fontSize: 22,
    fontWeight: 400,
    lineHeight: 28,
    paddingTop: spacing.tiny,
  },
});

export default BackButton;


File: /Users/codeshack-vii/Documents/_projects/Volato/components/SearchBar.js

import React, { useEffect, useRef } from "react";
import { Keyboard, StyleSheet, TextInput, View } from "react-native";

import { Entypo, Feather } from "@expo/vector-icons";

import { colors } from "../themes";

export function SearchBar(props) {
  const inputRef = useRef(null);

  const setFocus = () => {
    Keyboard.dismiss();
    setTimeout(() => {
      inputRef.current.focus();
    }, 100);
  };

  useEffect(() => {
    setFocus();
  }, []);

  return (
    <View style={styles.container}>
      <View style={!props.clicked ? styles.searchBar__unclicked : styles.searchBar__clicked}>
        <Feather
          name="search"
          size={20}
          color={colors.palette.midnight}
          style={{ marginLeft: 1 }}
        />
        <TextInput
          ref={inputRef}
          style={styles.input}
          placeholderTextColor={colors.palette.sky}
          placeholder={props.placeholderText}
          value={props.searchText}
          onChangeText={props.setSearchText}
          onFocus={() => {
            console.log("focus");
            props.setClicked(true);
          }}
        />

        {props.clicked && props.searchText && (
          <Entypo
            name="cross"
            size={20}
            color={colors.palette.midnight}
            style={{
              position: "absolute",
              top: 10,
              right: 10,
            }}
            onPress={() => {
              props.setSearchText("");
            }}
          />
        )}
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    marginHorizontal: 15,
    justifyContent: "flex-start",
    alignItems: "center",
    flexDirection: "row",
    width: "90%",
  },
  searchBar__unclicked: {
    padding: 10,
    flexDirection: "row",
    width: "100%",
    backgroundColor: colors.palette.white,
    borderColor: colors.palette.fieldsShadow,
    borderWidth: 1,
    borderRadius: 6,
  },
  searchBar__clicked: {
    padding: 10,
    flexDirection: "row",
    width: "100%",
    backgroundColor: colors.palette.white,
    borderColor: colors.palette.fieldsShadow,
    borderWidth: 1,
    borderRadius: 6,
  },
  input: {
    fontSize: 14,
    fontWeight: "400",
    lineHeight: 18,
    marginLeft: 10,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/GradientBackground.js

import { ImageBackground, StyleSheet } from "react-native";

import { LinearGradient } from "@draftbit/ui";

import { colors } from "../themes";

export function GradientBackground({ image, sourceType = "uri", backgroundStyle = {} }) {
  return (
    <ImageBackground
      style={{ ...styles.background, ...backgroundStyle }}
      resizeMode="cover"
      source={
        sourceType === "uri"
          ? {
              uri: image,
            }
          : image
      }
    >
      <LinearGradient
        style={styles.tripCardOverlayGradient}
        color1={colors.palette.tripCardGradientEnd}
        color2={colors.palette.tripCardGradientStart}
        endX={0}
        endY={0}
        startX={0}
        startY={100}
      />
    </ImageBackground>
  );
}

const styles = StyleSheet.create({
  background: {
    borderWidth: 1,
    borderColor: colors.palette.midnight,
    borderRadius: 15,
    height: "100%",
    marginVertical: 6,
    overflow: "hidden",
    marginBottom: 0,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Button.js

import React from "react";
import { StyleSheet, TouchableOpacity } from "react-native";

import { Text } from "./Text";
import { colors } from "../themes";

const backgroundColors = {
  outlined: {
    ghosted: colors.transparent,
    disabled: colors.transparent,
  },
  contained: {
    disabled: colors.palette.midnightAlpha,
    green: colors.palette.green,
    halloween: colors.palette.midnight,
    midnight: colors.palette.midnight,
    glass: colors.palette.glass,
  },
  text: {
    regular: colors.transparent,
  },
};

const colorMap = {
  outlined: {
    ghosted: colors.palette.midnight,
    disabled: colors.palette.sky,
  },
  contained: {
    disabled: colors.palette.green,
    green: colors.palette.midnight,
    halloween: colors.palette.green,
    midnight: colors.palette.cloud,
    glass: colors.palette.midnight,
  },
  text: {
    regular: colors.midnight,
  },
};

const borderWidthMap = {
  outlined: {
    ghosted: 1,
    disabled: 1,
  },
  contained: {
    disabled: 0,
    green: 0,
    halloween: 0,
    midnight: 0,
  },
  text: {
    regular: 0,
  },
};

const borderColorMap = {
  outlined: {
    ghosted: colors.palette.sky,
    disabled: colors.palette.sky,
  },
  contained: {
    disabled: colors.transparent,
    green: colors.transparent,
    halloween: colors.transparent,
    midnight: colors.transparent,
  },
  text: {
    regular: colors.transparent,
  },
};

export function Button({
  small,
  children,
  style,
  fontSize,
  round = true,
  tx,
  txOptions,
  text,
  title,
  variant = "outlined",
  theme = "ghosted",
  onPress,
  ...props
}) {
  const content = title || text;

  const buttonStyles = [
    styles.baseButton,
    small && styles.smallButton,
    {
      backgroundColor: backgroundColors[variant][theme],
      borderWidth: borderWidthMap[variant][theme],
      borderColor: borderColorMap[variant][theme],
    },
    round && { borderRadius: 100 },
    style,
  ];

  const buttonTextStyles = [
    styles.baseButtonText,
    {
      color: style?.color || colorMap[variant][theme],
      textDecorationLine: variant === "text" ? "underline" : "none",
      textDecorationColor: variant === "text" ? colorMap[variant][theme] : "transparent",
      textDecorationStyle: variant === "text" ? "solid" : null,
      fontSize: style?.fontSize || 14,
    },
  ];

  const handlePress = () => {
    if (onPress) {
      onPress();
    }
  };

  return (
    <TouchableOpacity
      style={buttonStyles}
      // eslint-disable-next-line react-native/no-inline-styles
      onPress={handlePress}
      {...props}
    >
      <Text style={buttonTextStyles}>{content}</Text>
    </TouchableOpacity>
  );
}

const styles = StyleSheet.create({
  baseButton: {
    paddingHorizontal: 20,
    paddingVertical: 12,
  },
  baseButtonText: {
    textAlign: "center",
  },
  smallButton: {
    height: 28,
    width: 75,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/SearchInput.js

import { StyleSheet } from "react-native";

import { TextInput } from "react-native-paper";

import { colors } from "../themes";

export function SearchInput({ value, onChange, style }) {
  const inputStyle = style ? [styles.input, style] : styles.input;

  return (
    <TextInput
      mode="outlined"
      style={inputStyle}
      contentStyle={styles.inputContent}
      outlineStyle={styles.outline}
      placeholderTextColor={colors.palette.sky}
      onChangeText={onChange}
      value={value}
      placeholder="Search by name"
      right={<TextInput.Icon icon="magnify" />}
    />
  );
}

const styles = StyleSheet.create({
  input: {
    borderRadius: 6,
    color: colors.palette.midnight,
    fontSize: 15,
    lineHeight: 20,
    backgroundColor: colors.transparent,
    height: 38,
  },
  outline: {
    borderColor: colors.palette.fieldsShadow,
    borderWidth: 1,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/FormInputHelper.js

import { StyleSheet, View } from "react-native";

import { Text } from "./Text";
import { colors } from "../themes";

function FormInputHelper({ label, children }) {
  return (
    <View style={styles.inputView}>
      <Text style={styles.inputLabel}>{label}</Text>
      {children}
    </View>
  );
}

const styles = StyleSheet.create({
  inputView: {
    marginVertical: 8,
  },
  inputLabel: {
    color: colors.palette.midnight,
    fontSize: 12,
    lineHeight: 16,
    marginBottom: 5,
  },
});

export default FormInputHelper;


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Text.js

import React from "react";
import { Text as RNText } from "react-native";

import { colors, typography } from "../themes";

/**
 * For your text displaying needs.
 * This component is a HOC over the built-in React Native one.
 *
 * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Components-Text.md)
 */
export function Text(props) {
  const { weight, tx, txOptions, text, children, style: $styleOverride, ...rest } = props;

  const content = tx || text || children;

  const $styles = [$baseStyle, $fontWeightStyles[weight], $styleOverride];

  return (
    <RNText {...rest} style={$styles} allowFontScaling={false}>
      {content}
    </RNText>
  );
}

const $sizeStyles = {
  xxl: { fontSize: 36, lineHeight: 44 },
  xl: { fontSize: 24, lineHeight: 34 },
  lg: { fontSize: 20, lineHeight: 32 },
  md: { fontSize: 18, lineHeight: 26 },
  sm: { fontSize: 16, lineHeight: 24 },
  xs: { fontSize: 14, lineHeight: 21 },
  xxs: { fontSize: 12, lineHeight: 18 },
};

const $fontWeightStyles = Object.entries(typography.primary).reduce(
  (acc, [weight, fontFamily]) => ({ ...acc, [weight]: { fontFamily } }),
  {}
);

const $baseStyle = [$fontWeightStyles.normal, { color: colors.text }];


File: /Users/codeshack-vii/Documents/_projects/Volato/components/UserAvatar.js

import { Image, StyleSheet, View } from "react-native";

import { Text } from "./Text";
import { colors } from "../themes";
import { getPhotoUrl } from "../utils/photo";

const getShortenedName = (name) => {
  const names = name.replace(" - ", " ").replace(" and ", " ").toUpperCase().split(" ");

  if (
    names.length === 1 ||
    (names.length > 1 && (names[1].includes("UNDEFINED") || names[1] === ""))
  ) {
    return `${names[0][0]}`;
  }
  return `${names[0][0]}${names[1][0]}`;
};

export function UserAvatar({ name, url, containerStyle, textStyle, size = 48 }) {
  const viewStyle = containerStyle ? [styles.container, containerStyle] : [styles.container];
  const tStyle = textStyle ? [styles.text, textStyle] : [styles.text];
  const photo = getPhotoUrl(url);

  return (
    <View style={[...viewStyle, { width: size, borderRadius: size / 2 }]}>
      {url ? (
        <Image source={{ uri: photo }} width={size} height={size} style={styles.avatarImage} />
      ) : (
        <Text style={tStyle}>{getShortenedName(name)}</Text>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  avatarImage: { borderRadius: 50 },
  container: {
    alignItems: "center",
    aspectRatio: 1,
    backgroundColor: colors.palette.darkSlate,
    borderRadius: 24,
    justifyContent: "center",
    width: 48,
  },
  text: {
    color: colors.palette.white,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/PhoneInput.js

import { StyleSheet } from "react-native";

import { TextInput as RNPTextInput } from "react-native-paper";

import { TextInput } from "./TextInput";

export function PhoneInput(props) {
  return (
    <TextInput
      {...props}
      keyboardType="phone-pad"
      left={<RNPTextInput.Affix text="+1 " textStyle={styles.affixStyle} />}
    />
  );
}

const styles = StyleSheet.create({
  affixStyle: {
    marginTop: 4,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/data/volato-zones.data.js

import Images from "../config/Images";

export const volatoGoZoneOptions = {
  volatoGoEast: [
    {
      fromLabel: "Teterboro, NJ (TEB)",
      from: "KTEB",
      fromAirport_id: 32,
      toLabel: "Atlanta, GA (PDK)",
      to: "KPDK",
      toAirport_id: 5,
      price: "$10,000",
      maxPrice: 10000,
      type: "east",
    },
    {
      fromLabel: "Atlanta, GA (PDK)",
      from: "KPDK",
      fromAirport_id: 5,
      toLabel: "Teterboro, NJ (TEB)",
      to: "KTEB",
      toAirport_id: 32,
      price: "$10,000",
      maxPrice: 10000,
      type: "east",
    },
    {
      fromLabel: "Atlanta, GA (PDK)",
      from: "KPDK",
      fromAirport_id: 5,
      toLabel: "Miami Opa Locka (OPF)",
      to: "KOPF",
      toAirport_id: 36,
      price: "$8,000",
      maxPrice: 8000,
      type: "east",
    },
    {
      fromLabel: "Miami Opa Locka (OPF)",
      from: "KOPF",
      fromAirport_id: 36,
      toLabel: "Atlanta GA (PDK)",
      to: "KPDK",
      toAirport_id: 5,
      price: "$8,000",
      maxPrice: 8000,
      type: "east",
    },
    {
      fromLabel: "Miami Opa Locka (OPF)",
      from: "KOPF",
      fromAirport_id: 36,
      toLabel: "Teterboro NJ (TEB)",
      to: "KTEB",
      toAirport_id: 32,
      price: "$12,000",
      maxPrice: 12000,
      type: "east",
    },
    {
      fromLabel: "Teterboro, NJ (TEB)",
      from: "KTEB",
      fromAirport_id: 32,
      toLabel: "Miami Opa Locka (OPF)",
      to: "KOPF",
      toAirport_id: 36,
      price: "$12,000",
      maxPrice: 12000,
      type: "east",
    },
  ],

  volatoGoWest: [
    {
      fromLabel: "Van Nuys, CA (VNY)",
      from: "KVNY",
      fromAirport_id: 25,
      toLabel: "Las Vegas, NV (LAS)",
      to: "KLAS",
      toAirport_id: 52,
      price: "$6,000",
      maxPrice: 6000,
      type: "west",
    },
    {
      toLabel: "Van Nuys, CA (VNY)",
      to: "KVNY",
      toAirport_id: 25,
      fromLabel: "Las Vegas, NV (LAS)",
      from: "KLAS",
      fromAirport_id: 52,
      price: "$6,000",
      maxPrice: 6000,
      type: "west",
    },
    {
      fromLabel: "Van Nuys, CA (VNY)",
      from: "KVNY",
      fromAirport_id: 25,
      toLabel: "Oakland, CA (OAK)",
      to: "KOAK",
      toAirport_id: 414,
      maxPrice: 7000,
      price: "$7,000",
      type: "west",
    },

    {
      toLabel: "Van Nuys, CA (VNY)",
      to: "KVNY",
      toAirport_id: 25,
      fromLabel: "Oakland, CA (OAK)",
      from: "KOAK",
      fromAirport_id: 414,
      price: "$7,000",
      maxPrice: 7000,
      type: "west",
    },
    {
      toLabel: "Oakland, CA (OAK)",
      to: "KOAK",
      toAirport_id: 414,
      fromLabel: "Las Vegas, NV (LAS)",
      from: "KLAS",
      fromAirport_id: 52,
      maxPrice: 8000,
      price: "$8,000",
      type: "west",
    },
    {
      fromLabel: "Oakland, CA (OAK)",
      from: "KOAK",
      fromAirport_id: 414,
      toLabel: "Las Vegas, NV (LAS)",
      to: "KLAS",
      toAirport_id: 52,
      maxPrice: 8000,
      price: "$8,000",
      type: "west",
    },
  ],

  texasTriangle: [
    {
      fromLabel: "Houston, TX (HOU)",
      from: "KHOU",
      fromAirport_id: 14,
      toLabel: "Dallas, TX (DAL)",
      to: "KDAL",
      toAirport_id: 61,
      price: "$6,000",
      maxPrice: 6000,
      type: "tx",
    },
    {
      fromLabel: "Dallas, TX (DAL)",
      from: "KDAL",
      fromAirport_id: 61,
      toLabel: "Houston,TX (HOU)",
      to: "KHOU",
      toAirport_id: 14,
      price: "$6,000",
      maxPrice: 6000,
      type: "tx",
    },

    {
      fromLabel: "Houston, TX (HOU)",
      from: "KHOU",
      fromAirport_id: 14,
      toLabel: "Austin, TX (AUS)",
      to: "KAUS",
      toAirport_id: 139,
      price: "$6,000",
      maxPrice: 6000,
      type: "tx",
    },
    {
      fromLabel: "Austin, TX (AUS)",
      from: "KAUS",
      fromAirport_id: 139,
      toLabel: "Houston, TX (HOU)",
      to: "KHOU",
      toAirport_id: 14,
      price: "$6,000",
      maxPrice: 6000,
      type: "tx",
    },
    {
      fromLabel: "Dallas, TX (DAL)",
      from: "KDAL",
      fromAirport_id: 61,
      toLabel: "Austin, TX (AUS)",
      to: "KAUS",
      toAirport_id: 139,
      price: "$6,000",
      maxPrice: 6000,
      type: "tx",
    },
    {


File: /Users/codeshack-vii/Documents/_projects/Volato/assets/.DS_Store

Error: Unable to extract code from /Users/codeshack-vii/Documents/_projects/Volato/assets/.DS_Store

File: /Users/codeshack-vii/Documents/_projects/Volato/themes/spacing.js

/**
  Use these spacings for margins/paddings and other whitespace throughout your app.
 */
export const spacing = {
  micro: 2,
  tiny: 4,
  extraSmall: 8,
  small: 10,
  medium: 16,
  large: 24,
  extraLarge: 32,
  huge: 48,
  massive: 64,
};


File: /Users/codeshack-vii/Documents/_projects/Volato/themes/typography.js

// TODO: write documentation about fonts and typography along with guides on how to add custom fonts in own
// markdown file and add links from here

import { Platform } from "react-native";

import {
  SpaceGrotesk_700Bold as spaceGroteskBold,
  SpaceGrotesk_300Light as spaceGroteskLight,
  SpaceGrotesk_500Medium as spaceGroteskMedium,
  SpaceGrotesk_400Regular as spaceGroteskRegular,
  SpaceGrotesk_600SemiBold as spaceGroteskSemiBold,
} from "@expo-google-fonts/space-grotesk";

/* eslint-disable global-require */
export const customFontsToLoad = {
  spaceGroteskLight,
  spaceGroteskRegular,
  spaceGroteskMedium,
  spaceGroteskSemiBold,
  spaceGroteskBold,
  unionRegular: require("../assets/fonts/union_regular.otf"),
  unionBold: require("../assets/fonts/union_bold.otf"),
};
/* eslint-enable global-require */

const fonts = {
  union: {
    normal: "unionRegular",
    bold: "unionBold",
  },
  spaceGrotesk: {
    // Cross-platform Google font.
    light: "spaceGroteskLight",
    normal: "spaceGroteskRegular",
    medium: "spaceGroteskMedium",
    semiBold: "spaceGroteskSemiBold",
    bold: "spaceGroteskBold",
  },
  helveticaNeue: {
    // iOS only font.
    thin: "HelveticaNeue-Thin",
    light: "HelveticaNeue-Light",
    normal: "Helvetica Neue",
    medium: "HelveticaNeue-Medium",
  },
  courier: {
    // iOS only font.
    normal: "Courier",
  },
  sansSerif: {
    // Android only font.
    thin: "sans-serif-thin",
    light: "sans-serif-light",
    normal: "sans-serif",
    medium: "sans-serif-medium",
  },
  monospace: {
    // Android only font.
    normal: "monospace",
  },
};

export const typography = {
  /**
   * The fonts are available to use, but prefer using the semantic name.
   */
  fonts,
  /**
   * The primary font. Used in most places.
   */
  primary: fonts.union,
  /**
   * An alternate font used for perhaps titles and stuff.
   */
  secondary: Platform.select({
    ios: fonts.helveticaNeue,
    android: fonts.sansSerif,
  }),
  /**
   * Lets get fancy with a monospace font!
   */
  code: Platform.select({ ios: fonts.courier, android: fonts.monospace }),
};


File: /Users/codeshack-vii/Documents/_projects/Volato/themes/index.js

export * from "./typography";
export * from "./spacing";
export * from "./colors";


File: /Users/codeshack-vii/Documents/_projects/Volato/themes/colors.js

// TODO: write documentation for colors and palette in own markdown file and add links from here

const palette = {
  neutral100: "#FFFFFF",
  neutral200: "#F4F2F1",
  neutral300: "#D7CEC9",
  neutral400: "#B6ACA6",
  neutral500: "#978F8A",
  neutral600: "#564E4A",
  neutral700: "#3C3836",
  neutral800: "#191015",
  neutral900: "#000000",

  primary100: "#F4E0D9",
  primary200: "#E8C1B4",
  primary400: "#D28468",
  primary500: "#C76542",
  primary600: "#A54F31",

  secondary100: "#DCDDE9",
  secondary200: "#BCC0D6",
  secondary300: "#9196B9",
  secondary400: "#626894",
  secondary500: "#41476E",

  accent100: "#FFEED4",
  accent200: "#FFE1B2",
  accent300: "#FDD495",
  accent400: "#FBC878",
  accent500: "#FFBB50",

  angry100: "#F2D6CD",
  angry500: "#C03403",

  overlay20: "rgba(25, 16, 21, 0.2)",
  overlay50: "rgba(25, 16, 21, 0.5)",

  tripCardOverlayStart: "rgb(23, 23, 23)",
  tripCardOverlayEnd: "rgba(24, 22, 22, 0.3)",

  greenAlpha: "rgba(202, 251, 80, 0.14)",
  redAlpha: "rgba(255, 77, 0, 0.8)",
  redBadge: "rgba(255, 59, 48, 1.0)",
  whiteAlpha: "rgba(255, 255, 255, 0.45)",
  whiteAlpha03: "rgba(255, 255, 255, 0.3)",
  greyAlpha: "rgba(200, 200, 200, 0.8)",
  blackAlpha: "rgba(0, 0, 0, 0.6)",
  glass: "rgba(255, 255, 255, 0.75)",

  sky: "#BCC7C8",
  slate: "#3E5567",
  darkSlate: "#2B3C4A",
  cloud: "#F5F4EB",
  darkCloud: "#EAE5D6",
  white: "#FEFEFE",
  midBlack: "#171717",
  blue: "#CFDCE5",
  primary300: "#D6D5E3",
  gray: "#F5F5F5",
  lightGray: "#F0F0F0",
  darkGray: "#84909A",
  green: "#CAFB50",
  greenO: "#F1FFCF",
  yellow: "#EBB52B",
  alert: "#EB001B",
  nomadic: "#FF4D00",
  midnight: "#494F5E",
  disabled: "#bcc7c8",
  light: "rgba(165, 173, 183, 1)",
  activityIconBg: "rgb(25, 118, 210)",
  divider: "#eaedf2",
  midnightAlpha: "rgba(82, 82, 85, 0.5)",
  strong: "rgba(18, 20, 44, 1)",
  fieldsShadow: "#e5e4ec",
  red: "#de2d06",
  bodyText: "#888C99",
  cardSeparator: "#F0F0F0",
  cardImageOverlay: "rgba(82, 82, 85, 0.3)",
  cardImageDisabledOverlay: "rgba(82, 82, 85, 0.65)",
  lightSky: "rgb(188, 199, 200)",
  gradientPink: "rgb(245, 244, 235)",
  tripCardGradientEnd: "rgba(24, 22, 22, 0.3)",
  tripCardGradientStart: "rgb(23, 23, 23)",
  backgroundOverlayGradientStart: "rgb(245, 244, 235, 1)",
  backgroundOverlayGradientEnd: "rgb(201, 214, 214, 1)",
};

export const colors = {
  /**
   * The palette is available to use, but prefer using the name.
   * This is only included for rare, one-off cases. Try to use
   * semantic names as much as possible.
   */
  palette,
  /**
   * A helper for making something see-thru.
   */
  transparent: "rgba(0, 0, 0, 0)",
  /**
   * The default text color in many components.
   */
  text: palette.slate,
  /**
   * Secondary text information.
   */
  textDim: palette.sky,
  /**
   * The default color of the screen background.
   */
  background: palette.neutral200,
  /**
   * The default border color.
   */
  border: palette.primary300,
  /**
   * The main tinting color.
   */
  tint: palette.primary500,
  /**
   * A subtle color used for lines.
   */
  separator: palette.neutral300,
  /**
   * Error messages.
   */
  error: palette.alert,
  /**
   * Error Background.
   *
   */
  errorBackground: palette.angry100,
  vauntLogoBackground: "rgba(164, 174, 183, 0.85)",
  backgroundLoginScreen: "white",
  backgroundRegisterScreen: "white",
};


File: /Users/codeshack-vii/Documents/_projects/Volato/themes/DraftbitTheme.js

import { systemWeights } from "react-native-typography";

export default {
  disabledOpacity: 0.5,
  roundness: 6,
  colors: {
    ActiveTabColor: "rgb(255, 77, 0)",
    ActivityIconBg: "rgb(25, 118, 210)",
    "BG Gray": "rgba(225, 218, 218, 0.15)",
    Background: "rgb(234, 237, 242)",
    Cloud: "rgb(245, 244, 235)",
    DarkSlate: "rgb(43, 60, 74)",
    Divider: "rgba(234, 237, 242, 1)",
    Error: "rgba(255, 69, 100, 1)",
    "Fields Shadow": "rgb(214, 213, 227)",
    "GetFit Orange": "rgb(254, 151, 15)",
    "Gradient Pink": "rgb(245, 244, 235)",
    Green: "rgb(202, 251, 80)",
    "Green BG": "rgba(0, 204, 154, 0.21)",
    Light: "rgba(165, 173, 183, 1)",
    "Light Inverse": "rgba(255, 255, 255, 0.68)",
    Light_Inverse: "rgba(255, 255, 255, 0.68)",
    Medium: "rgba(70, 78, 88, 1)",
    "Medium Inverse": "rgba(255, 255, 255, 0.87)",
    Medium_Inverse: "rgba(255, 255, 255, 0.87)",
    Midnight: "rgb(73, 79, 94)",
    "Midnight Alpha": "rgba(82, 82, 85, 0.25)",
    Normadic: "rgb(255, 77, 0)",
    Primary: "rgba(90, 69, 255, 1)",
    ProfileCardContactTextColor: "rgba(0, 0, 0, 0.6)",
    Red: "rgb(222, 19, 6)",
    Secondary: "rgba(59, 201, 234, 1)",
    Sky: "rgb(188, 199, 200)",
    Slate: "rgb(62, 85, 103)",
    Strong: "rgba(18, 20, 44, 1)",
    "Strong Inverse": "rgba(255, 255, 255, 1)",
    Strong_Inverse: "rgba(255, 255, 255, 1)",
    Surface: "rgba(255, 255, 255, 1)",
    Tab_Divider: "rgb(231, 235, 241)",
    TextPlaceholder: "rgb(136, 144, 153)",
    TripCardGradientEnd: "rgba(24, 22, 22, 0.3)",
    TripCardGradientStart: "rgb(23, 23, 23)",
    White: "rgb(255, 255, 255)",
    activeTabColor: "rgb(255, 77, 0)",
    activityIconBg: "rgb(25, 118, 210)",
    bGGray: "rgba(225, 218, 218, 0.15)",
    background: "rgb(234, 237, 242)",
    cloud: "rgb(245, 244, 235)",
    darkSlate: "rgb(43, 60, 74)",
    divider: "rgba(234, 237, 242, 1)",
    error: "rgba(255, 69, 100, 1)",
    fieldsShadow: "rgb(214, 213, 227)",
    getFitOrange: "rgb(254, 151, 15)",
    gradientPink: "rgb(245, 244, 235)",
    green: "rgb(202, 251, 80)",
    greenBG: "rgba(0, 204, 154, 0.21)",
    light: "rgba(165, 173, 183, 1)",
    lightInverse: "rgba(255, 255, 255, 0.68)",
    medium: "rgba(70, 78, 88, 1)",
    mediumInverse: "rgba(255, 255, 255, 0.87)",
    midnight: "rgb(73, 79, 94)",
    midnightAlpha: "rgba(82, 82, 85, 0.25)",
    normadic: "rgb(255, 77, 0)",
    primary: "rgba(90, 69, 255, 1)",
    profileCardContactTextColor: "rgba(0, 0, 0, 0.6)",
    red: "rgb(222, 19, 6)",
    secondary: "rgba(59, 201, 234, 1)",
    sky: "rgb(188, 199, 200)",
    slate: "rgb(62, 85, 103)",
    strong: "rgba(18, 20, 44, 1)",
    strongInverse: "rgba(255, 255, 255, 1)",
    surface: "rgba(255, 255, 255, 1)",
    tabDivider: "rgb(231, 235, 241)",
    textPlaceholder: "rgb(136, 144, 153)",
    tripCardGradientEnd: "rgba(24, 22, 22, 0.3)",
    tripCardGradientStart: "rgb(23, 23, 23)",
    white: "rgb(255, 255, 255)",
    gray: "rgb(0, 0, 0, 0.38)",
  },
  typography: {
    body1: {
      ...systemWeights.regular,
      fontSize: 16,
      letterSpacing: 0,
      lineHeight: 26,
    },
    body2: {
      ...systemWeights.regular,
      fontSize: 14,
      letterSpacing: 0,
      lineHeight: 22,
    },
    button: {
      ...systemWeights.bold,
      fontSize: 14,
      letterSpacing: 0,
      lineHeight: 16,
    },
    caption: {
      ...systemWeights.regular,
      fontSize: 12,
      letterSpacing: 0,
      lineHeight: 16,
    },
    headline1: {
      ...systemWeights.bold,
      fontSize: 60,
      letterSpacing: 0,
      lineHeight: 71,
    },
    headline2: {
      ...systemWeights.bold,
      fontSize: 48,
      letterSpacing: 0,
      lineHeight: 58,
    },
    headline3: {
      ...systemWeights.bold,
      fontSize: 34,
      letterSpacing: 0,
      lineHeight: 40,
    },
    headline4: {
      ...systemWeights.bold,
      fontSize: 24,
      letterSpacing: 0,
      lineHeight: 34,
    },
    headline5: {
      ...systemWeights.bold,
      fontSize: 20,
      letterSpacing: 0,
      lineHeight: 26,
    },
    headline6: {
      ...systemWeights.bold,
      fontSize: 16,
      letterSpacing: 0,
      lineHeight: 24,
    },
    overline: {
      ...systemWeights.regular,
      fontSize: 12,
      letterSpacing: 2,
      lineHeight: 16,
    },
    subtitle1: {
      ...systemWeights.regular,
      fontSize: 16,
      letterSpacing: 0,
      lineHeight: 26,
    },
    subtitle2: {
      ...systemWeights.regular,
      fontSize: 14,
      letterSpacing: 0,
      lineHeight: 22,
    },
  },
};


File: /Users/codeshack-vii/Documents/_projects/Volato/models/stores/CateringStore.js

import { flow, types } from "mobx-state-tree";

import { getCateringCategories } from "../../apis/catering-api";
import { CateringCategory } from "../Catering";
import { withStatus } from "../with-status";

export const CateringStore = types
  .model("CateringStore")
  .props({
    categories: types.array(CateringCategory),
  })
  .extend(withStatus)
  .views((self) => ({
    getCateringCategories: () => self.categories.filter(
        (category) => category.seq === 1 || category.seq === 2
      ),
    getTransportCategories: () => self.categories.filter((category) => category.seq > 2),
  }))
  .actions((self) => ({
    fetchCateringCategories: flow(function* () {
      self.setStatus("pending");
      const result = yield getCateringCategories();
      if (result.kind === "ok") {
        self.setStatus("done");
        self.setCategories(result.categories);
        return self.categories;
      } 
        self.setStatus("error");
        throw new Error(result.kind);
      
    }),
    setCategories: (categories) => {
      self.categories = categories;
    },
    clear: () => {
      self.categories.clear();
      // We don't set status to null as per the requirement
    },
  }));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/stores/AuthorizedUserStore.js

import _ from "lodash";
import { flow, types } from "mobx-state-tree";

import {
  createAuthorizedUser,
  deleteAuthorizedUser,
  getAuthorizedUsers,
  updateAuthorizedUser,
} from "../../apis/authorizeduser-api";
import { AuthorizedUser } from "../AuthorizedUser";
import { isPrimitive } from "../is-primitive";
import { withStatus } from "../with-status";

export const AuthorizedUserStore = types
  .model("AuthorizedUserStore")
  .props({
    authorizedUsers: types.array(AuthorizedUser),
  })
  .extend(withStatus)
  .views((self) => ({
    getAuthorizedUserById: (id) => self.authorizedUsers.find((user) => user.id === id),
  }))
  .actions((self) => ({
    removeOne(id) {
      const user = self.authorizedUsers.find((u) => u.id === id);
      self.authorizedUsers.remove(user);

      return user;
    },
    process(data) {
      const dataList = _.castArray(data);
      const mapped = dataList.map((user) => {
        if (isPrimitive(user)) return user;

        const existing = self.authorizedUsers.find((u) => u.id === user.id);

        return existing
          ? // eslint-disable-next-line consistent-return, no-shadow
            _.mergeWith(existing, user, (_, next) => {
              if (Array.isArray(next)) return next; // Treat arrays like atoms
            })
          : self.authorizedUsers.push(user);
      });

      return Array.isArray(data) ? mapped : mapped[0];
    },
  }))
  .actions((self) => ({
    getAuthorizedUsers: flow(function* () {
      self.setStatus("pending");
      const result = yield getAuthorizedUsers();
      if (result.kind === "ok") {
        self.setStatus("done");
        self.authorizedUsers = result.authorizedUsers;
        return self.authorizedUsers;
      }
      self.setStatus("error");
      throw new Error(result.kind);
    }),
    createAuthorizedUser: flow(function* (authorizedUser) {
      self.setStatus("pending");

      const result = yield createAuthorizedUser(authorizedUser);

      if (result.kind === "ok") {
        self.setStatus("done");
        self.authorizedUsers.push(result.authorizedUser);
        return self.authorizedUsers;
      }
      self.setStatus("error");
      throw new Error(result.kind);
    }),
    updateAuthorizedUser: flow(function* (userId, values) {
      self.setStatus("pending");

      const result = yield updateAuthorizedUser(userId, values);

      if (result.kind === "ok") {
        self.setStatus("done");
        const user = self.getAuthorizedUserById(userId);
        self.authorizedUsers[self.authorizedUsers.indexOf(user)] = result.authorizedUser;
        return user;
      }
      self.setStatus("error");
      throw new Error(result.kind);
    }),
    deleteAuthorizedUser: flow(function* (userId) {
      self.setStatus("pending");

      const result = yield deleteAuthorizedUser(userId);

      if (result.kind === "ok") {
        self.setStatus("done");
        return self.removeOne(userId);
      }
      self.setStatus("error");
      throw new Error(result.kind);
    }),
    setAuthorizedUsers: (users) => {
      self.authorizedUsers = users;
    },
    clear: () => {
      self.authorizedUsers.clear();
      // We don't set status to null as per the requirement
    },
  }));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/stores/RssStore.js

import { flow, types } from "mobx-state-tree";

import { getRssFeeds } from "../../apis/rss-api";
import { Rss } from "../Rss";
import { withStatus } from "../with-status";

export const RssStore = types
  .model("RssStore")
  .props({
    rssFeeds: types.array(Rss),
  })
  .extend(withStatus)
  .actions((self) => ({
    getRssFeeds: flow(function* () {
      self.setStatus("pending");
      const result = yield getRssFeeds();
      if (result.kind === "ok") {
        self.setStatus("done");
        self.setRssFeeds(result.feeds.items);
        return self.rssFeeds;
      } 
        self.setStatus("error");
        throw new Error(result.kind);
      
    }),
    setRssFeeds: (feeds) => {
      self.rssFeeds = feeds;
    },
  }));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/stores/PassengerStore.js

import { flow, types } from "mobx-state-tree";

import {
  createPassenger,
  deletePassenger,
  getDriverLicense,
  getPassengers,
  updatePassenger,
  uploadDriverLicense,
} from "../../apis/passenger-api";
import { Contact } from "../Contact";
import { withStatus } from "../with-status";

export const PassengerStore = types
  .model("PassengerStore")
  .props({
    passengers: types.array(Contact),
  })
  .extend(withStatus)
  .views((self) => ({
    getPassengerById: (id) => self.passengers.find((passenger) => passenger.id === id),
    hasPassengers: () => !self.passengers || self.passengers.length > 0,
    getContacts: () => self.passengers.filter((passenger) => passenger.isGuest()),
    getNonContacts: () => self.passengers.filter((passenger) => !passenger.isGuest()),
  }))
  .actions((self) => ({
    removeOne(id) {
      const passenger = self.passengers.find((p) => p.id === id);
      self.passengers.remove(passenger);

      return passenger;
    },
  }))
  .actions((self) => ({
    getPassengers: flow(function* () {
      self.setStatus("pending");
      const result = yield getPassengers();
      if (result.kind === "ok") {
        self.setStatus("done");
        self.setPassengers(result.passengers);
        return self.passengers;
      }
      self.setStatus("error");
      throw new Error(result.kind);
    }),
    createPassenger: flow(function* (passenger) {
      self.setStatus("pending");

      const result = yield createPassenger(passenger);

      if (result.kind === "ok") {
        self.setStatus("done");
        self.passengers.push(result.passenger);
        return result.passenger;
      }
      self.setStatus("error");
      throw new Error(result.kind);
    }),
    getDriverLicense: flow(function* (contactId) {
      self.setStatus("pending");

      const result = yield getDriverLicense(contactId);

      if (result.kind === "ok") {
        self.setStatus("done");
        return result.result;
      }
      self.setStatus("error");
      throw new Error(result.kind);
    }),
    uploadDriverLicense: flow(function* (data) {
      self.setStatus("pending");

      const result = yield uploadDriverLicense(data);

      if (result.kind === "ok") {
        self.setStatus("done");
        console.log(result);
      }
      self.setStatus("error");
      throw new Error(result.kind);
    }),
    updatePassenger: flow(function* (passengerId, values) {
      self.setStatus("pending");

      const result = yield updatePassenger(passengerId, values);

      if (result.kind === "ok") {
        self.setStatus("done");
        const passenger = self.getPassengerById(passengerId);
        self.passengers[self.passengers.indexOf(passenger)] = result.passenger;
        return result.passenger;
      }
      self.setStatus("error");
      throw new Error(result.kind);
    }),
    deletePassenger: flow(function* (passengerId) {
      self.setStatus("pending");

      const result = yield deletePassenger(passengerId);

      if (result.kind === "ok") {
        self.setStatus("done");
        return self.removeOne(passengerId);
      }
      self.setStatus("error");
      throw new Error(result.kind);
    }),
    setPassengers: (passengers) => {
      self.passengers = passengers;
    },
    clear: () => {
      self.passengers.clear();
      // We don't set status to null as per the requirement
    },
  }));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/stores/FboSearchStore.js

import AsyncStorage from "@react-native-async-storage/async-storage";
import { onSnapshot, types } from "mobx-state-tree";

import { FboSearch } from "../FboSearch";
import { withStatus } from "../with-status";

export const FboSearchStore = types
  .model("FboSearchStore")
  .props({
    savedSearches: types.array(FboSearch),
  })
  .extend(withStatus)
  .actions((self) => ({
    updateSavedSearches: async (fboSearch) => {
      // find fboSearch in savedSearches by id
      const index = self.savedSearches.findIndex((s) => s.id === fboSearch.id);
      if (index !== -1) {
        // if found, update it
        self.savedSearches[index].lastSearchDate = new Date();
      } else {
        // if not found, add it
        self.savedSearches.push(fboSearch);
      }

      // sort saved searches by lastSearchDate
      self.savedSearches.sort((a, b) => b.lastSearchDate - a.lastSearchDate);

      // Persist savedSearches to AsyncStorage
      await AsyncStorage.setItem("savedSearches", JSON.stringify(self.savedSearches));
    },
    setSavedSearches: (ss) => {
      self.savedSearches = ss;
    },
    clear: () => {
      self.savedSearches.clear();
      // We don't set status to null as per the requirement
    },
  }));

let _fboSearchStore = FboSearchStore.create();

// Load savedSearches from AsyncStorage on app startup
AsyncStorage.getItem("savedSearches")
  .then((savedSearches) => {
    if (savedSearches) {
      _fboSearchStore.setSavedSearches(JSON.parse(savedSearches));
    }
  })
  .catch((error) => {
    console.error("Error loading savedSearches from AsyncStorage:", error);
  });

// Listen for changes in _fboSearchStore and update AsyncStorage
onSnapshot(_fboSearchStore, (snapshot) => {
  if (snapshot.savedSearches) {
    // AsyncStorage.removeItem("savedSearches");
    AsyncStorage.setItem("savedSearches", JSON.stringify(snapshot.savedSearches)).catch((error) => {
      console.error("Error saving savedSearches to AsyncStorage:", error);
    });
  }
});

export const useFboSavedSearchStore = () => {
  if (!_fboSearchStore) {
    _fboSearchStore = FboSearchStore.create();
  }

  return _fboSearchStore;
};


File: /Users/codeshack-vii/Documents/_projects/Volato/models/stores/AdvertisingPartnerStore.js

import { flow, types } from "mobx-state-tree";

import { getPartners } from "../../apis/partnership-api";
import { AdvertisingPartner } from "../AdvertisingPartner";
import { withStatus } from "../with-status";

export const AdvertisingPartnerStore = types
  .model("AdvertisingPartnerStore")
  .props({
    partners: types.array(AdvertisingPartner),
  })
  .extend(withStatus)
  .views((self) => ({}))
  .actions((self) => ({
    getPartners: flow(function* () {
      self.setStatus("pending");
      const result = yield getPartners();
      if (result.kind === "ok") {
        self.setStatus("done");
        self.setPartners(result.partners);
        return self.partners;
      }
      self.setStatus("error");
      throw new Error(result.kind);
    }),
    setPartners: (partners) => {
      self.partners = partners.sort((a, b) => {
        const categoryA = a.advertisingpartnercategory_id.label.toLowerCase();
        const categoryB = b.advertisingpartnercategory_id.label.toLowerCase();
        if (categoryA < categoryB) {
          return -1;
        }
        if (categoryA > categoryB) {
          return 1;
        }
        return 0;
      });
    },
    clear: () => {
      self.partners.clear();
    },
  }));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/stores/DealsStore.js

import { flow, types } from "mobx-state-tree";

import { getDailyDeals } from "../../apis/dailydeals-api";
import { Deals } from "../Deals";
import { withStatus } from "../with-status";

export const DealsStore = types
  .model("DealsStore")
  .props({
    deals: types.array(Deals),
  })
  .extend(withStatus)
  .views((self) => ({}))
  .actions((self) => ({
    getDailyDeals: flow(function* () {
      self.setStatus("pending");
      const result = yield getDailyDeals();
      if (result.kind === "ok") {
        self.setStatus("done");
        self.setDeals(result.deals);
        return self.deals;
      } 
        self.setStatus("error");
        throw new Error(result.kind);
      
    }),
    setDeals: (deals) => {
      self.deals = deals;
    },
    clear: () => {
      self.deals.clear();
      // We don't set status to null as per the requirement
    },
  }));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/stores/OcCaseStore.js

import { flow, types } from "mobx-state-tree";

import { getChatList } from "../../apis/chat-api";
import { OcCase } from "../OcCase";
import { withStatus } from "../with-status";

export const OcCaseStore = types
  .model("OcCaseStore")
  .props({
    cases: types.array(OcCase),
  })
  .extend(withStatus)
  .views((self) => ({}))
  .actions((self) => ({
    getOcCaseList: flow(function* () {
      self.setStatus("pending");
      const result = yield getChatList();
      if (result.kind === "ok") {
        self.setStatus("done");
        self.setCases(result.cases);
        return self.cases;
      }
      self.setStatus("error");
      throw new Error(result.kind);
    }),
    setCases: (cases) => {
      // Each case contains a list of messages, where each message contains a nullable field user_id
      // The user_id field is an instance of the Representative model found in OcCase.js
      // Parse the cases to properly instantiate the Representative model and store in case.user_id
      cases.forEach((c) => {
        c.messages.forEach((m) => {
          if (m.user_id) {
            m.isUser = false;
            m.messageFrom = `${m.user_id.firstName} ${m.user_id.lastName}`;
            m.messageFromAvatar = m.user_id.fileupload_uuid;
          } else {
            m.isUser = true;
            m.messageFrom = m.contact_id.label;
            m.messageFromAvatar = m.contact_id.photo_uuid;
          }
        });

        // set last message to the last message in messages
        if (c.messages.length > 0) {
          c.lastMessage = c.messages[c.messages.length - 1];
        }
      });

      // sort cases based on message.createdAt, where message is the last element in case.messages but messages can be null/undefined
      // if messages is null/undefined, that case should be last sorted by case.createdAt
      const sortedCases = cases.sort((a, b) => {
        const aLastMessage = a.messages.length > 0 ? a.messages[a.messages.length - 1] : null;
        const bLastMessage = b.messages.length > 0 ? b.messages[b.messages.length - 1] : null;
        if (aLastMessage && bLastMessage) {
          return bLastMessage.createdAt - aLastMessage.createdAt;
        }
        if (aLastMessage && !bLastMessage) {
          return -1;
        }
        if (!aLastMessage && bLastMessage) {
          return 1;
        }
        return b.createdAt - a.createdAt;
      });

      self.cases = sortedCases;
    },
    clear: () => {
      self.cases.clear();
      // We don't set status to null as per the requirement
    },
  }));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/stores/PetStore.js

import _ from "lodash";
import { flow, types } from "mobx-state-tree";

import { createPet, deletePet, getPets, updatePet } from "../../apis/pet-api";
import { Contact } from "../Contact";
import { isPrimitive } from "../is-primitive";
import { withStatus } from "../with-status";

export const PetStore = types
  .model("PetStore")
  .props({
    pets: types.array(Contact),
  })
  .extend(withStatus)
  .views((self) => ({
    getPetById: (id) => self.pets.find((p) => p.id === id),
  }))
  .actions((self) => ({
    removeOne(id) {
      const pet = self.pets.find((p) => p.id === id);
      self.pets.remove(pet);

      return pet;
    },
    process(data) {
      const dataList = _.castArray(data);
      const mapped = dataList.map((pet) => {
        if (isPrimitive(pet)) return pet;

        const existing = self.pets.find((p) => p.id === pet.id);

        return existing
          ? // eslint-disable-next-line consistent-return, no-shadow
            _.mergeWith(existing, pet, (_, next) => {
              if (Array.isArray(next)) return next; // Treat arrays like atoms
            })
          : self.pets.push(pet);
      });

      return Array.isArray(data) ? mapped : mapped[0];
    },
  }))
  .actions((self) => ({
    getPets: flow(function* () {
      self.setStatus("pending");
      const result = yield getPets();
      if (result.kind === "ok") {
        self.setStatus("done");
        return self.process(result.pets);
      }
      self.setStatus("error");
      throw new Error(result.kind);
    }),
    createPet: flow(function* (pet) {
      self.setStatus("pending");

      const result = yield createPet(pet);

      if (result.kind === "ok") {
        self.setStatus("done");
        self.pets.push(result.pet);
        return self.pets;
      }
      self.setStatus("error");
      throw new Error(result.kind);
    }),
    updatePet: flow(function* (petId, values) {
      self.setStatus("pending");

      const result = yield updatePet(petId, values);

      if (result.kind === "ok") {
        self.setStatus("done");
        const pet = self.getPetById(petId);
        self.pets[self.pets.indexOf(pet)] = result.pet;
        return result.pet;
      }
      self.setStatus("error");
      throw new Error(result.kind);
    }),
    deletePet: flow(function* (petId) {
      self.setStatus("pending");

      const result = yield deletePet(petId);

      if (result.kind === "ok") {
        self.setStatus("done");
        return self.removeOne(petId);
      }
      self.setStatus("error");
      throw new Error(result.kind);
    }),
    setPets: (pets) => {
      self.pets = pets;
    },
    clear: () => {
      self.pets.clear();
      // We don't set status to null as per the requirement
    },
  }));


File: /Users/codeshack-vii/Documents/_projects/Volato/models/stores/UserStore.js

import LogRocket from "@logrocket/react-native";
import { add as addDate, isAfter } from "date-fns";
import { flow, types } from "mobx-state-tree";

import { updateUser, uploadPhoto } from "../../apis/user-api";
import { getPhotoUrl } from "../../utils/photo";
import { Debit } from "../Debit";
import { DepositAccount } from "../DepositAccount";
import { UserFlight } from "../Flight";
import { Ownership } from "../Ownership";
import { Photo } from "../Photo";
import { UpcomingFlight } from "../UpcomingFlight";
import { User } from "../User";
import { withStatus } from "../with-status";

export const UserStore = types
  .model("UserStore")
  .props({
    user: types.maybeNull(User),
    flights: types.array(UserFlight),
    ownership: types.array(Ownership),
    debits: types.array(Debit),
    depositAccounts: types.array(DepositAccount),
    upcomingFlights: types.array(UpcomingFlight),
    images: types.map(Photo),
  })
  .extend(withStatus)
  .views((self) => ({
    getFboImage(icao) {
      return self.images.get(icao);
    },
    getRecentFlights() {
      return self.flights.filter((f) => {
        const flightDate = addDate(new Date(f.departLocal), {
          months: 3,
        });
        return isAfter(flightDate, new Date());
      });
    },
    getPastFlights() {
      return self.flights.filter((f) => {
        const flightDate = addDate(new Date(f.departLocal), {
          months: 3,
        });
        return isAfter(new Date(), flightDate);
      });
    },
    getUserPhoto() {
      return getPhotoUrl(self.user?.photo_uuid);
    },
  }))
  .actions((self) => ({
    setUser(user) {
      self.user = user;
    },
    setUserFlights(flights) {
      self.flights = flights;
    },
    setUserOwnership(ownership) {
      self.ownership = ownership;
    },
    setUserDebits(debits) {
      self.debits = debits;
    },
    setDepositAccounts(depositAccounts) {
      self.depositAccounts = depositAccounts;
    },
    setFboImages(images) {
      Object.keys(images || {}).forEach((icao) => {
        self.images.set(icao, images[icao]);
      });
    },
    setUpcomingFlights(upcomingFlights) {
      self.upcomingFlights = upcomingFlights;
    },
    setProfile({ customer, flights, ownership, debits, depositAccounts, photos, upcomingTravel }) {
      this.setUser(customer);
      this.setUserFlights(flights);
      this.setUserOwnership(ownership);
      this.setUserDebits(debits);
      this.setDepositAccounts(depositAccounts);
      this.setFboImages(photos);
      this.setUpcomingFlights(upcomingTravel);

      LogRocket.identify(customer.id, {
        name: customer.label,
        email: customer.email,
        phone: customer.phone,
      });
    },
    uploadPhoto: flow(function* (data) {
      self.setStatus("pending");

      const result = yield uploadPhoto(data);

      if (result.kind === "ok") {
        self.setStatus("done");
      } else {
        self.setStatus("error");
        throw new Error(result.kind);
      }
    }),
    updateUser: flow(function* (data) {
      self.setStatus("pending");

      const result = yield updateUser(data);

      if (result.kind === "ok") {
        self.setStatus("done");
      } else {
        self.setStatus("error");
        throw new Error(result.kind);
      }
    }),
    clearUser: () => {
      self.user = null;
      self.flights.clear();
      self.ownership.clear();
      self.debits.clear();
      self.depositAccounts.clear();
      self.upcomingFlights.clear();
      self.images.clear();
    },
  }));


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Chat/ChatScreen.js

import React, { useEffect, useRef, useState } from "react";
import {
  ActivityIndicator,
  FlatList,
  KeyboardAvoidingView,
  Linking,
  Platform,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  useWindowDimensions,
  View,
} from "react-native";

import { IconButton, ScreenContainer } from "@draftbit/ui";
import { useNavigation } from "@react-navigation/native";
import { useMutation, useQuery } from "@tanstack/react-query";
import { StatusBar } from "expo-status-bar";
import Animated, { FadeInLeft, FadeOutRight } from "react-native-reanimated";
import HTML from "react-native-render-html";

import { createChat, getChatMessages, sendChatMessage } from "../../apis/chat-api";
import { Button, Text } from "../../components";
import ArrowLeft from "../../components/Icons/ArrowLeft";
import EmptyChatListImage from "../../components/Images/EmptyChatListImage";
import { useModalAction } from "../../components/Modals";
import { useStores } from "../../models/root";
import { colors } from "../../themes/colors";
import { modalViews } from "../../utils";
import { formatTimeOrDate } from "../../utils/formatDate";
import { queries } from "../../utils/queries";

function MessageItem({ item }) {
  const dimensions = useWindowDimensions();
  const { openModal, closeModal } = useModalAction();

  const isPhoneCall = item.oc_commchannel_id === 4;
  const isSafe = !isPhoneCall && !item.message.includes("<!DOCTYPE html>");

  const handleViewMessage = (message) => () => {
    // remove links to prevent user from attempting to navigate
    const updatedMessage = message.replace(/<a href="http[\s\S]*?<\/a>/g, "");

    openModal(modalViews.BROWSE_WEB, {
      onClose: closeModal,
      content: updatedMessage,
      url: null,
    });
  };

  return (
    <View
      style={
        item.contact_id || !item.user_id
          ? styles.messageItemContactContainer
          : styles.messageItemUserContainer
      }
    >
      {isPhoneCall ? (
        <Text style={styles.messageItemText}>{item.oc_commchannel_label}</Text>
      ) : isSafe ? (
        <HTML
          source={{ html: item.message }}
          style={styles.messageItemText}
          contentWidth={dimensions.width}
        />
      ) : (
        <>
          <Text style={styles.messageItemText}>{item.label}</Text>
          <Button
            style={styles.viewMessageButton}
            variant="contained"
            theme="green"
            title="View Message"
            onPress={handleViewMessage(item.message)}
          />
        </>
      )}
      <Text style={styles.messageItemTimeText}>
        {formatTimeOrDate(item?.createdAt, "eee, MMM dd")}
      </Text>
    </View>
  );
}

function EmptyList() {
  return (
    <View style={styles.emptyList}>
      <EmptyChatListImage />
      <Text style={[styles.emptyListNote, styles.emptyListNoteHeader]}>
        There are no messages yet.
      </Text>
      <Text style={styles.emptyListNote}>Send the first message below.</Text>
    </View>
  );
}

function ChatScreen(props) {
  const dimensions = useWindowDimensions();
  const navigation = useNavigation();
  const {
    userStore: { user },
  } = useStores();
  const { chatId, title, tripId, pricingQuoteId } = props.route.params;
  const [messages, setMessages] = useState([]);
  const [message, setMessage] = useState("");
  const [caseId, setCaseId] = useState(chatId);
  const flatListRef = useRef(null);

  // create chat mutation
  const { mutate: createNewChat } = useMutation({
    mutationKey: queries.chat.create,
    mutationFn: () => createChat(tripId, pricingQuoteId),
    onSuccess: (response) => {
      setCaseId(response.chat.id);
    },
    onError: (error) => {
      console.log(error);
    },
  });

  // get chat query
  const getChatQuery = useQuery({
    queryKey: queries.chat.messages(caseId),
    enabled: caseId != null,
    queryFn: () => getChatMessages(caseId),
    onSuccess: (response) => {
      setMessages(response.messages ? response.messages.reverse() : []);
    },
  });

  // send chat message mutation
  const { mutate: sendMessage } = useMutation({
    mutationKey: queries.chat.send(caseId),
    mutationFn: (msg) => sendChatMessage(caseId, msg),
    onSuccess: () => {
      getChatQuery.refetch();
    },
    onError: (error) => {
      console.log(error);
    },
  });

  // handle message
  const handleMessage = async () => {
    await sendMessage(message.trim());
    setMessage("");
  };

  // handle call
  const handleCall = () => {
    // start a phone call
    const phoneNumber = "+18663524409";
    Linking.openURL(`tel:${phoneNumber}`);
  };

  useEffect(() => {
    if (flatListRef.current) {
      flatListRef.current.scrollToEnd({ animated: true });
    }
  }, [messages]);

  // refetch chat query every 10s
  useEffect(() => {
    // if caseId is null, create new case for chat
    if (caseId == null) {
      createNewChat();
    }

    const interval = setInterval(() => {
      getChatQuery.refetch();
    }, 10000);
    return () => clearInterval(interval);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // refetch chat query whenever caseId changes
  useEffect(() => {
    if (caseId) {
      getChatQuery.refetch();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [caseId]);
  const canSendMessage = message.trim().length > 0;

  return (
    <Animated.View
      entering={FadeInLeft.duration(400)}
      exiting={FadeOutRight.duration(400)}
      style={styles.animatedContainer}
    >
      <ScreenContainer style={styles.container} hasTopSafeArea scrollable={false}>
        {getChatQuery.isLoading && (
          <View style={styles.spinner}>
            <ActivityIndicator
              style={styles.activityIndicator}
              animating
              color={colors.palette.midnight}
              hidesWhenStopped
              size="large"


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Chat/ChatListScreen.js

import React, { useEffect, useState } from "react";
import {
  ActivityIndicator,
  FlatList,
  ImageBackground,
  RefreshControl,
  StyleSheet,
  TouchableOpacity,
  View,
} from "react-native";

import { ScreenContainer } from "@draftbit/ui";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { setStatusBarStyle } from "expo-status-bar";
import { useSafeAreaInsets } from "react-native-safe-area-context";

import { Button, Text, UserAvatar } from "../../components";
import EmptyChatListImage from "../../components/Images/EmptyChatListImage";
import Images from "../../config/Images";
import { useStores } from "../../models/root";
import { colors, spacing } from "../../themes";
import { formatDate, formatDateFromEpoch, formatTimeOrDate } from "../../utils/formatDate";
import { queries } from "../../utils/queries";
import { screens } from "../../utils/screens";

function ChatItem({ item, onSelect }) {
  const { userStore } = useStores();
  const { label: userLabel } = userStore.user;

  const handlePress = () => {
    onSelect(item);
  };

  return (
    <TouchableOpacity style={styles.chatItem} onPress={handlePress}>
      <View style={styles.chatItemAvatar}>
        <View style={styles.chatItemAvatarLine} />
        <UserAvatar
          name={item.lastMessage ? item.lastMessage.messageFrom : "--"}
          url={item.lastMessage ? item.lastMessage.messageFromAvatar : null}
          size={42}
          containerStyle={styles.chatAvatar}
          textStyle={styles.chatAvatarText}
        />
      </View>
      <View style={styles.chatItemTextContainer}>
        <Text style={styles.chatItemCaseId} weight="bold">
          Case #{item.id} {item.departDate ? `(departing ${item.departDate})` : null}
        </Text>
        <View style={styles.chatItemTitleContainer}>
          {item.fromAirport && item.toAirport ? (
            <Text
              style={styles.chatItemTripText}
            >{`Trip ${item.fromAirport} -> ${item.toAirport}`}</Text>
          ) : (
            <Text style={styles.chatItemTripText}>{item.label}</Text>
          )}
        </View>
      </View>
      <View style={styles.chatItemDateTimeContainer}>
        <Text style={styles.chatItemDateText}>
          {item.lastMessage?.createdAt
            ? `${formatTimeOrDate(item.lastMessage?.createdAt, "eee, MMM dd")}`
            : ""}
        </Text>
      </View>
    </TouchableOpacity>
  );
}

function EmptyList() {
  return (
    <View style={styles.emptyList}>
      <EmptyChatListImage />
      <Text style={[styles.emptyListNote, styles.emptyListNoteHeader]}>
        There are no active Chats
      </Text>
      <Text style={styles.emptyListNote}>When you book a trip a Chat will appear here.</Text>
    </View>
  );
}

function ChatListScreen(props) {
  const [refreshing, setRefreshing] = useState(false);
  const queryClient = useQueryClient();
  const insets = useSafeAreaInsets();
  const {
    ocCaseStore: { getOcCaseList, cases },
  } = useStores();

  const chatsQuery = useQuery({
    queryKey: queries.chat.list,
    queryFn: getOcCaseList,
    enabled: false,
    onError: (error) => {},
    onSettled: () => {
      setRefreshing(false);
    },
  });

  function fetchChatList() {
    setRefreshing(true);
    chatsQuery.refetch();
  }

  useEffect(() => {
    const unsubscribe = props.navigation.addListener("focus", () => {
      setStatusBarStyle("light");
      fetchChatList();
    });

    return unsubscribe;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [props.navigation]);

  // handle chat selection
  const handleChatSelection = (item) => {
    const title = `Case #${item.id}`;
    props.navigation.navigate(screens.ChatScreen, { chatId: item.id, title });
  };

  // handle new chat
  const handleNewChat = () => {
    props.navigation.navigate(screens.ChatScreen, { title: "New Chat" });
  };

  return (
    <ScreenContainer style={styles.container} scrollable={false}>
      {refreshing && (
        <View style={styles.spinner}>
          <ActivityIndicator
            style={styles.activityIndicator}
            animating
            color={colors.palette.midnight}
            hidesWhenStopped
            size="large"
          />
        </View>
      )}
      <View style={styles.navHeader}>
        <ImageBackground
          source={Images.ChatHeader}
          style={styles.navHeaderImage}
          resizeMode="cover"
        >
          <Text style={[styles.navHeaderText, { marginTop: insets.top }]}>Chats</Text>

          <View style={styles.buttonsRow}>
            <Button variant="contained" theme="green" title="New Chat +" onPress={handleNewChat} />
          </View>
        </ImageBackground>
      </View>

      {cases && cases.length > 0 ? (
        <View style={styles.chatListContainer}>
          <FlatList
            data={cases}
            renderItem={({ item }) => (
              <ChatItem item={item} key={item.id} onSelect={handleChatSelection} />
            )}
            numColumns={1}
            showsHorizontalScrollIndicator={false}
            showsVerticalScrollIndicator
            refreshControl={
              <RefreshControl
                refreshing={refreshing}
                onRefresh={() => {
                  fetchChatList();
                }}
              />
            }
          />
        </View>
      ) : (
        <EmptyList />
      )}
    </ScreenContainer>
  );
}

const styles = StyleSheet.create({
  activityIndicator: {
    width: 36,
  },
  buttonsRow: {
    flexDirection: "row",
    justifyContent: "flex-end",
    alignSelf: "flex-end",
    margin: 16,
  },
  container: {
    backgroundColor: colors.palette.cloud,
  },
  content: {
    flex: 1,
    justifyContent: "center",
  },
  navHeader: {
    borderBottomLeftRadius: 16,
    borderBottomRightRadius: 16,


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Auth/EmailLoginScreen.js

import React, { useState } from "react";
import {
  Image,
  Linking,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  useWindowDimensions,
  View,
} from "react-native";

import { ScreenContainer } from "@draftbit/ui";
import { yupResolver } from "@hookform/resolvers/yup";
import { useMutation } from "@tanstack/react-query";
import { Controller, useForm } from "react-hook-form";
import { KeyboardAwareScrollView } from "react-native-keyboard-aware-scroll-view";
import * as yup from "yup";
import "yup-phone";

import { api } from "../../apis/VolatoMobileAPIApi";
import { BackButton, Button, Text, Toggle } from "../../components";
import Images from "../../config/Images";
import { colors, spacing } from "../../themes";

const emailSchema = yup.object({
  email: yup.string().email("Please enter a valid email address.").required("Email is required"),
});

function EmailLoginScreen(props) {
  const layout = useWindowDimensions();
  const { navigation } = props;
  const [isSelected, setIsSelected] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const emailDefaultValues = {
    email: "",
  };

  // initiate login mutation
  const initiateLoginMutation = useMutation({
    mutationFn: (email) => api.auth.initiateEmailLogin(email),
    onMutate: () => {
      setIsLoading(true);
    },
    onSuccess: (data, variables) => {
      // navigate to OTP screen
      navigation.navigate("ConfirmOTPScreen", {
        email: variables,
        emailOptIn: isSelected,
      });
    },
    onError: (error) => {
      console.error(error);
    },
    onSettled: () => {
      setIsLoading(false);
    },
  });

  const { handleSubmit, control, formState } = useForm({
    resolver: yupResolver(emailSchema),
    defaultValues: emailDefaultValues,
  });

  const onInitiateLogin = async (data) => {
    initiateLoginMutation.mutate(data.email);
  };

  return (
    <ScreenContainer
      hasSafeArea
      scrollable={false}
      style={{
        backgroundColor: colors.palette.cloud,
      }}
    >
      <KeyboardAwareScrollView
        contentContainerStyle={styles.contentContainer}
        keyboardShouldPersistTaps="handled"
        extraScrollHeight={layout.height / 3} // You can adjust this value as needed
      >
        <View style={styles.header}>
          <BackButton onPress={() => navigation.goBack()} />
          <Image style={styles.logo} resizeMode="cover" source={Images.Wordmark} />
        </View>
        <View style={styles.content}>
          <Text style={styles.inputLabel}>Enter your email</Text>
          <Controller
            control={control}
            name="email"
            render={({ field: { onBlur, onChange, value } }) => (
              <View style={styles.inputContainer}>
                {formState.errors.email && (
                  <Text style={styles.inputErrorText}>{formState.errors.email.message}</Text>
                )}
                <View
                  style={formState.errors.email ? styles.inputWrapperError : styles.inputWrapper}
                >
                  <TextInput
                    style={styles.customInput}
                    value={value}
                    onBlur={onBlur}
                    onChangeText={onChange}
                    placeholder="email@example.com"
                    keyboardType="email-address"
                    textContentType="emailAddress"
                    autoCapitalize="none"
                    status={formState.errors.email ? "error" : undefined}
                    returnKeyType="done"
                  />
                </View>
                <View style={styles.smsToggleContainer}>
                  <Toggle
                    variant="checkbox"
                    inputInnerStyle={styles.checkBoxInnerStyle}
                    inputOuterStyle={styles.checkBoxOuterStyle}
                    inputDetailStyle={styles.checkStyle}
                    onValueChange={setIsSelected}
                    value={isSelected}
                  />
                  <Text style={styles.smsToggleLabelContainer}>
                    <Text
                      style={styles.smsToggleHeader}
                      suppressHighlighting
                      onPress={() => setIsSelected(!isSelected)}
                    >
                      I would like to receive messages from the Volato Mobile app to this email.
                    </Text>
                    {"\n"}
                    <Text
                      style={styles.smsToggleText}
                      suppressHighlighting
                      onPress={() => setIsSelected(!isSelected)}
                    >
                      Messages include, but are not limited to, alerts about upcoming flight
                      reservations, daily deals, aircraft notifications, and more. The quantity of
                      messages will vary based on application activity but should not exceed
                      15msg/day.
                    </Text>
                  </Text>
                </View>
                <View style={styles.buttonView}>
                  <Button
                    variant="contained"
                    theme={isLoading ? "disabled" : "halloween"}
                    style={styles.loginButton}
                    title={isLoading ? "Loading..." : "Get Started"}
                    disabled={isLoading}
                    onPress={handleSubmit(onInitiateLogin)}
                  />
                </View>
              </View>
            )}
          />
        </View>
        <View style={styles.footer}>
          <View style={styles.footerLinksView}>
            <TouchableOpacity
              onPress={() => Linking.openURL("https://flyvaunt.com/home/privacy-policy/sms-tos/")}
            >
              <Text style={styles.about}>SMS Terms</Text>
            </TouchableOpacity>
            <Text style={styles.aboutNonLink}>&nbsp;&&nbsp;</Text>
            <TouchableOpacity
              onPress={() => Linking.openURL("https://flyvaunt.com/home/privacy-policy/")}
            >
              <Text style={styles.about}>Privacy Policy</Text>
            </TouchableOpacity>
          </View>
          <Text style={styles.description}>
            By creating an account, you accept our{"\n"}Terms & Conditions. Please read our Privacy
            Policy.
          </Text>
        </View>
      </KeyboardAwareScrollView>
    </ScreenContainer>
  );
}

const styles = StyleSheet.create({
  about: {
    color: colors.palette.midnight,
    fontSize: 13,
    lineHeight: 15,
    textAlign: "center",
    textDecorationColor: colors.palette.midnight,
    textDecorationLine: "underline",
    textDecorationStyle: "solid",
  },
  aboutHeader: {
    color: colors.palette.slate,
    fontSize: 22,
    lineHeight: 24,
    marginBottom: 10,
  },
  aboutModal: {
    backgroundColor: colors.palette.cloud,
    height: "100%",
    padding: 20,
  },


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Auth/ConfirmOTPScreen.js

import React, { useEffect, useState } from "react";
import { ActivityIndicator, Image, StyleSheet, View } from "react-native";

import { ScreenContainer } from "@draftbit/ui";
import { useNavigation } from "@react-navigation/native";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import {
  CodeField,
  Cursor,
  useBlurOnFulfill,
  useClearByFocusCell,
} from "react-native-confirmation-code-field";

import { me } from "../../apis/auth-api";
import { api } from "../../apis/VolatoMobileAPIApi";
import { BackButton, Button, Text } from "../../components";
import Images from "../../config/Images";
import { useAircraftPhotoStore } from "../../models/AircraftPhoto";
import { useStores } from "../../models/root";
import { colors, spacing } from "../../themes/index";

function ConfirmOTPScreen(props) {
  const [otp, setOtp] = useState("");
  const [showSpinner, setShowSpinner] = useState(false);
  const { route } = props;
  const { phoneNumber, email, smsOptIn, emailOptIn } = route.params;
  const [otpError, setOtpError] = useState(undefined);
  const queryClient = useQueryClient();

  const navigation = useNavigation();

  const ref = useBlurOnFulfill({ value: otp, cellCount: 6 });
  const [ps, getCellOnLayoutHandler] = useClearByFocusCell({
    value: otp,
    setValue: setOtp,
  });
  const { userStore, authStore } = useStores();
  const aircraftPhotoStore = useAircraftPhotoStore();

  const [countdown, setCountdown] = useState(30);

  // initiate sms login mutation
  const initiateSmsLoginMutation = useMutation({
    mutationFn: () => api.auth.initiateSmsLogin(phoneNumber, smsOptIn),
    onMutate: () => {
      setShowSpinner(true);
    },
    onError: (error) => {
      console.error(error);
    },
    onSettled: () => {
      setShowSpinner(false);
    },
  });

  // initiate email login mutation
  const initiateEmailLoginMutation = useMutation({
    mutationFn: () => api.auth.initiateEmailLogin(email, emailOptIn),
    onMutate: () => {
      setShowSpinner(true);
    },
    onError: (error) => {
      console.error(error);
    },
    onSettled: () => {
      setShowSpinner(false);
    },
  });

  //
  const userQuery = useQuery({
    queryKey: ["user"],
    queryFn: me,
    enabled: false,
    onSuccess: ({ result: response }) => {
      userStore.setProfile(response);

      aircraftPhotoStore.getAircraftPhotos();
    },
    onError: (error) => {
      setOtpError(error.response.data);
    },
    onSettled: () => {
      setShowSpinner(false);
    },
  });

  // Confirm login mutation
  const confirmLoginMutation = useMutation({
    mutationFn: ({ challengeCode }) => api.auth.verifySmsLogin(phoneNumber, challengeCode),
    onMutate: () => {
      setOtpError(undefined);
      setShowSpinner(true);
    },
    onSuccess: (data) => {
      const { accessToken } = data;
      authStore.setAccessToken(accessToken);
      api.registerAccessToken(accessToken);

      userQuery.refetch();
      queryClient.invalidateQueries("user");
    },
    onError: (error) => {
      setOtpError(error.response.headers["x-exit-description"]);
      setShowSpinner(false);
    },
  });

  const resendCode = () => {
    setCountdown(30); // Reset the countdown

    if (phoneNumber) {
      initiateSmsLoginMutation.mutate();
    } else {
      initiateEmailLoginMutation.mutate();
    }
  };

  useEffect(() => {
    if (otp.length === 6) {
      confirmLoginMutation.mutate({ phoneNumber, challengeCode: otp });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [otp]);

  // eslint-disable-next-line consistent-return
  useEffect(() => {
    // Only start the countdown if countdown is not 0
    if (countdown > 0) {
      // Create a new timer that runs every second
      const timer = setInterval(() => {
        setCountdown(countdown - 1);
      }, 1000);

      // Clear the timer when the component is unmounted or countdown changes
      return () => clearInterval(timer);
    }
  }, [countdown]);

  return (
    <ScreenContainer
      hasSafeArea
      hasTopSafeArea
      scrollable={false}
      style={{
        backgroundColor: colors.palette.cloud,
      }}
    >
      {!showSpinner ? null : (
        <View style={styles.spinner}>
          <ActivityIndicator
            style={styles.activityIndicator}
            animating
            color={colors.palette.midnight}
            hidesWhenStopped
            size="large"
          />
        </View>
      )}
      <View style={styles.container}>
        <View style={styles.header}>
          <BackButton onPress={() => navigation.goBack()} />
          <Image style={styles.logo} resizeMode="cover" source={Images.Wordmark} />
        </View>
        <View style={styles.content}>
          <Text style={styles.inputLabel}>Enter authorization code</Text>
          <CodeField
            ref={ref}
            {...props}
            value={otp}
            cellCount={6}
            rootStyle={styles.codeFieldRoot}
            onChangeText={setOtp}
            keyboardType="number-pad"
            textContentType="oneTimeCode"
            renderCell={({ index, symbol, isFocused }) => (
              <Text
                key={index}
                style={[styles.cell, isFocused && styles.focusCell, otpError && styles.errorCell]}
                onLayout={getCellOnLayoutHandler(index)}
              >
                {symbol || (isFocused ? <Cursor /> : null)}
              </Text>
            )}
          />
          {otpError && <Text style={styles.errorText}>{otpError}</Text>}
        </View>
        <View style={styles.footer}>
          <Text style={styles.noCodeLabel}>Didn&apos;t receive a code?</Text>
          <Button
            style={[styles.resendButton, countdown > 0 && styles.resendButtonDisabled]}
            variant="text"
            theme={countdown > 0 ? "disabled" : "regular"}
            title={countdown > 0 ? `Resend Code in ${countdown}s` : "Resend Code"}
            disabled={countdown > 0}
            onPress={resendCode}
          />
          <Text style={styles.description}>
            By creating an account, you accept our{"\n"}Terms & Conditions. Please read our Privacy
            Policy.


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Auth/AuthChoiceScreen.js

import React from "react";
import {
  Image,
  StyleSheet,
  TouchableOpacity,
  useWindowDimensions,
  View,
} from "react-native";

import { ScreenContainer } from "@draftbit/ui";
import { AntDesign } from "@expo/vector-icons";

import { Text } from "../../components";
import Images from "../../config/Images";
import { colors, spacing } from "../../themes";

function AuthChoiceScreen(props) {
  const { navigation } = props;
  const layout = useWindowDimensions();

  return (
    <ScreenContainer
      hasSafeArea
      scrollable={false}
      style={{
        backgroundColor: colors.palette.cloud,
      }}
    >
      <View style={styles.container}>
        <View style={styles.header}>
          <Image
            style={styles.logo}
            resizeMode="cover"
            source={Images.Wordmark}
          />
        </View>
        <View style={styles.content}>
          <Text style={styles.selectionlabel}>Sign In or Register By</Text>
          <TouchableOpacity
            onPress={() => navigation.navigate("SMSLoginScreen")}
          >
            <View
              style={[
                styles.signInOptionView,
                {
                  borderTopLeftRadius: 6,
                  borderTopRightRadius: 6,
                },
              ]}
            >
              <View style={styles.signInOptionIconView}>
                <AntDesign
                  name="message1"
                  size={24}
                  color={colors.palette.bodyText}
                />
              </View>
              <View style={styles.signInOptionTextContainer}>
                <Text style={styles.signInOptionLabel}>Phone</Text>
                <Text style={styles.signInOptionDescription}>
                  You will receive a one-time passcode from Volato. One message
                  per request. Message and data rates may apply.
                </Text>
              </View>
              <View style={styles.signInOptionArrowView}>
                <AntDesign
                  name="right"
                  size={24}
                  color={colors.palette.midnight}
                />
              </View>
            </View>
          </TouchableOpacity>
          <TouchableOpacity
            onPress={() => navigation.navigate("EmailLoginScreen")}
          >
            <View
              style={[
                styles.signInOptionView,
                {
                  borderBottomLeftRadius: 6,
                  borderBottomRightRadius: 6,
                },
              ]}
            >
              <View style={styles.signInOptionIconView}>
                <AntDesign
                  name="mail"
                  size={24}
                  color={colors.palette.bodyText}
                />
              </View>
              <View style={styles.signInOptionTextContainer}>
                <Text style={styles.signInOptionLabel}>Email</Text>
                <Text style={styles.signInOptionDescription}>
                  We will send you a one-time passcode to your email to verify
                  your identity. One message per request.
                </Text>
              </View>
              <View style={styles.signInOptionArrowView}>
                <AntDesign
                  name="right"
                  size={24}
                  color={colors.palette.midnight}
                />
              </View>
            </View>
          </TouchableOpacity>
        </View>
        <View
          style={
            layout.height >= 700 ? styles.footer : styles.smallDeviceFooter
          }
        >
          <Text
            style={
              layout.height >= 700
                ? styles.description
                : styles.smallDeviceDescription
            }
          >
            By creating an account, you accept our{"\n"}Terms & Conditions.
            Please read our Privacy Policy.
          </Text>
        </View>
      </View>
    </ScreenContainer>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "space-between",
    backgroundColor: colors.palette.cloud,
  },
  footer: {
    flex: 1,
    justifyContent: "flex-end",
    marginBottom: 32,
  },
  header: {
    alignItems: "center",
    justifyContent: "flex-end",
    height: 230,
  },
  content: {
    marginVertical: 48,
  },
  selectionlabel: {
    color: colors.palette.midnight,
    fontSize: 14,
    lineHeight: 18,
    marginBottom: 10,
    textAlign: "center",
  },
  signInOptionArrowView: {
    height: "100%",
    justifyContent: "center",
  },
  signInOptionDescription: {
    color: colors.palette.bodyText,
    fontSize: 10,
    lineHeight: 14,
    textAlign: "left",
  },
  signInOptionIconView: {
    height: "100%",
    justifyContent: "flex-start",
  },
  signInOptionLabel: {
    color: colors.palette.midnight,
    fontSize: 16,
    lineHeight: 24,
    textAlign: "left",
  },
  signInOptionTextContainer: {
    flexShrink: 1,
    height: "100%",
    justifyContent: "flex-start",
    paddingHorizontal: 10,
  },
  signInOptionView: {
    backgroundColor: colors.palette.darkCloud,
    flexDirection: "row",
    height: 90,
    marginHorizontal: 32,
    marginVertical: 2,
    paddingHorizontal: 8,
    paddingVertical: 16,
  },
  description: {
    color: colors.palette.sky,
    fontSize: 11,
    lineHeight: 14,
    marginTop: 30,
    textAlign: "center",
  },
  logo: {
    height: 48,


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Auth/SMSLoginScreen.js

import React, { useState } from "react";
import {
  Image,
  Linking,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  useWindowDimensions,
  View,
} from "react-native";

import { ScreenContainer } from "@draftbit/ui";
import { yupResolver } from "@hookform/resolvers/yup";
import { useMutation } from "@tanstack/react-query";
import { parsePhoneNumberFromString } from "libphonenumber-js";
import { Controller, useForm } from "react-hook-form";
import { KeyboardAwareScrollView } from "react-native-keyboard-aware-scroll-view";
import * as yup from "yup";
import "yup-phone";

import { api } from "../../apis/VolatoMobileAPIApi";
import { BackButton, Button, Text, Toggle } from "../../components";
import { NetworkErrorModal, useModalAction } from "../../components/Modals";
import ServerErrorModal from "../../components/Screens/Reserve/ServerErrorModal";
import Images from "../../config/Images";
import { colors, spacing } from "../../themes";
import { modalViews } from "../../utils";

const phoneSchema = yup.object({
  phone: yup.string().required(),
});

function SMSLoginScreen(props) {
  const layout = useWindowDimensions();
  const { navigation } = props;
  const [isSelected, setIsSelected] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const { openModal, closeModal } = useModalAction();

  const phoneDefaultValues = {
    phone: "",
  };

  // initiate login mutation
  const initiateLoginMutation = useMutation({
    mutationFn: (phoneNumber) => api.auth.initiateSmsLogin(phoneNumber, isSelected),
    onMutate: () => {
      setIsLoading(true);
    },
    onSuccess: (data, variables) => {
      // navigate to OTP screen
      navigation.navigate("ConfirmOTPScreen", {
        phoneNumber: variables,
        smsOptIn: isSelected,
      });
    },
    onError: (error) => {
      openModal(modalViews.NETWORK_ERROR, {
        text: error.response.data,
        title: "Authentication Error",
        onClose: closeModal,
      });
    },
    onSettled: () => {
      setIsLoading(false);
    },
  });

  const { handleSubmit, control, formState } = useForm({
    resolver: yupResolver(phoneSchema),
    defaultValues: phoneDefaultValues,
  });

  const onInitiateLogin = async (data) => {
    if (data.phone && data.phone !== "" && !data.phone.startsWith("+1")) {
      data.phone = `+1${data.phone}`;
    }

    initiateLoginMutation.mutate(data.phone);
  };

  return (
    <>
      <ScreenContainer
        hasSafeArea
        scrollable={false}
        style={{
          backgroundColor: colors.palette.cloud,
        }}
      >
        <KeyboardAwareScrollView
          contentContainerStyle={styles.contentContainer}
          keyboardShouldPersistTaps="handled"
          extraScrollHeight={layout.height / 3} // You can adjust this value as needed
        >
          <View style={styles.header}>
            <BackButton onPress={() => navigation.goBack()} />
            <Image style={styles.logo} resizeMode="cover" source={Images.Wordmark} />
          </View>
          <View style={styles.content}>
            <Text style={styles.inputLabel}>Enter your phone number</Text>
            <Controller
              control={control}
              name="phone"
              render={({ field: { onBlur, onChange, value } }) => (
                <View style={styles.inputContainer}>
                  {formState.errors.phone && (
                    <Text style={styles.inputErrorText}>{formState.errors.phone.message}</Text>
                  )}
                  <View
                    style={formState.errors.phone ? styles.inputWrapperError : styles.inputWrapper}
                  >
                    <View style={styles.phoneCountryCode}>
                      <Text style={styles.phoneCountryCodeText}>+1</Text>
                    </View>
                    <TextInput
                      style={styles.customInput}
                      value={
                        parsePhoneNumberFromString(value, "US")
                          ? parsePhoneNumberFromString(value, "US").formatNational()
                          : value
                      }
                      onBlur={onBlur}
                      onChangeText={onChange}
                      placeholder="000 000 0000"
                      keyboardType="phone-pad"
                      textContentType="telephoneNumber"
                      allowFontScaling={false}
                      status={formState.errors.phone ? "error" : undefined}
                      returnKeyType="done"
                    />
                  </View>
                  <View style={styles.smsToggleContainer}>
                    <Toggle
                      variant="checkbox"
                      inputInnerStyle={styles.checkBoxInnerStyle}
                      inputOuterStyle={styles.checkBoxOuterStyle}
                      inputDetailStyle={styles.checkStyle}
                      onValueChange={setIsSelected}
                      value={isSelected}
                    />
                    <Text style={styles.smsToggleLabelContainer}>
                      <Text
                        style={styles.smsToggleHeader}
                        suppressHighlighting
                        onPress={() => setIsSelected(!isSelected)}
                      >
                        I would like to receive SMS messages from the Volato Mobile app to this
                        number.
                      </Text>
                      {"\n"}
                      <Text
                        style={styles.smsToggleText}
                        suppressHighlighting
                        onPress={() => setIsSelected(!isSelected)}
                      >
                        Messages include, but are not limited to, alerts about upcoming flight
                        reservations, daily deals, aircraft notifications, and more. The quantity of
                        messages will vary based on application activity but should not exceed
                        15msg/day. Text “STOP” to opt-out.
                      </Text>
                    </Text>
                  </View>
                  <View style={styles.buttonView}>
                    <Button
                      variant="contained"
                      theme={isLoading || !isSelected ? "disabled" : "halloween"}
                      style={styles.loginButton}
                      title={isLoading ? "Loading..." : "Get Started"}
                      disabled={isLoading || !isSelected}
                      onPress={handleSubmit(onInitiateLogin)}
                    />
                  </View>
                </View>
              )}
            />
          </View>
          <View style={styles.footer}>
            <View style={styles.footerLinksView}>
              <TouchableOpacity
                onPress={() => Linking.openURL("https://flyvaunt.com/home/privacy-policy/sms-tos/")}
              >
                <Text style={styles.about}>SMS Terms</Text>
              </TouchableOpacity>
              <Text style={styles.aboutNonLink}>&nbsp;&&nbsp;</Text>
              <TouchableOpacity
                onPress={() => Linking.openURL("https://flyvaunt.com/home/privacy-policy/")}
              >
                <Text style={styles.about}>Privacy Policy</Text>
              </TouchableOpacity>
            </View>
            <Text style={styles.description}>
              By creating an account, you accept our{"\n"}Terms & Conditions. Please read our
              Privacy Policy.
            </Text>
          </View>
        </KeyboardAwareScrollView>
      </ScreenContainer>
      {/* <NetworkErrorModal
        isErrorOpen={isErrorOpen}


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Deals/Partnerships.js

import { ActivityIndicator, RefreshControl, StyleSheet, View } from "react-native";

import { BlurView } from "expo-blur";
import { FlatList } from "react-native-gesture-handler";

import { Button, Text } from "../../components";
import EmptyActivityImage from "../../components/Images/EmptyActivityImage";
import { ListCard } from "../../components/ListCard";
import { colors } from "../../themes";
import { getPhotoUrl } from "../../utils/photo";
import { screens } from "../../utils/screens";

export function Partnerships({ navigation, data, fetchPartners, refreshing, loading }) {
  return loading || !data ? (
    <View style={styles.spinner}>
      <ActivityIndicator
        style={styles.activityIndicator}
        animating
        color={colors.palette.midnight}
        hidesWhenStopped
        size="large"
      />
    </View>
  ) : data.length > 0 ? (
    <View style={styles.scrollView}>
      <FlatList
        contentContainerStyle={{ paddingBottom: 40 }}
        renderItem={({ item }) => <Partner item={item} navigation={navigation} />}
        data={data}
        keyExtractor={(item, index) => index}
        numColumns={1}
        onEndReachedThreshold={0.5}
        showsHorizontalScrollIndicator={false}
        showsVerticalScrollIndicator={false}
        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={fetchPartners} />}
      />
    </View>
  ) : (
    <EmptyList />
  );
}

function Partner({ item, navigation }) {
  const handleViewMore = () => {
    navigation.navigate(screens.PartnershipDetailScreen, {
      partnership: item,
    });
  };

  const topContent = (
    <View style={styles.topContentContainer}>
      <BlurView
        style={{ ...styles.topContentBlur, ...styles.topInnerContainer }}
        intensity={10}
        tint="dark"
      >
        <Text style={styles.topText}>{item.advertisingpartnercategory_id.label}</Text>
      </BlurView>
    </View>
  );

  const viewButton = (
    <View>
      <Button
        style={styles.viewButton}
        variant="contained"
        title="View More"
        onPress={handleViewMore}
      />
    </View>
  );

  const footer = (
    <View>
      <Text style={styles.footerHeaderText}>{item.label}</Text>
      <Text style={styles.footerText}>{item.callout}</Text>
    </View>
  );

  return (
    <ListCard
      midContent={viewButton}
      footerContent={footer}
      topContent={topContent}
      bgImage={getPhotoUrl(item.teaserImageUuid)}
      cardTopStyle={{ paddingHorizontal: 16 }}
      cardStyle={{ marginTop: 10, marginBottom: 10, height: 200 }}
    />
  );
}

function EmptyList({ message, subMessage }) {
  const mainText = message || "There are no partners currently.";
  const subText = subMessage || "Partnerships and benefits will appear here.";

  return (
    <View style={styles.emptyList}>
      <EmptyActivityImage />
      <Text style={[styles.emptyListNote, styles.emptyListNoteHeader]}>{mainText}</Text>
      <Text style={styles.emptyListNote}>{subText}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  scrollView: {
    paddingHorizontal: 12,
  },
  viewButton: {
    blurRadius: 1,
    width: 110,
    backgroundColor: "rgba(255, 255, 255, 0.65)",
    color: colors.palette.midnight,
  },
  topContentBlur: {
    backgroundColor: "rgba(50,50,50,0.5)",
  },
  topContentContainer: {
    alignItems: "flex-end",
  },
  topInnerContainer: {
    borderRadius: 6,
    overflow: "hidden",
  },
  topText: {
    color: "white",
    fontSize: 10,
    lineHeight: 14,
    fontWeight: "400",

    paddingVertical: 4,
    paddingHorizontal: 8,
  },
  footerText: { fontSize: 10, color: "white" },
  footerHeaderText: { color: "white", fontSize: 16, fontWeight: "400", marginBottom: 5 },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Deals/VolatoGo.js

import {
  FlatList,
  Image,
  RefreshControl,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from "react-native";

import { useNavigation } from "@react-navigation/native";

import Images from "../../config/Images";
import { volatoGoZoneOptions, zones } from "../../data/volato-zones.data";
import { colors, spacing } from "../../themes";
import { screens } from "../../utils/screens";

export function VolatoGo() {
  return (
    <View style={styles.scrollView}>
      <FlatList
        renderItem={({ item }) => <VolatoGoItem item={item} />}
        data={zones}
        keyExtractor={(item, index) => index}
        numColumns={1}
        onEndReachedThreshold={0.5}
        showsHorizontalScrollIndicator
        showsVerticalScrollIndicator={false}
        // refreshControl={<RefreshControl />}
        contentContainerStyle={{ paddingBottom: 80 }}
      />
    </View>
  );
}

function VolatoGoItem({ item }) {
  const navigation = useNavigation();
  const showZoneDetails = (data) => () => {
    navigation.navigate({ name: screens.ZoneDetailsScreen, params: { ...data } });
  };
  return (
    <TouchableOpacity
      style={styles.goItem}
      onPress={showZoneDetails({ zone: item, options: volatoGoZoneOptions[item.zone] })}
    >
      <View style={styles.goMapContainer}>
        <Image source={item.image} style={styles.goOptionMap} resizeMode="cover" />
      </View>
      <View style={styles.goItemContentContainer}>
        <View style={styles.goItemHeaderContainer}>
          <Text style={styles.goHeaderText}>{item.title}</Text>
          <Text style={styles.goHeaderSubText}>{item.city} </Text>
        </View>
        <View>
          {volatoGoZoneOptions[item.zone].slice(0, 4).map((option, idx) => (
            <View style={styles.goOption} key={`option-${idx}`}>
              <Text style={styles.optionCodeText}>{option?.from}</Text>
              <Image source={Images.BiDirection} />
              <Text style={styles.optionCodeText}>{option?.to}</Text>
              <Text style={styles.optionCodeText}>{option?.price}</Text>
            </View>
          ))}
        </View>
      </View>
    </TouchableOpacity>
  );
}

const styles = StyleSheet.create({
  goItem: {
    backgroundColor: colors.palette.white,
    borderRadius: 16,
    marginBottom: 10,
    marginTop: 10,
    flexDirection: "row",
    height: 185,
  },
  goMapContainer: {
    borderTopLeftRadius: 16,
    borderBottomLeftRadius: 16,
    // height: "100%",
  },
  goItemContentContainer: {
    padding: 20,
    borderTopRightRadius: 16,
    borderBottomRightRadius: 16,
  },
  goOption: {
    flexDirection: "row",
    marginBottom: spacing.tiny,
    color: colors.palette.midnight,
    fontWeight: "400",
    gap: 10,
  },
  goHeaderSubText: {
    color: colors.palette.bodyText,
    fontSize: 10,
  },
  goOptionMap: {
    height: 185,
    width: 165,
    borderTopLeftRadius: 16,
    borderBottomLeftRadius: 16,
  },
  goItemHeaderContainer: { marginBottom: spacing.large },
  goHeaderText: {
    fontWeight: "400",
    color: colors.palette.midnight,
    fontSize: 16,
    marginBottom: spacing.micro,
  },
  optionCodeText: {
    color: colors.palette.midnight,
    fontSize: 12,
  },
  scrollView: {
    // alignItems: "stretch",
    paddingHorizontal: 12,
    // height: "100%",
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Deals/ZoneDetailsScreen.js

/* eslint-disable react/style-prop-object */
import { useEffect, useState } from "react";
import {
  ActivityIndicator,
  FlatList,
  Image,
  StyleSheet,
  Text,
  TouchableOpacity,
  useWindowDimensions,
  View,
} from "react-native";

import { useNavigation } from "@react-navigation/native";
import { useMutation, useQuery } from "@tanstack/react-query";
import { addMonths } from "date-fns";
import { StatusBar } from "expo-status-bar";

import { api } from "../../apis/VolatoMobileAPIApi";
import { GradientBackground } from "../../components/GradientBackground";
import { useModalAction } from "../../components/Modals";
import Images from "../../config/Images";
import { colors } from "../../themes";
import { modalViews } from "../../utils";
import { formatDate } from "../../utils/formatDate";
import { queries } from "../../utils/queries";

function LoadingIndicator() {
  const dimensions = useWindowDimensions();

  return (
    <View style={[styles.loader, { height: dimensions.height - 360, width: dimensions.width }]}>
      <ActivityIndicator
        style={styles.activityIndicator}
        animating
        color={colors.palette.midBlack}
        hidesWhenStopped
        size="large"
      />
    </View>
  );
}

export default function ZoneDetailsScreen({ route, navigation }) {
  const { options, zone } = route.params;
  const { goBack, navigate } = useNavigation();
  const dimensions = useWindowDimensions();
  const [zonePrices, setZonePrices] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [availableExtremeDates, setAvailableExtremeDates] = useState({});
  const [validMonths, setValidMonths] = useState([]);
  const { openModal, closeModal } = useModalAction();
  const getDatesQuery = useQuery({
    queryKey: queries.getDates,
    queryFn: async () => api.getDates.get(),
    enabled: false,
    onSuccess: (data) => {
      setAvailableExtremeDates({
        ...availableExtremeDates,
        startDate: data[0]?.date?.split("-"),
        endDate: data.slice(-1)[0]?.date?.split("-"),
      });

      if (!data[0]) return;
      const years = [];
      const months = [];
      data.forEach((dt) => {
        const dateSplitted = dt?.date?.split("-");
        if (!years.includes(dateSplitted[0] * 1)) years.push(dateSplitted[0] * 1);
        if (!months.includes(dateSplitted[1] * 1)) months.push(dateSplitted[1] * 1);
      });

      const theDate = new Date(years[0], months[0], 0);
      const theDates_ = [
        {
          month: theDate.getMonth() + 1,
          year: theDate.getFullYear(),
        },
      ];
      let monthDelta = 1;
      // eslint-disable-next-line no-constant-condition
      while (true) {
        const newDate = addMonths(theDate, monthDelta);
        if (
          newDate.getMonth() + 1 > months.slice(-1)[0] &&
          newDate.getFullYear() >= years.slice(-1)[0]
        )
          break;
        monthDelta += 1;
        theDates_.push({
          month: newDate.getMonth() + 1,
          year: newDate.getFullYear(),
        });
      }
      setValidMonths(theDates_);
    },
    onError: () => {},
    onSettled: () => {
      // setIsLoading(false);
    },
  });
  const startDate = new Date();
  const queryDates = [
    startDate,
    addMonths(startDate, 1),
    addMonths(startDate, 2),
    addMonths(startDate, 3),
  ].map((date) => formatDate(date.toISOString(), "yyyy-MM-dd"));
  const bookAFlight = (data) => {
    navigate("ReserveNavigator", {
      screen: "ReserveScreen",
      params: { booking: data },
    });
  };
  const openCalender = (option) => () => {
    const title = `${option?.fromLabel} -> ${option?.toLabel}`;
    openModal(modalViews.SELECT_DATE, {
      title,
      queryDates,
      type: "depart",
      validMonths,
      availableExtremeDates,
      departAirportId: option?.fromAirport_id,
      arrivalAirportId: option?.toAirport_id,
      index: 0,
      onClose: closeModal,
      onSelect: (date) => {
        bookAFlight({ date: `${date}`, option });
        closeModal();
      },
    });
  };

  const getPrices = useMutation({
    mutationFn: (values) => api.zoneDaysPrices.post(values),
    onSuccess: (data) => {
      setZonePrices(data?.data);
    },
    onError: (error) => {
      console.log(error.response);
    },
    onSettled: () => {
      setIsLoading(false);
    },
  });
  useEffect(() => {
    getPrices.mutate({
      rate_id: 12,
      routes: options,
      days: 7,
    });
    getDatesQuery.refetch();
  }, []); //eslint-disable-line
  return (
    <View style={[styles.container]} hasSafeArea scrollable={false}>
      <StatusBar style="light" />
      <View style={{ width: dimensions.width, height: 250 }}>
        <GradientBackground
          sourceType="local"
          image={zone.imageMax || zone.image}
          backgroundStyle={{ borderRadius: 0, borderWidth: 0, marginVertical: 0 }}
        />
        <View style={styles.header}>
          <TouchableOpacity onPress={goBack}>
            <Image source={Images.BackArrowWhite} />
          </TouchableOpacity>
          <Text style={{ color: colors.palette.white, fontSize: 22 }}>{zone.title}</Text>
        </View>
      </View>
      {isLoading ? (
        <LoadingIndicator />
      ) : (
        <FlatList
          contentContainerStyle={{ padding: 20, paddingBottom: 300 }}
          data={zonePrices}
          showsVerticalScrollIndicator={false}
          renderItem={({ item }) => (
            <View style={styles.optionContainer}>
              <View>
                <Text style={styles.text}>From</Text>
                <Text style={styles.text}>To</Text>
                <Text style={styles.text}>Capped price</Text>
                <View>
                  <Text style={styles.text}>Price range</Text>
                  <Text style={{ ...styles.text, ...styles.priceRange }}>Next 7 days</Text>
                </View>
              </View>
              <View>
                <Text style={styles.text}>{item.fromLabel}</Text>
                <Text style={styles.text}>{item.toLabel}</Text>
                <Text style={styles.text}>{item.price}</Text>
                <View style={{ flexDirection: "row", flex: 1, width: "100%" }}>
                  <View style={{ width: 170 }}>
                    <Text style={styles.text}>
                      {new Intl.NumberFormat("en-US", {
                        style: "currency",
                        currency: "USD",
                      }).format(item?.lowPrice)}
                      {" - "}
                      {new Intl.NumberFormat("en-US", {


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Deals/DealsScreen.js

import React, { useEffect, useMemo, useState } from "react";
import {
  ActivityIndicator,
  FlatList,
  Image,
  ImageBackground,
  Platform,
  RefreshControl,
  StyleSheet,
  useWindowDimensions,
  View,
} from "react-native";

import { LinearGradient, ScreenContainer } from "@draftbit/ui";
import { useMutation, useQuery } from "@tanstack/react-query";
import { BlurView } from "expo-blur";
import { setStatusBarStyle, StatusBar } from "expo-status-bar";
import { TouchableOpacity } from "react-native-gesture-handler";
import Animated, { FadeInLeft, FadeOutRight } from "react-native-reanimated";
import { TabView } from "react-native-tab-view";

import { Partnerships } from "./Partnerships";
import { VolatoGo } from "./VolatoGo";
import { inquireDeals } from "../../apis/dailydeals-api";
import { Button, Text } from "../../components";
import Passenger from "../../components/Icons/Passenger";
import EmptyActivityImage from "../../components/Images/EmptyActivityImage";
import { useModalAction } from "../../components/Modals/ModalContext";
import Images from "../../config/Images";
import { useStores } from "../../models/root";
import { colors, spacing } from "../../themes";
import { formatDate } from "../../utils/formatDate";
import { truncateText } from "../../utils/formatText";
import { modalViews } from "../../utils/modalViews";
import { queries } from "../../utils/queries";

const tabs = [
  { title: "Deals", label: "Daily Deals", key: "dailyDeals" },
  { title: "Partnerships", label: "Our Partners", key: "partners" },
  { title: "Volato Go", label: "Volato Go", key: "volatoGo" },
];

function DealsScreen({ navigation }) {
  const layout = useWindowDimensions();
  const [refreshing, setRefreshing] = useState(false);
  const [activeTab, setActiveTab] = useState(0);
  const dimensions = useWindowDimensions();
  const {
    dealsStore: { getDailyDeals, deals: dailyDeals },
    partnerStore: { getPartners, partners: advertisingPartners },
  } = useStores();
  const setTab = (idx) => () => {
    setActiveTab(idx);
  };

  // daily deals query
  const dailyDealsQuery = useQuery({
    queryKey: queries.dailyDeals,
    queryFn: getDailyDeals,
    enabled: false,
    onError: (error) => {},
    onSettled: () => {
      setRefreshing(false);
    },
  });

  // partnerships query
  const partnersQuery = useQuery({
    queryKey: queries.advertisingPartners,
    queryFn: getPartners,
    enabled: false,
    onError: (error) => {},
    onSettled: () => {
      setRefreshing(false);
    },
  });

  function fetchDeals() {
    setRefreshing(true);
    dailyDealsQuery.refetch();
  }

  function fetchPartners() {
    setRefreshing(true);
    partnersQuery.refetch();
  }

  useEffect(() => {
    const unsubscribe = navigation.addListener("focus", () => {
      fetchDeals();
      fetchPartners();
      setStatusBarStyle("light");
    });

    return unsubscribe;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [navigation]);

  function renderTabBar() {
    return (
      <View style={[styles.tabsContainer]}>
        {tabs.map((tab, idx) => (
          <TouchableOpacity
            key={`tab-${idx}`}
            onPress={setTab(idx)}
            style={[
              styles.tab,
              idx === activeTab && styles.tabActive,
              {
                width: (dimensions.width - spacing.medium * 2) / 3,
              },
            ]}
          >
            <Text style={[styles.tabText, idx === activeTab && styles.tabTextActive]}>
              {tab.title}
            </Text>
          </TouchableOpacity>
        ))}
      </View>
    );
  }

  function renderScene({ route }) {
    switch (route.key) {
      case "dailyDeals":
        return (
          <Deals
            navigation={navigation}
            data={dailyDeals}
            fetchDeals={fetchDeals}
            refreshing={refreshing}
            loading={dailyDealsQuery.isLoading}
          />
        );
      case "partners":
        return (
          <Partnerships
            navigation={navigation}
            data={advertisingPartners}
            fetchPartners={fetchPartners}
            refreshing={refreshing}
            loading={partnersQuery.isLoading}
          />
        );
      case "volatoGo":
        return <VolatoGo />;
      default:
        return null;
    }
  }

  return (
    <Animated.View
      entering={FadeInLeft.duration(400)}
      exiting={FadeOutRight.duration(400)}
      style={styles.animatedContainer}
    >
      <ScreenContainer style={styles.container} scrollable={false}>
        <View style={styles.navHeader}>
          <Image source={Images.HondaJetElite} style={styles.navHeaderImage} resizeMode="contain" />
        </View>
        <TabView
          navigationState={{ index: activeTab, routes: tabs }}
          renderScene={renderScene}
          onIndexChange={setActiveTab}
          initialLayout={{ width: layout.width }}
          renderTabBar={renderTabBar}
          swipeEnabled={false}
          style={styles.tabView}
        />
      </ScreenContainer>
    </Animated.View>
  );
}

function Deals({ data, fetchDeals, refreshing, loading }) {
  const [isLoading, setIsLoading] = useState(false);
  return loading || !data ? (
    <View style={styles.spinner}>
      <ActivityIndicator
        style={styles.activityIndicator}
        animating
        color={colors.palette.midnight}
        hidesWhenStopped
        size="large"
      />
      {isLoading && <LoadingIndicator />}
    </View>
  ) : data.length > 0 ? (
    <View style={styles.scrollView}>
      <FlatList
        contentContainerStyle={{ paddingBottom: 40 }}
        renderItem={({ item }) => (
          <DealListItem item={item} setIsLoading={setIsLoading} isLoading={isLoading} />
        )}
        data={data}
        keyExtractor={(item, index) => index}
        numColumns={1}
        onEndReachedThreshold={0.5}
        showsHorizontalScrollIndicator


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Deals/RedeemBenefitsScreen.js

import React, { useState } from "react";
import { Linking, StyleSheet, Text, useWindowDimensions, View } from "react-native";

import { LinearGradient, ScreenContainer } from "@draftbit/ui";
import { useMutation } from "@tanstack/react-query";

import { createChat, sendChatMessage } from "../../apis/chat-api";
import { Button } from "../../components";
import { GradientBackground } from "../../components/GradientBackground";
import { useModalAction } from "../../components/Modals";
import { colors } from "../../themes";
import { modalViews } from "../../utils";
import { getPhotoUrl } from "../../utils/photo";
import { queries } from "../../utils/queries";

function PartnershipDetailScreen(props) {
  const layout = useWindowDimensions();
  const { navigation, route } = props;
  const { partnership } = route.params;
  const [caseId, setCaseId] = useState(null);

  const { openModal, closeModal } = useModalAction();

  const { mutate: createNewChat } = useMutation({
    mutationKey: queries.chat.create,
    mutationFn: () => createChat(undefined, undefined, partnership?.id),
    onSuccess: (response) => {
      setCaseId(response?.chat?.id);
      sendMessage({
        id: response?.chat?.id,
        msg: `I am inquiring about redeeming my benefit from ${partnership.label} company with partnership id of ${partnership.id}`,
      });
    },
    onError: (error) => {
      console.log(error);
    },
  });
  const { mutate: sendMessage } = useMutation({
    mutationKey: queries.chat.send(caseId),
    mutationFn: ({ id, msg }) => sendChatMessage(id, msg),
    onSuccess: (data) => {},
    onError: (error) => {
      console.log(error);
    },
  });

  const handleYes = () => {
    if (partnership?.redemptionUrl) {
      Linking.openURL(partnership.redemptionUrl);
    } else {
      startConversationWithECTeam();
    }
  };

  const startConversationWithECTeam = () => {
    createNewChat();
    openModal(modalViews.REDEEM_GO_BENEFITS, {
      partner: partnership,
      closeModal,
      navigate: navigation.navigate,
    });
  };

  return (
    <ScreenContainer style={styles.container} scrollable={false}>
      <GradientBackground
        image={getPhotoUrl(partnership?.teaserImageUuid)}
        backgroundStyle={{
          borderWidth: 0,
          marginVertical: 0,
        }}
      />
      <View style={styles.footerContainer}>
        <LinearGradient
          style={styles.tripCardOverlayGradient}
          color1={colors.palette.midBlack}
          color2={colors.palette.blackAlpha}
          endX={0}
          startX={0}
          endY={-20}
          startY={200}
        />
        <View style={styles.footerInnerContainer}>
          <Text style={styles.footerText1}>Do you want to redeem your benefits?</Text>
          <Text style={styles.footerText2}>
            {partnership.redemptionUrl
              ? "You will be redirected to the partner's website to redeem your benefits."
              : "We will start a conversation with our concierge team to help you redeem your benefits."}
          </Text>
        </View>

        <View style={styles.footerControls}>
          <Button variant="contained" theme="halloween" title="Yes, please." onPress={handleYes} />
          <Button
            variant="contained"
            // theme="halloween"
            title="Cancel"
            onPress={navigation.goBack}
          />
        </View>
      </View>
    </ScreenContainer>
  );
}

const styles = StyleSheet.create({
  backButton: {
    marginRight: 16,
  },

  container: {
    backgroundColor: colors.palette.white,
    justifyContent: "space-between",
  },
  contentContainer: {
    backgroundColor: colors.palette.white,
    marginTop: 20,
  },
  tripCardOverlayGradient: {
    height: "100%",
    width: "100%",
    opacity: 0.7,
    position: "absolute",
  },

  footerContainer: {
    justifyContent: "center",
    position: "absolute",
    bottom: 0,
    width: "100%",
  },
  footerText1: {
    fontSize: 22,
    color: colors.palette.white,
    textAlign: "center",
    marginBottom: 30,
  },
  footerText2: { textAlign: "center", color: colors.palette.white, fontSize: 16 },
  footerInnerContainer: {
    paddingHorizontal: 30,
    paddingVertical: 50,
  },
  headerBackground: {
    height: 220,
    overflow: "hidden",
    marginBottom: 0,
  },
  headerContainer: {
    marginTop: 40,
    marginLeft: 16,
  },

  footerControls: {
    backgroundColor: colors.palette.cloud,
    justifyContent: "center",
    paddingHorizontal: 16,

    width: "100%",
    paddingVertical: 20,
    gap: 10,
  },
});

export default PartnershipDetailScreen;


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Deals/PartnershipDetailScreen.js

import React, { useEffect, useState } from "react";
import {
  Image,
  ImageBackground,
  Linking,
  ScrollView,
  StyleSheet,
  Text,
  TouchableOpacity,
  useWindowDimensions,
  View,
} from "react-native";

import { Icon, ScreenContainer } from "@draftbit/ui";
import { RenderHTML } from "react-native-render-html";

import { Button } from "../../components";
import Images from "../../config/Images";
import { useStores } from "../../models/root";
import { colors } from "../../themes";
import { getPhotoUrl } from "../../utils/photo";
import { screens } from "../../utils/screens";

function PartnershipDetailScreen(props) {
  const layout = useWindowDimensions();
  const { navigation, route } = props;
  const { partnership } = route.params;
  const { userStore } = useStores();
  const { depositAccounts, ownership } = userStore;

  const redeemOffer = () => {
    navigation.navigate(screens.RedeemBenefitsScreen, { partnership });
  };
  const chatWithConciergeTeam = () => {
    navigation.navigate(screens.ChatScreen, { title: "Chat with Concierge Team" });
  };
  const isInsiderOrowner = depositAccounts?.length > 0 || ownership?.length > 0;

  return (
    <ScreenContainer style={styles.container} scrollable={false}>
      <ImageBackground
        source={{ uri: getPhotoUrl(partnership?.teaserImageUuid) }}
        resizeMode="cover"
        style={styles.headerBackground}
      >
        <View style={styles.headerContainer}>
          <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
            <Image source={Images.LeftArrowBlur} />
          </TouchableOpacity>
        </View>
      </ImageBackground>
      <View style={styles.logoView}>
        <Image
          source={{ uri: getPhotoUrl(partnership?.logoUuid) }}
          resizeMode="center"
          width={244}
          height={62}
        />
      </View>
      <ScrollView style={styles.contentContainer}>
        <View style={styles.textContainer}>
          <Text style={styles.title}>{partnership?.label}</Text>
          <Text style={styles.categoryText}>
            {partnership?.advertisingpartnercategory_id.label}
          </Text>
          <Text style={styles.descriptionText}>{partnership?.shortDescription}</Text>
        </View>
        {partnership?.url && (
          <TouchableOpacity
            onPress={() => {
              if (partnership?.url) {
                Linking.openURL(partnership.url);
              }
            }}
            style={styles.websiteContainer}
          >
            <Icon
              name="MaterialCommunityIcons/open-in-new"
              size={24}
              color={colors.palette.midnight}
            />
            <Text style={styles.websiteText}>Visit Website</Text>
          </TouchableOpacity>
        )}
        <View style={styles.benefitsContainer}>
          <Text style={styles.benefitsTitle}>Benefits</Text>
          {isInsiderOrowner ? (
            <RenderHTML
              source={{ html: partnership?.longDescription }}
              style={styles.benefitsText}
              contentWidth={layout.width}
              tagsStyles={{
                p: { color: colors.palette.midnight },
                ul: { color: colors.palette.bodyText },
              }}
            />
          ) : (
            <View style={styles.nonInsiderBenefitsContainer}>
              <Text style={styles.nonInsiderBenefitsTextHeader}>
                Not a Volato Fractional Owner or Volato Insider Member?s
              </Text>
              <Text style={styles.nonInsiderBenefitsText}>
                To enjoy the Sterling Pacific benefits or to become a member, click on the button
                below.
              </Text>
            </View>
          )}
        </View>
      </ScrollView>

      {isInsiderOrowner ? (
        <View style={styles.footerContainer}>
          {partnership?.redemptionUrl ? (
            <Button
              variant="contained"
              theme="halloween"
              title="Redeem Offer"
              onPress={redeemOffer}
            />
          ) : (
            <Button
              variant="contained"
              theme="halloween"
              title="Redeem Offer"
              onPress={redeemOffer}
            />
          )}
        </View>
      ) : (
        <View style={styles.footerContainer}>
          <Button
            variant="contained"
            theme="halloween"
            title="Chat with Concierge Team"
            onPress={chatWithConciergeTeam}
          />
        </View>
      )}
    </ScreenContainer>
  );
}

const styles = StyleSheet.create({
  backButton: {
    marginRight: 16,
  },
  benefitsContainer: {
    borderTopColor: colors.palette.fieldsShadow,
    borderTopWidth: 1,
    marginTop: 20,
    marginHorizontal: 16,
  },
  benefitsText: {
    color: colors.palette.bodyText,
    fontSize: 14,
    lineHeight: 18,
    marginTop: 4,
  },
  benefitsTitle: {
    color: colors.palette.midnight,
    fontSize: 16,
    lineHeight: 24,
    marginTop: 20,
  },
  categoryText: {
    color: colors.palette.midnight,
    fontSize: 14,
    lineHeight: 18,
    marginBottom: 20,
  },
  container: {
    backgroundColor: colors.palette.white,
    justifyContent: "space-between",
  },
  contentContainer: {
    backgroundColor: colors.palette.white,
    marginTop: 20,
  },
  descriptionText: {
    color: colors.palette.bodyText,
    fontSize: 14,
    lineHeight: 18,
  },
  footerContainer: {
    backgroundColor: colors.palette.cloud,
    justifyContent: "center",
    height: 74,
    paddingHorizontal: 16,
  },
  headerBackground: {
    height: 220,
    overflow: "hidden",
    marginBottom: 0,
  },
  headerContainer: {
    marginTop: 40,
    marginLeft: 16,
  },
  logoView: {
    alignItems: "center",


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Profile/AuthorizedUsersScreen.js

import React, { useState } from "react";
import { ActivityIndicator, StyleSheet, TouchableOpacity, View } from "react-native";

import { IconButton, ScreenContainer } from "@draftbit/ui";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";

import ProfileHeader from "./ProfileHeader";
import { Button, Text } from "../../components";
import EmptyAuthorizedUsersImage from "../../components/Images/EmptyAuthorizedUsersImage";
import { useStores } from "../../models/root";
import { colors } from "../../themes/colors";
import { queries } from "../../utils/queries";

function EmptyAuthorizedUsers() {
  return (
    <View style={styles.emptyPassengers}>
      <EmptyAuthorizedUsersImage />
      <Text style={[styles.emptyPassengersNote, styles.emptyPassengersNoteHeader]}>
        There are no Authorized Users added.
      </Text>
      <Text style={styles.emptyPassengersNote}>Click on “+ New User” to get started.</Text>
    </View>
  );
}

function AuthorizedUsersScreen(props) {
  const [menuVisible, setMenuVisible] = useState({});
  const [loading, setLoading] = useState(false);
  const queryClient = useQueryClient();

  const { navigation } = props;

  const { authorizedUserStore } = useStores();

  const getAuthorizedUsersQuery = useQuery({
    queryKey: queries.authorizedUsers,
    queryFn: authorizedUserStore.getAuthorizedUsers,
  });

  const deleteAuthorizedUserMutation = useMutation({
    mutationFn: authorizedUserStore.deleteAuthorizedUser,
    onMutate: () => {
      setLoading(true);
    },
    onSuccess: () => {
      queryClient.invalidateQueries(queries.authorizedUsers);
    },
    onSettled: () => {
      setLoading(false);
    },
  });

  const handleEditAuthorizedUser = (item) => () => {
    // KK: Commented this out because it doesn't work; we need to think about this implementation
    // navigation.navigate("AddAuthorizedUsersScreen", {
    //   item,
    // });
  };
  const handleDeleteAuthorizedUser = (id) => () => {
    deleteAuthorizedUserMutation.mutate(id);
  };

  const renderItem = (item) => (
    <View style={styles.passengerItem} key={item.id}>
      <TouchableOpacity
        style={styles.passengerItemContent}
        onPress={handleEditAuthorizedUser(item)}
      >
        <Text style={styles.passengerName}>{`${item?.firstName} ${item?.lastName}`}</Text>
        <Text style={styles.passengerExtraInfo}>{item?.email}</Text>
        <Text style={styles.passengerExtraInfo}>{item?.phone}</Text>
      </TouchableOpacity>
      <IconButton
        onPress={handleDeleteAuthorizedUser(item.id)}
        color={colors.palette.midnight}
        icon="MaterialCommunityIcons/delete"
        size={25}
      />
      {/* <Menu
        contentStyle={styles.passengerItemMenu}
        visible={menuVisible[item.id]}
        onDismiss={() => setMenuVisible({})}
        anchor={
          <IconButton
            onPress={() => setMenuVisible({ [item.id]: true })}
            color={colors.palette.midnight}
            icon="MaterialCommunityIcons/dots-vertical"
            size={32}
          />
        }
      >
        <Menu.Item
          onPress={handleDeleteAuthorizedUser(item.id)}
          leadingIcon="delete"
          title="Delete"
        />
      </Menu> */}
    </View>
  );
  return (
    <ScreenContainer style={styles.container} hasSafeArea scrollable={false}>
      <ProfileHeader title="Authorized Users" />

      <View style={styles.content}>
        <View style={styles.header}>
          {/* <Button
            style={styles.passengersButton}
            title="Import from Contacts"
          /> */}
          <Button
            style={styles.passengersButton}
            variant="contained"
            theme="halloween"
            title="+ New User"
            onPress={() => {
              navigation.navigate("AddAuthorizedUsersScreen");
            }}
          />
        </View>
        {getAuthorizedUsersQuery.isLoading || loading ? (
          <View style={styles.spinner}>
            <ActivityIndicator
              animating
              color={colors.palette.midnight}
              hidesWhenStopped
              size="large"
            />
          </View>
        ) : null}
        {authorizedUserStore.authorizedUsers.length > 0 ? (
          <>{authorizedUserStore.authorizedUsers.map((user) => renderItem(user))}</>
        ) : (
          <EmptyAuthorizedUsers />
        )}
      </View>
    </ScreenContainer>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.palette.cloud,
  },
  spinner: {
    alignItems: "center",
    backgroundColor: colors.palette.midnightAlpha,
    bottom: 0,
    justifyContent: "center",
    left: 0,
    position: "absolute",
    right: 0,
    top: 0,
    zIndex: 9999,
  },
  header: {
    flexDirection: "row",
    justifyContent: "flex-end",
    borderBottomWidth: 1,
    borderBottomColor: colors.palette.darkCloud,
    paddingBottom: 16,
  },
  content: {
    flex: 1,
  },
  tabView: {
    flex: 1,
  },
  tabBar: {
    height: 35,
    flexDirection: "row",
  },
  tabBarItem: {
    flex: 1,
    alignItems: "center",
    borderBottomWidth: 1,
    borderBottomColor: colors.border,
  },
  tabBarItemActive: {
    borderBottomWidth: 3,
    borderBottomColor: colors.palette.green,
  },
  tabBarItemText: {
    fontSize: 14,
    lineHeight: 18,
    color: colors.palette.bodyText,
  },
  tabBarItemTextActive: {
    color: colors.palette.midnight,
  },
  passengers: {
    flex: 1,
    paddingHorizontal: 16,
  },
  passengersHeader: {
    flexDirection: "row",
    marginVertical: 16,
  },
  passengersButton: {
    // flex: 1,


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Profile/OwnershipActivity.js

import React from "react";
import { StyleSheet } from "react-native";

import { ScreenContainer } from "@draftbit/ui";

import ProfileHeader from "./ProfileHeader";
import AircraftStats from "../../components/Screens/Profile/AircraftStats";
import { colors } from "../../themes/colors";

function OwnershipActivityScreen(props) {
  const { aircraft_id: aircraftId } = props.route.params.ownership;

  return (
    <ScreenContainer style={styles.container} hasTopSafeArea hasBottomSafeArea scrollable>
      <ProfileHeader title="Activity" />
      <AircraftStats aircraftId={aircraftId} />
    </ScreenContainer>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: colors.palette.cloud,
    padding: 16,
  },
});

export default OwnershipActivityScreen;


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Profile/ProfileDetailsScreen.js

import { useEffect } from "react";
import { FlatList, StyleSheet, TouchableOpacity } from "react-native";

import { ScreenContainer } from "@draftbit/ui";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useNavigation } from "@react-navigation/native";
import { setStatusBarStyle, StatusBar } from "expo-status-bar";

import ProfileHeader from "./ProfileHeader";
import { api } from "../../apis/VolatoMobileAPIApi";
import { Text } from "../../components";
import ChevronRight from "../../components/Icons/ChevronRight";
import { useModalAction } from "../../components/Modals";
import { useStores } from "../../models/root";
import { colors } from "../../themes";

const menus = [
  {
    title: "Authorized Users",
    route: "AuthorizedUsersScreen",
  },
  {
    title: "Family / Friends / Pets",
    route: "FamilyFriendsPetsScreen",
  },
  // {
  //   title: "Special Requests",
  //   route: "SpecialRequests",
  // },
  // {
  //   title: "Carbon Offsets",
  //   route: "CarbonOffsets",
  // },
];

const logoutMenu = [
  {
    title: "Log out",
    route: "LogOut",
  },
];

function ProfileDetailsScreen() {
  const navigation = useNavigation();
  const {
    authStore,
    userStore,
    partnerStore,
    authorizedUserStore,
    cateringStore,
    dealsStore,
    fboSearchStore,
    ocCaseStore,
    passengerStore,
    petStore,
  } = useStores();
  const { openModal, closeModal } = useModalAction();

  const renderItem = ({ item }) => {
    const isLogout = item.route === "LogOut";

    return (
      <TouchableOpacity
        style={styles.menuItem}
        onPress={isLogout ? confirmLogout : handleNavigate(item.route)}
      >
        <Text style={isLogout ? [styles.menuItemText, styles.logoutText] : styles.menuItemText}>
          {item.title}
        </Text>
        <ChevronRight />
      </TouchableOpacity>
    );
  };

  const handleNavigate = (path) => () => {
    navigation.navigate(path);

    // navigation.navigate("AccountNavigator", {
    //   screen: "SettingsMenu",
    //   params: {
    //     screen: path,
    //   },
    // });
  };

  const handleLogout = async () => {
    closeModal();
    try {
      await AsyncStorage.clear();
      authStore.clearAccessToken();
      userStore.clearUser();
      api.removeAccessToken();

      // Clear all stores
      partnerStore.clear();
      authorizedUserStore.clear();
      cateringStore.clear();
      dealsStore.clear();
      fboSearchStore.clear();
      ocCaseStore.clear();
      passengerStore.clear();
      petStore.clear();

      // navigate to root default screen and clear navigation history without transition
      // navigation.navigate("LandingNavigator", {
      //   screen: "LandingPageScreen",
      // });
    } catch (error) {
      console.error("Error clearing local data:", error);
    }
  };

  const confirmLogout = () => {
    openModal("LOGOUT", {
      onCancel: closeModal,
      onConfirm: handleLogout,
    });
  };

  useEffect(() => {
    const unsubscribe = navigation.addListener("focus", () => {
      setStatusBarStyle("dark");
    });

    return unsubscribe;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [navigation]);

  return (
    <ScreenContainer style={styles.container} hasSafeArea scrollable={false}>
      <ProfileHeader title="Settings" />
      <FlatList data={[...menus, ...logoutMenu]} renderItem={renderItem} />
    </ScreenContainer>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: colors.palette.cloud,
  },
  menuItem: {
    marginHorizontal: 15,
    paddingVertical: 12,
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    borderBottomWidth: 1,
    borderColor: colors.palette.darkCloud,
  },
  menuItemText: {
    fontSize: 16,
    lineHeight: 24,
    color: colors.palette.midnight,
  },
  logoutText: {
    color: colors.palette.red,
  },
});

export default ProfileDetailsScreen;


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Profile/ProfileHeader.js

import { Platform, StyleSheet, TouchableOpacity, View } from "react-native";

import { useNavigation } from "@react-navigation/native";

import { Text } from "../../components";
import ArrowLeft from "../../components/Icons/ArrowLeft";
import { colors } from "../../themes";

function ProfileHeader({ title, hasNavigation = true }) {
  const navigation = useNavigation();

  return (
    <View style={styles.container}>
      {hasNavigation ? (
        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
          <ArrowLeft />
        </TouchableOpacity>
      ) : null}
      <Text style={styles.headerText}>{title}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flexDirection: "row",
    paddingHorizontal: 12,
    marginBottom: 20,
    marginTop: Platform.OS === "android" ? 15 : 0,
  },
  backButton: {
    marginRight: 16,
  },
  headerText: {
    fontSize: 22,
    lineHeight: 28,
    color: colors.palette.midnight,
  },
});

export default ProfileHeader;


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Profile/AircraftBragScreen.js

import React from "react";
import { StyleSheet, TouchableOpacity, View } from "react-native";

import { Icon, ScreenContainer } from "@draftbit/ui";
import WebView from "react-native-webview";

import { colors } from "../../themes";

function AircraftBragScreen(props) {
  const { navigation, route } = props;
  const { tail } = route.params;

  return (
    <ScreenContainer
      style={styles.container}
      hasSafeArea={false}
      scrollable={false}
    >
      <View style={styles.header}>
        <TouchableOpacity
          onPress={() => {
            try {
              navigation.goBack();
            } catch (err) {
              console.error(err);
            }
          }}
        >
          <View>
            <Icon name="Entypo/chevron-thin-left" size={24} />
          </View>
        </TouchableOpacity>
      </View>
      <WebView
        style={styles.webView}
        cacheEnabled={false}
        javaScriptEnabled
        mediaPlaybackRequiresUserAction={false}
        showsHorizontalScrollIndicator={false}
        showsVerticalScrollIndicator={false}
        allowsInlineMediaPlayback
        allowsFullscreenVideo
        source={{
          uri: `https://flights.flyvolato.com/brag?tail=${tail}`,
        }}
      />
    </ScreenContainer>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: colors.palette.cloud,
  },
  header: {
    alignItems: "center",
    flexDirection: "row",
    height: 48,
    left: 16,
    position: "absolute",
    right: 0,
    top: 32,
    zIndex: 9999,
  },
  webView: {
    flex: 1,
    height: "100%",
    width: "100%",
  },
});

export default AircraftBragScreen;


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Profile/DepositAccountActivity.js

import React, { useEffect } from "react";
import { ActivityIndicator, FlatList, StyleSheet, View } from "react-native";

import { ScreenContainer } from "@draftbit/ui";
import { useQuery } from "@tanstack/react-query";

import ProfileHeader from "./ProfileHeader";
import { api } from "../../apis/VolatoMobileAPIApi";
import { Button, Text } from "../../components";
import { useAccount } from "../../contexts/AccountContext";
import { colors } from "../../themes";
import { formatDate } from "../../utils/formatDate";

const getTransactionTypeStyle = (isFutureTransaction, isDebit) => {
  if (isFutureTransaction) {
    return styles.activityItemTypeUpcoming;
  }
  return isDebit ? styles.activityItemTypeDebit : styles.activityItemTypeCredit;
};

const getTransactionTypeTextStyle = (isDebit) =>
  isDebit ? styles.activityItemTypeDebitText : styles.activityItemTypeCreditText;

function DepositAccountActivityScreen({ navigation, route }) {
  const formatter = new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  });

  const { depositAccounts, getInsiderAccounts, isLoading, error } = useAccount();
  // route.params.depositAccount is provided by #AccountContext
  const { transactions, balance, availableBalance } = route.params.depositAccount;

  useEffect(() => {
    getInsiderAccounts();
  }, [getInsiderAccounts]);

  if (isLoading) {
    return (
      <ScreenContainer style={styles.container} hasTopSafeArea>
        <ProfileHeader title="Activity" />
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={colors.palette.primary} />
          <Text style={styles.loadingText}>Loading account data...</Text>
        </View>
      </ScreenContainer>
    );
  }

  // Updated error handling
  if (error) {
    return (
      <ScreenContainer style={styles.container} hasTopSafeArea>
        <ProfileHeader title="Activity" />
        <View style={styles.errorContainer}>
          <Text style={styles.errorText}>
            {error.message || "An error occurred. Please try again later."}
          </Text>
          <Button
            title="Try Again"
            onPress={() => getInsiderAccounts()}
            style={styles.retryButton}
          />
        </View>
      </ScreenContainer>
    );
  }

  // Updated check for no transactions
  if (!transactions || transactions.length === 0) {
    return (
      <ScreenContainer style={styles.container} hasTopSafeArea>
        <ProfileHeader title="Activity" />
        <View style={styles.noTransactionsContainer}>
          <Text style={styles.noTransactionsText}>No transactions to display.</Text>
        </View>
      </ScreenContainer>
    );
  }

  const renderItem = ({ item, index }) => {
    const lastIndex = transactions.length - 1;
    const isFutureTransaction = new Date(item.transactionDate) > new Date();

    return (
      <View style={styles.activityItem}>
        <View style={styles.activityItemLink}>
          {index !== 0 ? (
            <View style={[styles.activityItemLine, styles.activityItemLineTop]} />
          ) : null}
          <View style={styles.activityItemDot} />
          {index !== lastIndex ? (
            <View style={[styles.activityItemLine, styles.activityItemLineBottom]} />
          ) : null}
        </View>
        <View style={styles.activityItemContent}>
          <View style={styles.activityItemRow}>
            <Text style={styles.activityItemDate}>{formatDate(item.transactionDate)}</Text>
            <View style={getTransactionTypeStyle(isFutureTransaction, item.isDebit)}>
              <Text style={getTransactionTypeTextStyle(item.isDebit)}>
                {isFutureTransaction ? "UPCOMING" : item.isDebit ? "DEBIT" : "CREDIT"}
              </Text>
            </View>
          </View>
          <View style={[styles.activityItemRow, { marginTop: 7 }]}>
            <Text
              style={[
                styles.activityItemLabel,
                {
                  maxWidth: "70%",
                },
              ]}
            >
              {item.label}
            </Text>
            <Text style={styles.activityItemLabel}>{formatter.format(item.amount)}</Text>
          </View>
        </View>
      </View>
    );
  };

  return (
    <ScreenContainer style={styles.container} hasTopSafeArea scrollable={false}>
      <ProfileHeader title="Activity" />
      <View style={styles.balanceContainer}>
        <View style={styles.balanceItem}>
          <Text style={styles.balanceHeader}>Deposit Balance:</Text>
          <Text style={styles.balanceAmount}>{formatter.format(balance)}</Text>
        </View>
        <View style={styles.balanceItem}>
          <Text style={styles.balanceHeader}>Available Balance:</Text>
          <Text style={styles.balanceAmount}>{formatter.format(availableBalance)}</Text>
        </View>
      </View>
      <View style={styles.activityView}>
        <View style={styles.activityViewHeader}>
          <Text style={styles.activityViewHeaderText}>Activity</Text>
        </View>
        {transactions.length > 0 ? (
          <FlatList
            data={transactions}
            renderItem={renderItem}
            keyExtractor={(item, index) => `${item.id}-${index}`}
          />
        ) : (
          <Text style={styles.noTransactionsText}>No transactions to display.</Text>
        )}
      </View>
    </ScreenContainer>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: colors.palette.cloud,
  },
  separator: {
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: colors.palette.lightGray,
    height: 100,
  },
  balanceContainer: {
    flexDirection: "row",
    justifyContent: "space-around",
  },
  balanceItem: {
    alignItems: "center",
    flexDirection: "column",
    justifyContent: "flex-end",
    padding: 16,
  },
  button: {},
  balanceHeader: {
    color: colors.palette.midnight,
    textAlign: "center",
    fontSize: 11,
    lineHeight: 15,
  },
  balanceAmount: {
    color: colors.palette.midnight,
    textAlign: "center",
    fontSize: 22,
    lineHeight: 28,
  },
  activityView: {
    flex: 1,
    backgroundColor: colors.palette.white,
    marginHorizontal: 16,
    marginTop: 16,
    borderTopLeftRadius: 16,
    borderTopRightRadius: 16,
  },
  activityViewHeader: {
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: colors.palette.lightGray,
  },
  activityViewHeaderText: {


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Profile/AddAuthorizedUserScreen.js

import { useEffect, useState } from "react";
import { ActivityIndicator, StyleSheet, View } from "react-native";

import { ScreenContainer } from "@draftbit/ui";
import { yupResolver } from "@hookform/resolvers/yup";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import parsePhoneNumberFromString from "libphonenumber-js";
import { Controller, useForm } from "react-hook-form";
import { KeyboardAwareScrollView } from "react-native-keyboard-aware-scroll-view";
import * as yup from "yup";
import "yup-phone";

import ProfileHeader from "./ProfileHeader";
import { Button, PhoneInput, Text, TextInput, Toggle } from "../../components";
import { useStores } from "../../models/root";
import { colors } from "../../themes";
import { queries } from "../../utils/queries";

const schema = yup.object({
  firstName: yup.string().required("First Name is Required"),
  lastName: yup.string().required("Last Name is Required"),
  companyName: yup.string(),
  phoneNumber: yup.string().required("Phone Number is Required"),
  email: yup.string().required("Email is required"),
});

function AddAuthorizedUserScreen({ navigation, route }) {
  const queryClient = useQueryClient();
  const [loading, setLoading] = useState(false);
  const [isBookingAuthorized, setIsBookingAuthorized] = useState(false);
  const [isPricingAuthorized, setIsPricingAuthorized] = useState(false);
  const [isInformationAuthorized, setIsInformationAuthorized] = useState(false);
  const activeRelation = route.params?.item;
  const activeAuthorizedUser = activeRelation?.contact_id2;
  const defaultValues = {
    firstName: activeAuthorizedUser?.firstName ?? "",
    lastName: activeAuthorizedUser?.lastName ?? "",
    companyName: activeAuthorizedUser?.companyName ?? "",
    phoneNumber: activeAuthorizedUser?.phone ?? "",
    email: activeAuthorizedUser?.email ?? "",
  };
  const isEditing = !!activeRelation;

  const {
    control,
    handleSubmit,
    formState: { errors },
  } = useForm({
    defaultValues,
    resolver: yupResolver(schema),
  });

  useEffect(() => {
    if (activeRelation) {
      setIsBookingAuthorized(activeRelation.canBook);
      setIsInformationAuthorized(activeRelation.canReleaseInfo);
    }
  }, [activeRelation]);

  const { authorizedUserStore } = useStores();

  const createAuthorizedUserMutation = useMutation({
    mutationFn: (values) => {
      if (activeAuthorizedUser) {
        return authorizedUserStore.updateAuthorizedUser(activeAuthorizedUser.id, values);
      }
      return authorizedUserStore.createAuthorizedUser(values);
    },
    onMutate: () => {
      setLoading(true);
    },
    onSuccess: async () => {
      await queryClient.invalidateQueries(queries.authorizedUsers);
      navigation.goBack();
    },
    onError: (error) => {
      console.log(error);
    },
    onSettled: () => {
      setLoading(false);
    },
  });

  const handleAddAuthorizedUser = (values) => {
    values.isBookingAuthorized = isBookingAuthorized;
    values.isPricingAuthorized = isPricingAuthorized;
    values.isInformationAuthorized = isInformationAuthorized;
    createAuthorizedUserMutation.mutate(values);
  };

  return (
    <ScreenContainer style={styles.container} hasTopSafeArea scrollable={false}>
      {loading ? (
        <View style={styles.spinner}>
          <ActivityIndicator
            animating
            color={colors.palette.midnight}
            hidesWhenStopped
            size="large"
          />
        </View>
      ) : null}
      <ProfileHeader
        hasNavigation={false}
        title={isEditing ? "Edit Authorized User" : "New Authorized User"}
      />
      <KeyboardAwareScrollView style={styles.content}>
        <Text style={styles.formSectionHeader}>CONTACT INFORMATION</Text>
        <Controller
          control={control}
          name="firstName"
          render={({ field: { onChange, onBlur, value } }) => (
            <TextInput
              onChangeText={onChange}
              onBlur={onBlur}
              value={value}
              label="First Name"
              disabled={isEditing}
              error={errors.firstName}
              errorText={errors.firstName?.message}
            />
          )}
        />
        <Controller
          control={control}
          name="lastName"
          render={({ field: { onChange, onBlur, value } }) => (
            <TextInput
              onChangeText={onChange}
              onBlur={onBlur}
              value={value}
              label="Last Name"
              disabled={isEditing}
              error={errors.lastName}
              errorText={errors.lastName?.message}
            />
          )}
        />
        <Controller
          control={control}
          name="companyName"
          render={({ field: { onChange, onBlur, value } }) => (
            <TextInput
              onChangeText={onChange}
              onBlur={onBlur}
              value={value}
              label="Company Name"
              disabled={isEditing}
              error={errors.companyName}
              errorText={errors.companyName?.message}
            />
          )}
        />
        <Controller
          control={control}
          name="phoneNumber"
          render={({ field: { onBlur, onChange, value } }) => (
            <PhoneInput
              style={{
                borderWidth: 0,
                backgroundColor: colors.transparent,
                marginTop: 10,
                width: "100%",
              }}
              value={
                parsePhoneNumberFromString(value, "US")
                  ? parsePhoneNumberFromString(value, "US").formatNational()
                  : value
              }
              onBlur={onBlur}
              onChangeText={onChange}
              label="Phone Number"
              placeholder="000 000 0000"
              textContentType="telephoneNumber"
              disabled={isEditing}
              error={errors.phoneNumber}
              errorText={errors.phoneNumber?.message}
              returnKeyType="done"
            />
          )}
        />
        <Controller
          control={control}
          name="email"
          render={({ field: { onChange, onBlur, value } }) => (
            <TextInput
              onChangeText={onChange}
              onBlur={onBlur}
              value={value}
              label="Email Address"
              placeholder="example@email.com"
              disabled={isEditing}
              error={errors.email}
              errorText={errors.email?.message}
            />
          )}
        />
        <Text>Permissions</Text>
        <View style={styles.checkRow}>
          <Toggle


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Profile/FamilyFriendsPetsScreen.js

import React, { useEffect, useState } from "react";
import {
  ActivityIndicator,
  RefreshControl,
  StyleSheet,
  TouchableOpacity,
  View,
} from "react-native";

import { IconButton, ScreenContainer } from "@draftbit/ui";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { StatusBar } from "expo-status-bar";
import { parsePhoneNumberFromString } from "libphonenumber-js";
import { FlatList } from "react-native-gesture-handler";
import { Menu } from "react-native-paper";
import { TabView } from "react-native-tab-view";

import ProfileHeader from "./ProfileHeader";
import { Button, Text, UserAvatar } from "../../components";
import EmptyPassengersImage from "../../components/Images/EmptyPassengersImage";
import EmptyPetsImage from "../../components/Images/EmptyPetsImage";
import { useStores } from "../../models/root";
import { colors } from "../../themes";
import { queries } from "../../utils/queries";

const routes = [
  {
    key: "passengers",
    title: "Passengers",
  },
  {
    key: "pets",
    title: "Pets",
  },
];

function EmptyPassengers() {
  return (
    <View style={styles.emptyPassengers}>
      <EmptyPassengersImage />
      <Text style={[styles.emptyPassengersNote, styles.emptyPassengersNoteHeader]}>
        There are no Passengers added.
      </Text>
      <Text style={styles.emptyPassengersNote}>Click on “+ New Passenger” to get started.</Text>
    </View>
  );
}

function EmptyPets() {
  return (
    <View style={styles.emptyPassengers}>
      <EmptyPetsImage />
      <Text style={[styles.emptyPassengersNote, styles.emptyPassengersNoteHeader]}>
        There are no pets added
      </Text>
      <Text style={styles.emptyPassengersNote}>Click on “+ New Pet” to get started</Text>
    </View>
  );
}

function Passengers({ navigation }) {
  const [menuVisible, setMenuVisible] = useState({});
  const [loading, setLoading] = useState(false);
  const [refreshing, setRefreshing] = useState(false);
  const { passengerStore } = useStores();
  const { hasPassengers, getPassengers } = passengerStore;

  // get passengers query
  const getPassengersQuery = useQuery({
    queryKey: queries.passengers,
    queryFn: getPassengers,
    onSettled: () => {
      setRefreshing(false);
    },
  });

  const handleAddPassenger = () => {
    navigation.navigate("AddPassengerScreen");
  };

  const handleEditPassenger = (passenger) => () => {
    navigation.navigate("AddPassengerScreen", { id: passenger });
  };

  function fetchPassengers() {
    setRefreshing(true);
    getPassengersQuery.refetch();
  }

  const deletePassengerMutation = useMutation({
    mutationFn: (id) => passengerStore.deletePassenger(id),
    onSuccess: async () => {
      fetchPassengers();
    },
    onError: (error) => {
      console.log(error);
    },
  });

  const handleDeletePassenger = (id) => () => {
    setMenuVisible({});
    deletePassengerMutation.mutate(id);
  };

  useEffect(() => {
    const unsubscribe = navigation.addListener("focus", () => {
      fetchPassengers();
    });

    return unsubscribe;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const renderItem = ({ item }) => (
    <View style={styles.passengerItem}>
      <UserAvatar
        containerStyle={styles.passengerItemAvatar}
        name={item.label}
        size={42}
        url={item?.photo_uuid}
      />
      <TouchableOpacity style={styles.passengerItemContent} onPress={handleEditPassenger(item.id)}>
        <Text style={styles.passengerName}>{item.label}</Text>
        {item.email ? <Text style={styles.passengerExtraInfo}>{item.email}</Text> : null}
        {item.phone ? (
          <Text style={styles.passengerExtraInfo}>
            {parsePhoneNumberFromString(item.phone, "US").formatNational()}
          </Text>
        ) : null}
        {/* <Text style={styles.passengerExtraInfo}>
            {item.phone} / {item.weight} {item.weightUoM || "lbs"}
          </Text> */}
      </TouchableOpacity>
      <IconButton
        onPress={handleDeletePassenger(item.id)}
        color={colors.palette.midnight}
        icon="MaterialCommunityIcons/delete"
        size={25}
      />
      {/* <Menu
        contentStyle={styles.passengerItemMenu}
        visible={menuVisible[item.id]}
        onDismiss={() => setMenuVisible({})}
        anchor={
          <IconButton
            onPress={() => setMenuVisible({ [item.id]: true })}
            color={colors.palette.midnight}
            icon="MaterialCommunityIcons/dots-vertical"
            size={32}
          />
        }
      >
        <Menu.Item onPress={handleDeletePassenger(item.id)} leadingIcon="delete" title="Delete" />
      </Menu> */}
    </View>
  );

  return (
    <View style={styles.passengers}>
      <View style={styles.passengersHeader}>
        {/* <Button style={styles.passengersButton} title="Import from Contacts" /> */}
        <Button
          style={styles.passengersButton}
          variant="contained"
          theme="halloween"
          title="+ New Contact"
          onPress={handleAddPassenger}
        />
      </View>
      {getPassengersQuery.isLoading || loading ? (
        <View style={styles.spinner}>
          <ActivityIndicator
            style={styles.activityIndicator}
            animating
            color={colors.palette.midnight}
            hidesWhenStopped
            size="large"
          />
        </View>
      ) : null}
      {!hasPassengers() ? (
        <EmptyPassengers />
      ) : (
        <FlatList
          showsVerticalScrollIndicator={false}
          data={passengerStore.passengers}
          renderItem={renderItem}
          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={fetchPassengers} />}
        />
      )}
    </View>
  );
}

function Pets({ navigation }) {
  const [menuVisible, setMenuVisible] = useState({});
  const [loading, setLoading] = useState(false);
  const [refreshing, setRefreshing] = useState(false);
  const { petStore } = useStores();
  const { pets } = petStore;


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Profile/AddPassengerScreen.js

import { useEffect, useState } from "react";
import { ActivityIndicator, KeyboardAvoidingView, StyleSheet, View } from "react-native";

import { ScreenContainer } from "@draftbit/ui";
import { yupResolver } from "@hookform/resolvers/yup";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import * as ImagePicker from "expo-image-picker";
import { parsePhoneNumberFromString } from "libphonenumber-js";
import { Controller, useForm } from "react-hook-form";
import DropDownPicker from "react-native-dropdown-picker";
import * as yup from "yup";
import "yup-phone";

import ProfileHeader from "./ProfileHeader";
import {
  Button,
  DateTimePicker,
  DriverLicenseInput,
  PhoneInput,
  Text,
  TextInput,
} from "../../components";
import { useStores } from "../../models/root";
import { colors } from "../../themes";
import { extractPhotoExtension } from "../../utils/photo";

const schema = yup.object({
  firstName: yup.string().required("Your First Name is Required"),
  lastName: yup.string().required("Your Last Name is Required"),
  email: yup.string().email(),
  phoneNumber: yup
    .string()
    .nullable()
    .test("phoneNumber", "Please enter a valid US phone number.", (value) => {
      if (!value || value.length === 0) {
        return true;
      }
      return value.startsWith("+1");
    }),
  weight: yup.string().required("Your Weight is Required"),
  dateOfBirth: yup.date().required("Your Date of Birth is Required"),
  relationshipTypeId: yup.number().required("Relationship is Required"),
});

function AddPassengerScreen({ navigation, route }) {
  const [image, setImage] = useState(null);
  const [driverLicenseUrl, setDriverLicenseUrl] = useState(null);
  const [driverLicenseId, setDriverLicenseId] = useState(null);
  const queryClient = useQueryClient();
  const {
    passengerStore: {
      getPassengerById,
      updatePassenger,
      createPassenger,
      uploadDriverLicense,
      getDriverLicense,
    },
  } = useStores();
  const [loading, setLoading] = useState(false);
  const passengerId = route.params?.id;
  const activePassenger = passengerId ? getPassengerById(passengerId) : null;
  const defaultValues = {
    firstName: activePassenger?.firstName ?? "",
    lastName: activePassenger?.lastName ?? "",
    email: activePassenger?.email ?? "",
    phoneNumber: activePassenger?.phone ?? "",
    weight: activePassenger?.weight ? `${activePassenger.weight}` : "",
    dateOfBirth: activePassenger?.dob ? new Date(activePassenger.dob) : "",
    relationshipTypeId: activePassenger?.relatedTo?.[0]?.customerrelationship_type_id ?? 6,
  };
  const headerTitle = passengerId ? "Edit Passenger" : "New Passenger";
  const [showRelationshipTypeDropDown, setShowRelationshipTypeDropDown] = useState(false);
  const [relationshipTypeId, setRelationshipTypeId] = useState(defaultValues.relationshipTypeId);

  useEffect(() => {
    if (activePassenger && activePassenger.relatedTo.length > 0) {
      setRelationshipTypeId(activePassenger.relatedTo[0].customerrelationship_type_id);
    }
  }, [activePassenger]);

  const relationshipTypes = [
    { label: "Spouse", value: 3 },
    { label: "Family Member", value: 4 },
    { label: "Guest / Passenger", value: 6 },
    { label: "Admin Assistant", value: 7 },
    { label: "Pet", value: 8 },
    { label: "Client", value: 9 },
  ];

  const {
    control,
    handleSubmit,
    formState: { errors },
    getValues,
  } = useForm({
    defaultValues,
    resolver: yupResolver(schema),
  });

  const { data: dlData } = useQuery({
    queryKey: ["passenger", "driverLicense", passengerId],
    queryFn: () => {
      if (passengerId) {
        return getDriverLicense(passengerId);
      }
      return null;
    },
  });

  useEffect(() => {
    if (dlData) {
      setDriverLicenseUrl(dlData?.data?.photoBase64);
      setDriverLicenseId(dlData?.data?.id);
    }
  }, [dlData]);

  const passengerMutation = useMutation({
    mutationFn: async (values) => {
      const data = new FormData();
      const extension = extractPhotoExtension(driverLicenseUrl);
      const filename = driverLicenseUrl.split("/").pop();
      const match = /\.(\w+)$/.exec(filename);
      const type = match ? `image/${match[1]}` : `image`;

      data.append("extension", extension);
      let c;
      if (passengerId) {
        c = await updatePassenger(passengerId, values);
      } else {
        c = await createPassenger(values);
      }
      data.append("contact_id", c.id);
      if (driverLicenseId) {
        data.append("id", driverLicenseId);
      }

      data.append("image", {
        name: filename,
        type,
        uri: driverLicenseUrl.replace("file://", ""),
      });
      return uploadDriverLicense(data);
    },
    onMutate: () => {
      setLoading(true);
    },
    onSuccess: async () => {
      navigation.goBack();
    },
    onError: (error) => {
      console.log(error.response);
    },
    onSettled: () => {
      setLoading(false);
    },
  });

  const handleCancel = () => {
    navigation.goBack();
  };

  const handleAddPassenger = (values) => {
    passengerMutation.mutate(values);
  };

  const handlePickPhoto = async () => {
    // No permissions request is necessary for launching the image library
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  const handlePickDriverLicense = async () => {
    // No permissions request is necessary for launching the image library
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    if (!result.canceled) {
      setDriverLicenseUrl(result.assets[0].uri);
    }
  };

  return (
    <ScreenContainer style={styles.container} hasTopSafeArea scrollable={false}>
      {loading ? (
        <View style={styles.spinner}>
          <ActivityIndicator
            style={styles.activityIndicator}
            animating


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Profile/AddPetScreen.js

import { useEffect, useState } from "react";
import { ActivityIndicator, KeyboardAvoidingView, StyleSheet, View } from "react-native";

import { ScreenContainer } from "@draftbit/ui";
import { yupResolver } from "@hookform/resolvers/yup";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import * as ImagePicker from "expo-image-picker";
import { Controller, useForm } from "react-hook-form";
import DropDownPicker from "react-native-dropdown-picker";
import * as yup from "yup";
import "yup-phone";

import ProfileHeader from "./ProfileHeader";
import { getPetTypes } from "../../apis/pettype-api";
import { Button, PhotoUpload, Text, TextInput } from "../../components";
import { useStores } from "../../models/root";
import { colors } from "../../themes";
import { queries } from "../../utils/queries";

const schema = yup.object({
  name: yup.string().required("Name is Required"),
  petTypeId: yup.string().required("Animal Type is Required"),
  weight: yup.string().required("Weight is Required"),
  notes: yup.string(),
});

function AddPetScreen({ navigation, route }) {
  const [image, setImage] = useState(null);
  const queryClient = useQueryClient();
  const { petStore, authStore } = useStores();
  const [loading, setLoading] = useState(false);
  const petId = route.params?.id;
  const activePet = petId ? petStore.getPetById(petId) : null;
  const defaultValues = {
    name: activePet?.label ?? "",
    petTypeId: activePet?.petType?.id ?? "",
    weight: activePet ? `${activePet.weight}` : "",
    notes: activePet?.notesOther ?? "",
  };
  const { data } = useQuery({
    queryKey: queries.petTypes,
    queryFn: () => getPetTypes(),
  });
  const [showPetTypeDropdown, setShowPetTypeDropdown] = useState(false);
  const [petType, setPetType] = useState(defaultValues.gender);
  const [petTypeOptions, setPetTypeOptions] = useState(
    (data?.petTypes || []).map((type) => ({
      ...type,
      value: type.id,
    }))
  );
  const headerTitle = petId ? "Edit Pet" : "New Pet";

  useEffect(() => {
    if (data?.petTypes) {
      setPetTypeOptions(
        (data?.petTypes || []).map((type) => ({
          ...type,
          value: type.id,
        }))
      );
    }
  }, [data]);

  useEffect(() => {
    if (activePet) {
      setPetType(activePet.petType?.id);
    }
  }, [activePet]);

  const {
    control,
    handleSubmit,
    formState: { errors },
  } = useForm({
    defaultValues,
    resolver: yupResolver(schema),
  });

  const createPetMutation = useMutation({
    mutationFn: (values) => {
      if (petId) {
        return petStore.updatePet(petId, values);
      }
      return petStore.createPet(values);
    },
    onMutate: () => {
      setLoading(true);
    },
    onSuccess: async () => {
      await queryClient.invalidateQueries(queries.pets);
      navigation.goBack();
    },
    onError: (error) => {
      console.log(error);
    },
    onSettled: () => {
      setLoading(false);
    },
  });

  const handleCancel = () => {
    navigation.goBack();
  };

  const handleAddPet = (values) => {
    values.weight = parseInt(values.weight);
    values.petTypeId = parseInt(values.petTypeId);
    createPetMutation.mutate(values);
  };

  const handlePickPhoto = async () => {
    // No permissions request is necessary for launching the image library
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  return (
    <ScreenContainer style={styles.container} hasTopSafeArea scrollable={false}>
      {loading ? (
        <View style={styles.spinner}>
          <ActivityIndicator
            animating
            color={colors.palette.midnight}
            hidesWhenStopped
            size="large"
          />
        </View>
      ) : null}
      <ProfileHeader hasNavigation={false} title={headerTitle} />
      <KeyboardAvoidingView style={styles.content}>
        {/* <PhotoUpload
          style={styles.photoUpload}
          value={image}
          onChange={handlePickPhoto}
        /> */}
        <Text style={styles.formSectionHeader}>Information</Text>
        <Controller
          control={control}
          name="name"
          render={({ field: { onChange, onBlur, value } }) => (
            <TextInput
              onChangeText={onChange}
              onBlur={onBlur}
              value={value}
              label="Name"
              error={errors.name}
              errorText={errors.name?.message}
            />
          )}
        />
        <View style={styles.row}>
          {/* <Controller
            control={control}
            name="petType"
            render={({ field: { onChange, onBlur, value } }) => (
              <TextInput
                wrapperStyle={{ flex: 1 }}
                onChangeText={onChange}
                onBlur={onBlur}
                value={value}
                label="Type of pet"
                placeholder="Dog, Cat, etc."
                error={errors.petType}
                errorText={errors.petType?.message}
              />
            )}
          /> */}
          <View style={styles.petTypeContainer}>
            <Controller
              control={control}
              name="petTypeId"
              render={({ field: { onChange } }) => (
                <DropDownPicker
                  open={showPetTypeDropdown}
                  value={petType}
                  items={petTypeOptions}
                  onChangeValue={(value) => onChange(value)}
                  setValue={setPetType}
                  setOpen={setShowPetTypeDropdown}
                  setItems={setPetTypeOptions}
                  placeholder="Type of pet"
                  style={[
                    styles.petTypePicker,
                    {
                      borderColor: errors.petTypeId ? colors.palette.nomadic : colors.border,
                    },
                  ]}
                  labelStyle={styles.petTypePickerLabel}
                  placeholderStyle={{ color: colors.palette.slate }}
                  listParentLabelStyle={styles.petTypePickerListLabel}
                />


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Profile/ActivityScreen.js

import React from "react";
import { FlatList, StyleSheet, View } from "react-native";

import { ScreenContainer } from "@draftbit/ui";

import ProfileHeader from "./ProfileHeader";
import { Text } from "../../components";
import FlightTakeoffCircle from "../../components/Icons/FlightTakeoffCircle";
import EmptyActivityImage from "../../components/Images/EmptyActivityImage";
import { useStores } from "../../models/root";
import { colors } from "../../themes/colors";
import { formatDate } from "../../utils/formatDate";

function EmptyActivities() {
  return (
    <View style={styles.emptyPassengers}>
      <EmptyActivityImage />
      <Text style={[styles.emptyPassengersNote, styles.emptyPassengersNoteHeader]}>
        There are no activity yet.
      </Text>
      <Text style={styles.emptyPassengersNote}>
        You will see your past and future flights here.
      </Text>
    </View>
  );
}

function ActivityScreen() {
  const { userStore } = useStores();
  const { flights } = userStore;

  const renderItem = ({ item, index }) => {
    const lastIndex = flights.length - 1;
    return (
      <View style={styles.activityItem}>
        <View style={styles.activityItemLink}>
          {index !== 0 ? (
            <View style={[styles.activityItemLine, styles.activityItemLineTop]} />
          ) : null}
          {index !== lastIndex ? (
            <View style={[styles.activityItemLine, styles.activityItemLineBottom]} />
          ) : null}
          <FlightTakeoffCircle />
        </View>
        <View style={styles.activityItemContent}>
          <View style={styles.activityItemRow}>
            <Text style={styles.activityItemDate}>
              {formatDate(item.departLocal, "E, MMM d, y")}
            </Text>
            {/* <Icon
              name="MaterialCommunityIcons/airplane-takeoff"
              size={24}
              color={colors.palette.green}
            /> */}
          </View>
          <View style={[styles.activityItemColumn, { marginTop: 7 }]}>
            <Text style={styles.activityItemLabel}>
              {item.departCity}({item.departIcao}) to {item.arriveCity}({item.arriveIcao})
            </Text>
            <Text style={styles.activityItemLabel}>
              {item.aircrafttype_label}: {item.tail}
            </Text>
          </View>
        </View>
      </View>
    );
  };

  return (
    <ScreenContainer style={styles.container} hasTopSafeArea scrollable={false}>
      <ProfileHeader title="Activity" />
      <View style={styles.activityView}>
        <View style={styles.activityViewHeader}>
          <Text style={styles.activityViewHeaderText}>My Flights</Text>
        </View>
        <FlatList
          data={flights}
          renderItem={renderItem}
          keyExtractor={(item, index) => `${item.id}-${index}`}
        />
      </View>
    </ScreenContainer>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: colors.palette.cloud,
  },
  buttonsRow: {
    flexDirection: "row",
    justifyContent: "flex-end",
    padding: 16,
  },
  button: {},
  balanceHeader: {
    color: colors.palette.midnight,
    textAlign: "center",
    fontSize: 11,
    lineHeight: 15,
  },
  balanceAmount: {
    color: colors.palette.midnight,
    textAlign: "center",
    fontSize: 22,
    lineHeight: 28,
  },
  activityView: {
    flex: 1,
    backgroundColor: colors.palette.white,
    marginHorizontal: 16,
    marginTop: 16,
    borderTopLeftRadius: 16,
    borderTopRightRadius: 16,
  },
  activityViewHeader: {
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: colors.palette.lightGray,
  },
  activityViewHeaderText: {
    fontSize: 14,
    color: colors.palette.midnight,
    lineHeight: 18,
    textTransform: "uppercase",
  },
  activityItem: {
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 16,
  },
  activityItemContent: {
    paddingVertical: 16,
    flex: 1,
    borderBottomWidth: 1,
    borderColor: "rgba(214, 213, 227, 0.30)",
  },
  activityItemRow: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  activityItemColumn: {},
  activityItemDate: {
    color: colors.palette.bodyText,
    fontSize: 14,
    lineHeight: 18,
  },
  activityItemType: {
    backgroundColor: colors.palette.green,
    paddingHorizontal: 8,
    paddingVertical: 3,
    borderRadius: 6,
  },
  activityItemTypeText: {
    fontSize: 10.5,
    color: colors.palette.midnight,
    lineHeight: 14,
  },
  activityItemLabel: {
    fontSize: 14,
    lineHeight: 18,
    color: colors.palette.midnight,
  },
  activityItemDot: {
    width: 14,
    aspectRatio: 1,
    borderRadius: 7,
    backgroundColor: colors.palette.sky,
  },
  activityItemLink: {
    marginRight: 10,
    position: "relative",
    alignSelf: "stretch",
    alignItems: "center",
    justifyContent: "center",
  },
  activityItemLine: {
    position: "absolute",
    width: 1,
    height: "50%",
    left: "50%",
    backgroundColor: colors.palette.sky,
  },
  activityItemLineTop: {
    top: 0,
  },
  activityItemLineBottom: {
    bottom: 0,
  },
});

export default ActivityScreen;


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Profile/BillingInformationScreen.js

import React, { useEffect, useState } from "react";
import { ActivityIndicator, Platform, StyleSheet, View } from "react-native";

import { ScreenContainer } from "@draftbit/ui";
import "yup-phone";
import { yupResolver } from "@hookform/resolvers/yup";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import * as ImagePicker from "expo-image-picker";
import { parsePhoneNumberFromString } from "libphonenumber-js";
import { Controller, useForm } from "react-hook-form";
import DropDownPicker from "react-native-dropdown-picker";
import { KeyboardAwareScrollView } from "react-native-keyboard-aware-scroll-view";
import states from "states-us";
import * as yup from "yup";

import ProfileHeader from "./ProfileHeader";
import { me } from "../../apis/auth-api";
import { Button, DriverLicenseInput, PhoneInput, PhotoUpload, TextInput } from "../../components";
import { useStores } from "../../models/root";
import { colors } from "../../themes/colors";
import { extractPhotoExtension, getPhotoUrl } from "../../utils/photo";

const stateList = states
  .filter((state) => !state.territory && state.contiguous)
  .map((state) => ({
    label: state.abbreviation,
    value: state.abbreviation,
  }));

const schema = yup.object({
  firstName: yup.string().required("Your First Name is Required"),
  lastName: yup.string().required("Your Last Name is Required"),
  label: yup.string().optional(),
  company: yup.string().optional(),
  phoneNumber: yup.string().required("Your Phone Number is Required"),
  email: yup.string().email().required("Your Email is Required"),
  address1: yup.string().required("Your Address is Required"),
  address2: yup.string().optional(),
  city: yup.string().required("Your City is Required"),
  stateprovince: yup.string().required("Your State is Required"),
  zipcode: yup.string().required("Your Zip Code is Required"),
});

function BillingInformationScreen({ navigation }) {
  const {
    userStore: { user, uploadPhoto, updateUser, setProfile },
  } = useStores();
  const [loading, setLoading] = useState(false);
  const defaultValues = {
    firstName: user.firstName ?? "",
    lastName: user.lastName ?? "",
    company: user.company?.label ?? "",
    phoneNumber: user.phone ?? "",
    email: user.email ?? "",
    address1: user.address1 ?? "",
    address2: user.address2 ?? "",
    city: user.city ?? "",
    stateprovince: user.stateprovince ?? "",
    zipcode: user.zipcode ?? "",
    label: user.label ?? "",
  };
  const [showStateDropdown, setShowStateDropdown] = useState(false);
  const [state, setState] = useState(defaultValues.stateprovince);
  const [stateOptions, setStateOptions] = useState(stateList);
  const [photoUrl, setPhotoUrl] = useState(null);
  const [driverLicenseUrl, setDriverLicenseUrl] = useState(null);

  useEffect(() => {
    if (user?.photo_uuid) {
      setPhotoUrl(getPhotoUrl(user.photo_uuid));
    }
  }, [user]);

  const {
    control,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm({
    defaultValues,
    resolver: yupResolver(schema),
  });

  useEffect(() => {
    reset(defaultValues);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [user]);

  const userQuery = useQuery({
    queryKey: ["user"],
    queryFn: me,
    enabled: false,
    onSuccess: ({ result: response }) => {
      setProfile(response);
    },
    onError: (error) => {
      console.error(error);
    },
    onSettled: () => {},
  });

  const updateUserMutation = useMutation({
    mutationFn: (values) => {
      const data = new FormData();
      const extension = extractPhotoExtension(photoUrl);
      const filename = photoUrl.split("/").pop();
      const match = /\.(\w+)$/.exec(filename);
      const type = match ? `image/${match[1]}` : `image`;

      data.append("extension", extension);
      data.append("image", {
        name: filename,
        type,
        uri: photoUrl.replace("file://", ""),
      });

      // if Android, only updateUser
      if (Platform.OS === "android") {
        return updateUser(values);
      }

      if (values.company) {
        values.company_id = user.company_id;
        delete values.company;
      }

      return uploadPhoto(data).finally(() => updateUser(values));
    },
    onMutate: () => {
      setLoading(true);
    },
    onSuccess: () => {},
    onError: (e) => {
      console.log(e);
    },
    onSettled: async () => {
      await userQuery.refetch();
      setLoading(false);

      navigation.goBack();
    },
  });

  const handleSave = (values) => {
    updateUserMutation.mutate(values);
  };

  const handlePickPhoto = async () => {
    // No permissions request is necessary for launching the image library
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    if (!result.canceled) {
      setPhotoUrl(result.assets[0].uri);
    }
  };

  const handlePickDriverLicense = async () => {
    // No permissions request is necessary for launching the image library
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    if (!result.canceled) {
      setDriverLicenseUrl(result.assets[0].uri);
    }
  };

  return (
    <ScreenContainer style={styles.container} hasSafeArea scrollable={false}>
      {loading ? (
        <View style={styles.spinner}>
          <ActivityIndicator
            animating
            color={colors.palette.midnight}
            hidesWhenStopped
            size="large"
          />
        </View>
      ) : null}
      <ProfileHeader title="Edit Profile" />
      <KeyboardAwareScrollView style={styles.content}>
        <PhotoUpload style={styles.photoUpload} value={photoUrl} onChange={handlePickPhoto} />
        <Controller
          control={control}
          name="firstName"
          render={({ field: { onChange, onBlur, value } }) => (
            <TextInput
              onChangeText={onChange}
              onBlur={onBlur}
              value={value}
              label="First Name"
              error={errors.firstName}


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/TripsAndDeals/QuoteDetailsScreen.js

import React, { useEffect, useMemo, useState } from "react";
import {
  ActivityIndicator,
  FlatList,
  Image,
  ImageBackground,
  Linking,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  useWindowDimensions,
  View,
} from "react-native";

import { Icon, IconButton, LinearGradient, ScreenContainer } from "@draftbit/ui";
import { useMutation, useQuery } from "@tanstack/react-query";

import { api } from "../../apis/VolatoMobileAPIApi";
import { Button, Text, UserAvatar } from "../../components";
import { useModalAction } from "../../components/Modals/ModalContext";
import Images from "../../config/Images";
import { useStores } from "../../models/root";
import { colors } from "../../themes";
import { formatDate } from "../../utils/formatDate";
import { modalViews } from "../../utils/modalViews";
import { queries } from "../../utils/queries";

function QuoteDetailsScreen(props) {
  const { navigation, route } = props;
  const { openModal, closeModal } = useModalAction();
  const [tripLeg, setTripLeg] = useState(null);
  const [services, setServices] = useState(null);
  const [cancellingTripLeg, setCancellingTripLeg] = useState(false);
  const [catering, setCatering] = useState([]);
  const [groundTransportations, setGroundTransportations] = useState([]);
  const {
    userStore: { user },
  } = useStores();

  const flight = route?.params?.flight;

  const pricingQuotes = useQuery({
    queryKey: queries.quote.getDetails(flight.leg_id),
    queryFn: () => api.pricingQuote.get(flight.leg_id),
    onSuccess: (data) => {
      const newCatering = [];
      const groundTransports = [];
      data?.catering?.forEach((item) => {
        if (item?.cateringoption_id?.cateringcategory_id === 3) {
          groundTransports.push(item?.cateringoption_id);
        } else {
          newCatering.push(item?.cateringoption_id);
        }
      });

      setGroundTransportations(groundTransports);
      setCatering(newCatering);
      setTripLeg(data);
    },
    onError: () => {},
    onSettled: () => {},
  });

  const { isLoading: tripLoading, isRefetching: tripRefetching } = pricingQuotes;

  const servicesQuery = useQuery({
    queryKey: ["services"],
    queryFn: () => api.tripLeg.services(flight.pricing_quote_id),
    enabled: false,
    onSuccess: (data) => {
      setServices(data);
    },
    onError: () => {},
    onSettled: () => {},
  });

  const cancelTripMutation = useMutation(
    () => {
      closeModal();
      setCancellingTripLeg(true);
      return api.cancelTrip.post(tripLeg?.pricing_quote_id);
    },
    {
      onSuccess: () => {
        setCancellingTripLeg(false);
        navigation.navigate("TripsNavigator", { screen: "TripsScreen" });
      },
      onError: () => {
        setCancellingTripLeg(false);
      },
      onSettled: () => {
        setCancellingTripLeg(false);
      },
    }
  );

  async function fetchData() {
    await servicesQuery.refetch();
    await pricingQuotes.refetch();
  }

  useEffect(() => {
    fetchData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const handleCancelTrip = async () => {
    openModal(modalViews.CANCEL_FLIGHT, {
      onCancel: closeModal,
      onConfirm: () => cancelTripMutation.mutate(),
    });
  };

  const handleOpenContract = () => {
    if (tripLeg?.contractUrl) {
      Linking.openURL(tripLeg.contractUrl);
    }
  };

  return (
    <ScreenContainer style={styles.screenContainer} scrollable={false}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <Image source={Images.Back} />
        </TouchableOpacity>
        <Text style={styles.headerTitleText}>Trip Details</Text>
      </View>
      {tripLoading || tripRefetching || cancellingTripLeg || servicesQuery.isLoading ? (
        <View style={styles.activityIndicatorWrapper}>
          <ActivityIndicator
            style={styles.activityIndicator}
            animating
            color={colors.palette.green}
            hidesWhenStopped
            size="large"
          />
        </View>
      ) : (
        <ScrollView
          style={styles.container}
          showsHorizontalScrollIndicator={false}
          showsVerticalScrollIndicator={false}
        >
          <View style={styles.tripDetailListItem}>
            <ImageBackground
              style={styles.tripImageBg}
              resizeMode="cover"
              source={{
                uri: tripLeg?.photo?.filename,
              }}
            >
              <LinearGradient
                style={styles.tripCardOverlayGradient}
                color1={colors.palette.tripCardGradientEnd}
                color2={colors.palette.tripCardGradientStart}
                endX={0}
                endY={0}
                startX={0}
                startY={100}
              />
            </ImageBackground>

            <View style={styles.quoteListItem}>
              <View style={styles.dateBanner}>
                <Text style={styles.aircraftHeaderText}>
                  {formatDate(tripLeg?.departTimeLocal, "eee, MMM dd, yyyy")}
                </Text>
              </View>
            </View>

            <View style={styles.airportHeader}>
              <View style={styles.airportHeaderItem}>
                <Text style={styles.airportTitle}>
                  {tripLeg?.fromAirport_id.city}, {tripLeg?.fromAirport_id.province}
                </Text>
                <Text style={styles.airportCode}>{tripLeg?.fromAirport_id.code}</Text>
              </View>
              <Image source={Images.Airplane} style={styles.airplaneImage} />
              <View style={styles.airportHeaderItem}>
                <Text style={styles.airportTitle}>
                  {tripLeg?.toAirport_id.city}, {tripLeg?.toAirport_id.province}
                </Text>
                <Text style={styles.airportCode}>{tripLeg?.toAirport_id.code}</Text>
              </View>
            </View>
            {cancellingTripLeg ? (
              <ActivityIndicator
                style={styles.cancelTripActivityIndicator}
                animating
                color={colors.palette.midnight}
                hidesWhenStopped
                size="large"
              />
            ) : (
              <Button
                style={styles.cancelTripButton}
                title="Cancel Trip"
                onPress={handleCancelTrip}
              />
            )}


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/TripsAndDeals/TripsScreen.js

import React, { useEffect, useState } from "react";
import { AppState, StyleSheet, View } from "react-native";

import { ScreenContainer } from "@draftbit/ui";
import { useQuery } from "@tanstack/react-query";
import { StatusBar } from "expo-status-bar";
import Animated, { FadeInLeft, FadeOutRight } from "react-native-reanimated";

import Trips from "./components/Trips";
import { api } from "../../apis/VolatoMobileAPIApi";
import { Text } from "../../components";
import { colors, spacing } from "../../themes/index";

function TripsScreen({ navigation }) {
  const [trips, setTrips] = useState(null);
  const [refreshing, setRefreshing] = useState(false);

  const checkTrackingPermission = async () => {
    // const { canAskAgain, granted } = await getTrackingPermissionsAsync();
    // if (granted) return;
    // if (!canAskAgain) return;
    // const { granted: newGranted } = await requestTrackingPermissionsAsync();
  };

  const upcomingTravelQuery = useQuery({
    queryKey: ["upcomingTravel"],
    queryFn: () => api.upcomingTravel.get(),
    enabled: false,
    onSuccess: (data) => {
      const staticPosterItem = {};
      const updatedTrips = [...data, staticPosterItem];
      setTrips(updatedTrips);
    },
    onError: () => {},
    onSettled: () => {
      setRefreshing(false);
    },
  });

  function fetchTravel() {
    setRefreshing(true);
    upcomingTravelQuery.refetch();
  }

  useEffect(() => {
    (async () => {
      await checkTrackingPermission();
    })();
    const unsubscribe = navigation.addListener("focus", () => {
      fetchTravel();
    });

    const appStateListener = AppState.addEventListener("change", (nextAppState) => {
      if (nextAppState === "active") {
        fetchTravel();
      }
    });

    return () => {
      unsubscribe();
      appStateListener.remove();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <Animated.View
      entering={FadeInLeft.duration(400)}
      exiting={FadeOutRight.duration(400)}
      style={styles.animatedContainer}
    >
      <ScreenContainer style={styles.container} hasTopSafeArea scrollable={false}>
        {/* eslint-disable-next-line react/style-prop-object */}
        <StatusBar style="dark" />
        <View style={styles.navHeader}>
          <Text style={styles.headerTitleText}>My Trips</Text>
        </View>
        <Trips
          navigation={navigation}
          data={trips}
          loading={upcomingTravelQuery.isFetching}
          fetchTravel={fetchTravel}
          refreshing={refreshing}
        />
      </ScreenContainer>
    </Animated.View>
  );
}

const styles = StyleSheet.create({
  animatedContainer: {
    flex: 1,
  },
  header: {
    alignItems: "center",
    backgroundColor: colors.palette.midnight,
    flexDirection: "row",
    padding: 12,
    paddingTop: 50,
    gap: 15,
  },
  airportHeader: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingTop: spacing.medium,
    marginBottom: spacing.medium,
  },
  airportHeaderItem: {
    // width: 180,
    // padding: 12,
    // paddingTop: 20,
    // gap: 5,
    alignItems: "center",
  },
  airportTitle: {
    color: colors.palette.white,
    fontSize: 11,
    fontWeight: 400,
    lineHeight: 10,
    marginBottom: 5,
  },
  airportTime: {
    color: colors.palette.white,
    fontSize: 14,
    fontWeight: 400,
    lineHeight: 18,
  },
  airportCode: {
    color: colors.palette.white,
    fontSize: 34,
    marginBottom: 5,
  },
  airplaneImage: {
    height: 40,
    width: 40,
  },
  fboIcons: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "flex-end",
    gap: 12,
  },
  hr: {
    borderBottomWidth: 0.5,
    borderColor: colors.palette.darkCloud,
    marginVertical: 10,
  },
  hondaJetLogo: {
    backgroundColor: colors.palette.cloud,
    borderRadius: 3,
  },
  aircraftHeader: {
    flexDirection: "row",
    alignItems: "center",
    // justifyContent: "space-between",
    // backgroundColor: colors.palette.greyAlpha,
    // padding: 10,
    // marginHorizontal: -10,
  },
  aircraftHeaderText: {
    color: colors.palette.white,
    fontSize: 12,
  },
  aircraftHeaderTextSmall: {
    color: colors.palette.white,
    fontSize: 12,
  },
  aircraftInfo: {
    flexDirection: "row",
    justifyContent: "space-between",
    flex: 1,
  },
  departDate: {
    width: 150,
  },
  aircraftHeaderSeparator: {
    color: colors.palette.lightGray,
    fontSize: 18,
    marginRight: spacing.medium,
  },
  headerTitleText: {
    color: colors.palette.midnight,
    fontFamily: "union",
    fontSize: 28,
    textAlign: "center",
  },
  buttonRow: {
    alignItems: "center",
    justifyContent: "space-between",
    flexDirection: "row",
  },
  inquireButton: {
    blurRadius: 1,
    width: 90,
  },
  inquireButtonText: {
    color: colors.palette.white,
    fontFamily: "unionBold",
    fontSize: 12,


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/TripsAndDeals/TripDetailsScreen.js

import React, { useEffect, useMemo, useState } from "react";
import {
  ActivityIndicator,
  FlatList,
  Image,
  ImageBackground,
  Linking,
  Platform,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  useWindowDimensions,
  View,
} from "react-native";

import { Icon, IconButton, LinearGradient, ScreenContainer } from "@draftbit/ui";
import { useMutation, useQuery } from "@tanstack/react-query";
import { createMapLink } from "react-native-open-maps";
import Carousel from "react-native-reanimated-carousel";

import { getFlightLegPassengers } from "../../apis/flightleg-api";
import { api } from "../../apis/VolatoMobileAPIApi";
import { Button, Text, UserAvatar } from "../../components";
import { useModalAction } from "../../components/Modals/ModalContext";
import Images from "../../config/Images";
import { useStores } from "../../models/root";
import { colors } from "../../themes";
import { formatDate } from "../../utils/formatDate";
import { modalViews } from "../../utils/modalViews";
import { getPhotoUrl } from "../../utils/photo";
import { screens } from "../../utils/screens";

function TripDetailsScreen(props) {
  const { navigation, route } = props;
  const [tripLeg, setTripLeg] = useState(null);
  const [flightMap, setFlightMap] = useState(null);
  const [fetchingFlightMap, setFetchingFlightMap] = useState(false);
  const [cancellingTripLeg, setCancellingTripLeg] = useState(false);
  const flight = route?.params?.flight;
  const id = flight?.leg_id;
  const [catering, setCatering] = useState([]);
  const [groundTransportations, setGroundTransportations] = useState([]);

  const caseId = flight?.oc_case_id;
  const {
    userStore: { user },
  } = useStores();

  const passengersQuery = useQuery({
    queryKey: ["flightLegPassengers", id],
    queryFn: () => getFlightLegPassengers(id),
    enabled: !!id,
    select: (response) => (response.kind === "ok" ? response.result : []),
  });

  const tripLegQuery = useQuery({
    queryKey: ["tripLeg", id],
    queryFn: () => api.tripLeg.get(id),
    enabled: false,
    onSuccess: (data) => {
      setTripLeg(data);
      const aircraftId = parseInt(tripLeg?.aircraft?.id);
      if (aircraftId > 2 && tripLeg?.aircraft?.icao24) {
        setFetchingFlightMap(true);
        flightMapQuery.refetch();
      }
    },
    onError: () => {},
    onSettled: () => {},
  });

  const servicesQuery = useQuery({
    queryKey: ["services", id],
    queryFn: () => api.tripLeg.services(id),
    enabled: false,
    onSuccess: (data) => {
      const newCatering = [];
      const groundTransports = [];
      data?.forEach((item) => {
        if (item?.cateringoption_id?.cateringcategory_id >= 3) {
          groundTransports.push(item);
        } else {
          newCatering.push(item);
        }
      });

      setGroundTransportations(groundTransports);
      setCatering(newCatering);
    },
    onError: () => {},
    onSettled: () => {},
  });

  const flightMapQuery = useQuery({
    queryKey: ["flightMap"],
    queryFn: () => api.flightMap.get(tripLeg?.aircraft?.id),
    enabled: false,
    onSuccess: (data) => {
      setFlightMap(data?.data);
      setFetchingFlightMap(false);
    },
    onError: () => {
      setFetchingFlightMap(false);
    },
    onSettled: () => {},
  });

  const cancelTripMutation = useMutation(
    () => {
      setCancellingTripLeg(true);
      return api.cancelTrip.post(tripLeg?.quoteNumber);
    },
    {
      onSuccess: () => {
        setCancellingTripLeg(false);
        navigation.navigate("TripsScreen");
      },
      onError: () => {
        setCancellingTripLeg(false);
      },
      onSettled: () => {
        setCancellingTripLeg(false);
      },
    }
  );

  async function fetchData() {
    await tripLegQuery.refetch();
    await servicesQuery.refetch();
    await flightMapQuery.refetch();
  }

  useEffect(() => {
    fetchData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const handleCancelTrip = async () => {
    if (tripLeg.trip_id) {
      // open chat
      const title = `Trip ${tripLeg?.departIcao} -> ${tripLeg?.arriveIcao}`;

      // navigate to chat screen
      navigation.navigate(screens.ChatScreen, {
        chatId: caseId,
        title,
        tripId: tripLeg?.trip_id,
      });
    } else {
      // cancel trip
      cancelTripMutation.mutate();
    }
  };

  const handleOpenContract = () => {
    if (tripLeg?.contractUrl) {
      Linking.openURL(tripLeg?.contractUrl);
    }
  };

  return (
    <ScreenContainer style={styles.screenContainer} scrollable={false}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <Image source={Images.Back} />
        </TouchableOpacity>
        <Text style={styles.headerTitleText}>Trip Details</Text>
      </View>
      {!tripLeg ? (
        <View style={styles.activityIndicatorWrapper}>
          <ActivityIndicator
            style={styles.activityIndicator}
            animating
            color={colors.palette.green}
            hidesWhenStopped
            size="large"
          />
        </View>
      ) : (
        <ScrollView
          style={styles.scrollView}
          showsHorizontalScrollIndicator
          showsVerticalScrollIndicator
        >
          <View style={styles.tripDetailListItem}>
            <ImageBackground
              style={styles.tripImageBg}
              resizeMode="cover"
              source={{
                uri: tripLeg?.photo?.filename,
              }}
            >
              <LinearGradient
                style={styles.tripCardOverlayGradient}
                color1={colors.palette.tripCardGradientEnd}
                color2={colors.palette.tripCardGradientStart}
                endX={0}
                endY={0}
                startX={0}
                startY={100}


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Reserve/_ReserveScreen.js

import { useEffect, useMemo, useRef, useState } from "react";
import { ActivityIndicator, Linking, StyleSheet, View } from "react-native";

import { ScreenContainer } from "@draftbit/ui";
import { yupResolver } from "@hookform/resolvers/yup";
import { useMutation, useQuery } from "@tanstack/react-query";
import { add as addDate, addMonths, sub as subDate } from "date-fns";
import { setStatusBarStyle } from "expo-status-bar";
import { useForm } from "react-hook-form";
import Animated, { FadeInLeft, FadeOutRight } from "react-native-reanimated";
import * as yup from "yup";

import SummaryModal from "./Modals/SummaryModal";
import { api } from "../../apis/VolatoMobileAPIApi";
import { Button, Text } from "../../components";
import { useModalAction } from "../../components/Modals";
import ReserveScreenHeader from "../../components/Screens/Reserve/ReserveScreenHeader";
import ReserveScreenLegForm from "../../components/Screens/Reserve/ReserveScreenLegForm";
import ReserveScreenSwiper from "../../components/Screens/Reserve/ReserveScreenSwiper";
import ServerErrorModal from "../../components/Screens/Reserve/ServerErrorModal";
import { useStores } from "../../models/root";
import { colors, spacing } from "../../themes";
import { modalViews } from "../../utils";
import { tripsTypes } from "../../utils/constants";
import { formatDate, formatTime } from "../../utils/formatDate";
import { queries } from "../../utils/queries";

const schema = yup.object().shape({
  flights: yup
    .array()
    .of(
      yup.object().shape({
        departAirport: yup.string().optional(),
        arriveAirport: yup.string().optional(),
        departDate: yup.string().optional(),
        departTime: yup.string().optional(),
        arriveDate: yup.string().optional(),
        arriveTime: yup.string().optional(),
        passengers: yup
          .array()
          .of(
            yup.object().shape({
              email: yup.string().email().optional(),
            })
          )
          .nullable(),
        catering: yup
          .array()
          .of(
            yup.object().shape({
              id: yup.number().required(),
              quantity: yup.number().required(),
            })
          )
          .nullable(),
        transport: yup
          .array()
          .of(
            yup.object().shape({
              id: yup.number().required(),
              quantity: yup.number().required(),
            })
          )
          .nullable(),
      })
    )
    .min(1),
});

export default function ReserveScreen(props) {
  const { navigation, route } = props;
  const { trip, booking } = route.params || {};

  const {
    cateringStore: { fetchCateringCategories },
    userStore: { user, depositAccounts, ownership },
  } = useStores();

  const form = useForm({
    resolver: yupResolver(schema),
    defaultValues: {
      flights: new Array(4).fill(0).map(() => ({
        departAirport: null,
        arriveAirport: null,
        departDate: null,
        departTime: null,
        arriveDate: null,
        arriveTime: null,
        passengers: [user.id],
        catering: [],
      })),
    },
  });
  const swiperRef = useRef(null);
  const handlSwipe = (value = 1) => {
    if (swiperRef.current) {
      swiperRef.current.scrollBy(value, true);
    }
  };

  const [isLoading, setIsLoading] = useState(false);
  const [activeLegCount, setActiveLegCount] = useState(1);
  const [activeLeg, setActiveLeg] = useState(1);
  const [tripType, setTripType] = useState(tripsTypes.ONE_WAY);
  // when we send an itinerary to the server, if we send invalid flight legs it will error out, we need to keep track
  // of which valid legs on the frontend we are sending over so we can reassmble when the data comes back
  const [validFlightIndices, setValidFlightIndices] = useState([]);
  const [flightTimes, setFlightTimes] = useState([0, 0, 0, 0]); // in minutes
  //
  const [pricingData, setPricingData] = useState();
  const [pricingDataMax, setPricingDataMax] = useState(); // pricing data for insider max
  //
  const [isSummaryOpen, setIsSummaryOpen] = useState(false);
  const [isErrorOpen, setIsErrorOpen] = useState(false);
  //
  const [serverError, setServerError] = useState(null);
  //
  const [isItineraryValid, setIsItineraryValid] = useState(false);
  const [availableExtremeDates, setAvailableExtremeDates] = useState({});
  const [validMonths, setValidMonths] = useState([]);
  //
  const [selectedStartDates, setSelectedStartDates] = useState({
    0: null,
    1: null,
    2: null,
    3: null,
  });
  const [selectedEndDates, setSelectedEndDates] = useState({
    0: null,
    1: null,
    2: null,
    3: null,
  });

  const [selectedDepartTimes, setSelectedDepartTimes] = useState({
    0: null,
    1: null,
    2: null,
    3: null,
  });
  const [selectedArriveTimes, setSelectedArriveTimes] = useState({
    0: null,
    1: null,
    2: null,
    3: null,
  });
  const [airports, setAirports] = useState(null);
  const [isLoadingAirports, setIsLoadingAirports] = useState(false);

  const { openModal, closeModal } = useModalAction();

  const airportsQuery = useQuery({
    queryKey: ["airports_ids", booking?.option?.fromAirport_id, booking?.option?.toAirport_id],
    queryFn: () => {
      setIsLoadingAirports(true);
      setIsLoading(true);

      const data = api.airport.ids.get({
        fromAirportId: booking?.option?.fromAirport_id,
        toAirportId: booking?.option?.toAirport_id,
      });
      return data;
    },
    enabled: false,
    onSuccess: (data) => {
      setAirports(data);
    },
    onError: (error) => {
      console.log(error);
    },
    onSettled: () => {
      setIsLoadingAirports(false);
      setIsLoading(false);
    },
  });

  useEffect(() => {
    if (booking) {
      if (
        !airports ||
        booking?.option?.fromAirport_id !== airports?.fromAirport?.id ||
        booking?.option?.toAirport_id !== airports?.toAirport?.id
      ) {
        airportsQuery.refetch();
      }
      if (!isLoadingAirports) {
        if (airports) {
          form.reset({ flights: [] });
          form.reset({
            flights: [
              {
                departAirport: {
                  ...(airports?.fromAirport || {}),
                  simpleLabel: airports?.fromAirport?.label ?? "",
                },
                arriveAirport: {
                  ...(airports?.toAirport || {}),
                  simpleLabel: airports?.toAirport?.label ?? "",
                },
                departTime: new Date(2011, 0, 1, 9, 0, 0, 0),


File: /Users/codeshack-vii/Documents/_projects/Volato/components/forms/NewPassengerForm.js

import React, { useState } from "react";
import { ActivityIndicator, StyleSheet, View } from "react-native";

import { yupResolver } from "@hookform/resolvers/yup";
import "yup-phone";
import * as ImagePicker from "expo-image-picker";
import { parsePhoneNumberFromString } from "libphonenumber-js";
import { Controller, useForm } from "react-hook-form";
import { KeyboardAwareScrollView } from "react-native-keyboard-aware-scroll-view";
import uuid from "react-native-uuid";
import * as yup from "yup";

import { Button, DateTimePicker, PhoneInput, PhotoUpload, Text, TextInput } from "..";
import { colors, spacing } from "../../themes";

const schema = yup.object({
  firstName: yup.string().required("Your First Name is Required"),
  lastName: yup.string().required("Your Last Name is Required"),
  phoneNumber: yup.string().nullable(),
  weight: yup.string().required("Your Weight is Required"),
  dateOfBirth: yup.date().required("Your Date of Birth is Required"),
});

function NewPassengerForm({ onSave, onCancel, loading }) {
  const [image, setImage] = useState(null);
  const defaultValues = {
    firstName: "",
    lastName: "",
    phoneNumber: "",
    weight: "",
    dateOfBirth: "",
  };

  const {
    control,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm({
    resolver: yupResolver(schema),
    defaultValues,
  });

  const handlePickPhoto = async () => {
    // No permissions request is necessary for launching the image library
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  const handleSave = (values) => {
    const newValues = {
      ...values,
      label: `${values.firstName} ${values.lastName}`,
      systemId: uuid.v4(),
    };

    if (newValues.weight) {
      newValues.weight = parseInt(newValues.weight);
    }
    onSave(newValues);
  };

  const handleCancel = () => {
    reset(defaultValues);
    onCancel();
  };

  return (
    <View style={styles.passengerForm}>
      {loading ? (
        <View style={styles.spinner}>
          <ActivityIndicator
            animating
            color={colors.palette.midnight}
            hidesWhenStopped
            size="large"
          />
        </View>
      ) : null}
      <KeyboardAwareScrollView style={styles.content}>
        <PhotoUpload style={styles.photoUpload} value={image} onChange={handlePickPhoto} />
        <Text style={styles.formSectionHeader}>Contact Information</Text>
        <Controller
          control={control}
          name="firstName"
          render={({ field: { onChange, onBlur, value } }) => (
            <TextInput
              onChangeText={onChange}
              onBlur={onBlur}
              value={value}
              label="First Name"
              error={errors.firstName}
              errorText={errors.firstName?.message}
            />
          )}
        />
        <Controller
          control={control}
          name="lastName"
          render={({ field: { onChange, onBlur, value } }) => (
            <TextInput
              onChangeText={onChange}
              onBlur={onBlur}
              value={value}
              label="Last Name"
              error={errors.lastName}
              errorText={errors.lastName?.message}
            />
          )}
        />
        <Controller
          control={control}
          name="phoneNumber"
          render={({ field: { onChange, onBlur, value } }) => (
            <PhoneInput
              onChangeText={onChange}
              onBlur={onBlur}
              value={
                parsePhoneNumberFromString(value, "US")
                  ? parsePhoneNumberFromString(value, "US").formatNational()
                  : value
              }
              label="Phone Number"
              placeholder="000 000 0000"
              error={errors.phoneNumber}
              errorText={errors.phoneNumber?.message}
            />
          )}
        />
        <Controller
          control={control}
          name="tsa"
          render={({ field: { onChange, onBlur, value } }) => (
            <TextInput
              onChangeText={onChange}
              onBlur={onBlur}
              value={value}
              label="TSA Pre#"
              autoCapitalize="none"
              placeholder="16 digits or letters"
              placeholderTextColor={colors.palette.light}
              error={errors.tsa}
              errorText={errors.tsa?.message}
            />
          )}
        />
        <View style={styles.row}>
          <Controller
            control={control}
            name="dateOfBirth"
            render={({ field: { onChange, value } }) => (
              <DateTimePicker
                value={value}
                onChange={onChange}
                error={errors.dateOfBirth}
                errorText={errors.dateOfBirth?.message}
              />
            )}
          />
          <Controller
            control={control}
            name="weight"
            render={({ field: { onChange, onBlur, value } }) => (
              <TextInput
                wrapperStyle={{ flex: 1 }}
                onChangeText={onChange}
                onBlur={onBlur}
                value={value}
                label="Weight"
                autoCapitalize="none"
                placeholder="000 lbs"
                placeholderTextColor={colors.palette.light}
                keyboardType="number-pad"
                error={errors.weight}
                errorText={errors.weight?.message}
              />
            )}
          />
        </View>
      </KeyboardAwareScrollView>
      <View style={styles.modalActions}>
        <Button style={styles.button} title="Cancel" onPress={handleCancel} />
        <Button
          style={styles.button}
          variant="contained"
          theme="halloween"
          title="Save"
          onPress={handleSubmit(handleSave)}
        />
      </View>
    </View>
  );


File: /Users/codeshack-vii/Documents/_projects/Volato/components/core/group.js

import { View } from "react-native";

/**
 *
 * @param {object} props
 * @param {import("react-native").DimensionValue | undefined} props.gap
 * @param {React.ReactNode} props.children
 * @param {('flex-start'|'center'|'flex-end'|'space-between'|'space-evenly') | undefined} props.justify
 * @param {('flex-start'|'center'|'flex-end') | undefined} props.align
 * @param {boolean | undefined} props.grow
 * @param {import("react-native").StyleProp<import("react-native").ViewStyle> | undefined} props.style
 * @param {import("react-native").DimensionValue | undefined} props.padding
 */
export default function Group(props) {
  const { children, justify, align, gap, grow, style, padding } = props;

  return (
    <View
      style={[
        {
          display: "flex",
          flexDirection: "row",
          justifyContent: justify ?? "flex-start",
          alignItems: align ?? "center",
          gap: gap ?? 12,
          width: grow ? "100%" : "auto",
          padding: padding ?? 0,
        },
        style ?? {},
      ]}
    >
      {children}
    </View>
  );
}


File: /Users/codeshack-vii/Documents/_projects/Volato/components/core/stack.js

import { View } from "react-native";

/**
 *
 * @param {object} props
 * @param {React.ReactNode} props.children
 * @param {import("react-native").DimensionValue | undefined} props.gap
 * @param {('flex-start'|'center'|'flex-end') | undefined} props.align
 * @param {boolean | undefined} props.grow
 * @param {import("react-native").StyleProp<import("react-native").ViewStyle> | undefined} props.style
 * @param {import("react-native").DimensionValue | undefined} props.padding
 */
export default function Stack(props) {
  const { children, gap, align, grow, style, padding } = props;
  return (
    <View
      style={[
        {
          display: "flex",
          flexDirection: "column",
          gap: gap ?? 8,
          alignItems: align ?? "flex-start",
          height: grow ? "100%" : null,
          flexShrink: 1,
          padding: padding ?? 0,
        },
        style ?? {},
      ]}
    >
      {children}
    </View>
  );
}


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Images/EmptyChatListImage.js

import * as React from "react";

import Svg, { Defs, G, Path, Rect } from "react-native-svg";

function EmptyChatListImage(props) {
  return <Svg width={200} height={102} fill="none" {...props}>
    <G filter="url(#filter0_d_1019_11401)">
      <Rect width={192} height={94} x={4} fill="#FFFFFF" rx={6} />
      <Path fill="#F0F0F0" d="M20 18C20 14.6863 22.6863 12 26 12H124C127.314 12 130 14.6863 130 18V34C130 37.3137 127.314 40 124 40H20V18Z" />
      <Rect width={51} height={6} x={30} y={18} fill="#D8D8D8" rx={3} />
      <Rect width={90} height={6} x={30} y={28} fill="#D8D8D8" rx={3} />
      <Path fill="#E5E4EC" d="M141 50C141 46.6863 143.686 44 147 44H174C177.314 44 180 46.6863 180 50V62H147C143.686 62 141 59.3137 141 56V50Z" />
      <Rect width={19} height={6} x={151} y={50} fill="#C6C5D1" rx={3} />
      <Path fill="#E5E4EC" d="M99 70C99 66.6863 101.686 64 105 64H174C177.314 64 180 66.6863 180 70V82H105C101.686 82 99 79.3137 99 76V70Z" />
      <Rect width={63} height={6} x={107} y={70} fill="#C6C5D1" rx={3} />
    </G>
    <Defs />
  </Svg>
}
export default EmptyChatListImage;


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Images/EmptyAuthorizedUsersImage.js

import * as React from "react";

import Svg, { Defs, G, Path, Rect } from "react-native-svg";

function EmptyAuthorizedUsersImage(props) {
  return (
    <Svg xmlns="http://www.w3.org/2000/svg" width={200} height={64} fill="none" {...props}>
      <G filter="url(#a)">
        <Rect width={192} height={56} x={4} fill="#fff" rx={6} shapeRendering="crispEdges" />
        <Path
          fill="#E5E4EC"
          d="M45.75 28.5c2.07 0 3.735-1.68 3.735-3.75 0-2.07-1.665-3.75-3.735-3.75S42 22.68 42 24.75c0 2.07 1.68 3.75 3.75 3.75ZM34.5 27c2.49 0 4.485-2.01 4.485-4.5S36.99 18 34.5 18 30 20.01 30 22.5s2.01 4.5 4.5 4.5Zm11.25 4.5c-2.745 0-8.25 1.38-8.25 4.125V39H54v-3.375c0-2.745-5.505-4.125-8.25-4.125ZM34.5 30C31.005 30 24 31.755 24 35.25V39h10.5v-3.375c0-1.275.495-3.51 3.555-5.205C36.75 30.15 35.49 30 34.5 30Z"
        />
        <Rect width={81} height={8} x={70} y={17.5} fill="#E5E4EC" rx={4} />
        <Rect width={54} height={8} x={70} y={30.5} fill="#E5E4EC" rx={4} />
        <Path
          fill="#F0F0F0"
          d="M174 20c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2Zm0 12c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2Zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2Z"
        />
      </G>
      <Defs />
    </Svg>
  );
}
export default EmptyAuthorizedUsersImage;


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Images/EmptyActivityImage.js

import * as React from "react";

import Svg, { Defs, G, Path, Rect } from "react-native-svg";

function EmptyActivityImage(props) {
  return <Svg width={200} height={56} fill="none" {...props}>
    <G filter="url(#a)">
      <Rect
        width={192}
        height={48}
        x={4}
        fill="#fff"
        rx={6}
        shapeRendering="crispEdges"
      />
      <Path
        fill="#F0F0F0"
        d="M23 23.9a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm5.4-4.8a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm7.2 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm5.4 4.8a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm-2.592 3.432c-1.044-1.224-1.92-2.268-2.976-3.492-.552-.648-1.26-1.296-2.1-1.584a2.43 2.43 0 0 0-.396-.108c-.3-.048-.624-.048-.936-.048-.312 0-.636 0-.948.06a2.43 2.43 0 0 0-.396.108c-.84.288-1.536.936-2.1 1.584-1.044 1.224-1.92 2.268-2.976 3.492-1.572 1.572-3.504 3.312-3.144 5.748.348 1.224 1.224 2.436 2.796 2.784.876.18 3.672-.528 6.648-.528h.216c2.976 0 5.772.696 6.648.528 1.572-.348 2.448-1.572 2.796-2.784.372-2.448-1.56-4.188-3.132-5.76Z"
      />
      <Rect width={81} height={8} x={60} y={13.5} fill="#F0F0F0" rx={4} />
      <Rect width={54} height={8} x={60} y={26.5} fill="#F0F0F0" rx={4} />
      <Path
        fill="#F0F0F0"
        d="M178 16c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2Zm0 12c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2Zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2Z"
      />
    </G>
    <Defs />
  </Svg>
}

export default EmptyActivityImage;


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Images/EmptyPassengersImage.js

import * as React from "react";

import Svg, { Defs, G, Path, Rect } from "react-native-svg";

function EmptyPassengersImage(props) {
  return <Svg width={200} height={82} fill="none" {...props}>
    <G filter="url(#a)">
      <Rect
        width={192}
        height={73}
        x={4}
        y={0.5}
        fill="#fff"
        rx={6}
        shapeRendering="crispEdges"
      />
      <Rect width={34} height={34} x={20} y={12.5} fill="#EAE5D6" rx={17} />
      <Rect width={36} height={36} x={45} y={11.5} fill="#EAE5D6" rx={18} />
      <Rect
        width={36}
        height={36}
        x={45}
        y={11.5}
        stroke="#fff"
        strokeWidth={2}
        rx={18}
      />
      <Rect width={36} height={36} x={73} y={11.5} fill="#EAE5D6" rx={18} />
      <Rect
        width={36}
        height={36}
        x={73}
        y={11.5}
        stroke="#fff"
        strokeWidth={2}
        rx={18}
      />
      <Rect width={34} height={34} x={100} y={12.5} fill="#888C99" rx={17} />
      <Path
        fill="#fff"
        d="M112.426 28.774c1.54 0 1.974-.952 1.96-1.652-.014-.966-.7-1.582-1.694-1.582-1.134 0-1.75.798-1.848 1.974l-1.204-.098c.182-1.806 1.246-2.912 3.08-2.912 1.666 0 2.94 1.036 2.94 2.604 0 .896-.532 1.638-1.386 2.03v.014c1.064.28 1.834 1.246 1.834 2.492 0 1.162-.854 3.024-3.388 3.024-2.688 0-3.206-2.086-3.248-3.024l1.232-.084c.098 1.288.854 2.058 2.03 2.058 1.414 0 2.086-.924 2.086-1.974 0-1.19-.868-1.904-2.03-1.904-.238 0-.434-.014-.728.028V28.76c.154.014.252.014.364.014Zm7.933 4.914v-2.912h-2.884v-1.05h2.884v-2.898h1.05v2.898h2.898v1.05h-2.898v2.912h-1.05Z"
      />
      <Rect width={35} height={8} x={20} y={55.5} fill="#F0F0F0" rx={4} />
      <Rect width={119} height={8} x={61} y={55.5} fill="#F0F0F0" rx={4} />
    </G>
    <Defs />
  </Svg>
}
export default EmptyPassengersImage;


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Images/EmptyPetsImage.js

import * as React from "react";

import Svg, { Defs, G, Path, Rect } from "react-native-svg";

function EmptyPetsImage(props) {
  return <Svg width={200} height={56} fill="none" {...props}>
    <G filter="url(#a)">
      <Rect
        width={192}
        height={48}
        x={4}
        fill="#fff"
        rx={6}
        shapeRendering="crispEdges"
      />
      <Path
        fill="#F0F0F0"
        d="M23 23.9a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm5.4-4.8a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm7.2 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm5.4 4.8a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm-2.592 3.432c-1.044-1.224-1.92-2.268-2.976-3.492-.552-.648-1.26-1.296-2.1-1.584a2.43 2.43 0 0 0-.396-.108c-.3-.048-.624-.048-.936-.048-.312 0-.636 0-.948.06a2.43 2.43 0 0 0-.396.108c-.84.288-1.536.936-2.1 1.584-1.044 1.224-1.92 2.268-2.976 3.492-1.572 1.572-3.504 3.312-3.144 5.748.348 1.224 1.224 2.436 2.796 2.784.876.18 3.672-.528 6.648-.528h.216c2.976 0 5.772.696 6.648.528 1.572-.348 2.448-1.572 2.796-2.784.372-2.448-1.56-4.188-3.132-5.76Z"
      />
      <Rect width={81} height={8} x={60} y={13.5} fill="#F0F0F0" rx={4} />
      <Rect width={54} height={8} x={60} y={26.5} fill="#F0F0F0" rx={4} />
      <Path
        fill="#F0F0F0"
        d="M178 16c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2Zm0 12c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2Zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2Z"
      />
    </G>
    <Defs />
  </Svg>
}

export default EmptyPetsImage;


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/ManageModal.js

import { CancelFlightModal } from "./CancelFlightModal";
import { CateringModal } from "./CateringModal";
import { InformationModal } from "./InformationModal";
import { useModalState } from "./ModalContext";
import { ModalWrapper } from "./ModalWrapper";
import PassengerModal from "./PassengerModal";
import { PassengersViewModal } from "./PassengersViewModal";
import { RedeemBenefitsModal } from "./RedeemBenefitsModal";
import RepeatTripModal from "./RepeatTripModal";
import { ReserveErrorModal } from "./ReserveErrorModal";
import { SelectListModal } from "./SelectListModal";
import { SignContractModal } from "./SignContractModal";
import TransportModal from "./TransportModal";
import { WebViewModal } from "./WebViewModal";
import { modalViews } from "../../utils";

import {
  DateSelectorModal,
  ImageGalleryModal,
  LogoutModal,
  NetworkErrorModal,
  TimeSelectorModal,
} from ".";

const renderModal = (view, data) => {
  switch (view) {
    case modalViews.NETWORK_ERROR:
      return <NetworkErrorModal {...data} />;

    case modalViews.IMAGE_GALLERY:
      return <ImageGalleryModal {...data} />;

    case modalViews.SELECT_DATE:
      return <DateSelectorModal {...data} />;

    case modalViews.LOGOUT:
      return <LogoutModal {...data} />;

    case modalViews.SIGN_CONTRACT:
      return <SignContractModal {...data} />;

    case modalViews.CANCEL_FLIGHT:
      return <CancelFlightModal {...data} />;

    case modalViews.CATERING:
      return <CateringModal {...data} />;

    case modalViews.TRANSPORT:
      return <TransportModal {...data} />;

    case modalViews.PASSENGERS:
      return <PassengerModal {...data} />;

    case modalViews.PASSENGERS_VIEWS:
      return <PassengersViewModal {...data} />;

    case modalViews.SELECT_LIST:
      return <SelectListModal {...data} />;

    case modalViews.REPEAT_TRIP:
      return <RepeatTripModal {...data} />;

    case modalViews.INFORMATION:
      return <InformationModal {...data} />;

    case modalViews.SELECT_TIME:
      return <TimeSelectorModal {...data} />;

    case modalViews.RESERVE_ERROR:
      return <ReserveErrorModal {...data} />;

    case modalViews.BROWSE_WEB:
      return <WebViewModal {...data} />;

    case modalViews.REDEEM_GO_BENEFITS:
      return <RedeemBenefitsModal {...data} />;

    default:
      return null;
  }
};

export function ManageModal() {
  const { isOpen, view, data, options } = useModalState();

  return (
    <ModalWrapper open={isOpen} transparent={options?.transparent ?? true} {...options}>
      {renderModal(view, data)}
    </ModalWrapper>
  );
}


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/RepeatTripModal.js

import { useEffect, useMemo, useState } from "react";
import { ActivityIndicator, SectionList, StyleSheet, TouchableOpacity, View } from "react-native";

import { Icon } from "@draftbit/ui";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { add as addDate, isAfter } from "date-fns";
import { groupBy } from "lodash";

import { Button, SearchInput, Text, Toggle, UserAvatar } from "..";
import { api } from "../../apis/VolatoMobileAPIApi";
import { useStores } from "../../models/root";
import { colors, spacing } from "../../themes";

// Sort flight legs in ascending order by departure time and return the first and last legs
const getFirstAndLastLeg = (trip) => {
  const sortedLegs = trip.sort((a, b) => new Date(a.departUtc) - new Date(b.departUtc));
  return [sortedLegs[0], sortedLegs[sortedLegs.length - 1]];
};

function RepeatTripModal({ onClose, onContinue }) {
  const [loading, setLoading] = useState(true);
  const [selectedTripDepartTime, setSelectedTripDepartTime] = useState(null);
  const [searchValue, setSearchValue] = useState("");
  const [recentFlights, setRecentFlights] = useState([]);
  const [pastFlights, setPastFlights] = useState([]);
  const airportDisplayLabelLength = 25;

  // const {
  //   userStore: { getRecentFlights, getPastFlights },
  // } = useStores();

  // const recentFlights = getRecentFlights();
  // const pastFlights = getPastFlights();

  const sectionListData = useMemo(
    () => {
      const searchCondition = (flight) =>
        flight.departCity.toLowerCase().includes(searchValue.toLowerCase()) ||
        flight.arriveCity.toLowerCase().includes(searchValue.toLowerCase()) ||
        flight.departIcao.toLowerCase().includes(searchValue.toLowerCase()) ||
        flight.arriveIcao.toLowerCase().includes(searchValue.toLowerCase()) ||
        flight.arriveAirport?.displayLabel?.toLowerCase().includes(searchValue.toLowerCase()) ||
        flight.departAirport?.displayLabel?.toLowerCase().includes(searchValue.toLowerCase());

      const recentTrips = Object.values(groupBy(recentFlights, (flight) => flight.trip_id));
      const pastTrips = Object.values(groupBy(pastFlights, (flight) => flight.trip_id));

      const filteredRecentTrips = recentTrips.filter((trip) =>
        trip.some((flight) => searchCondition(flight))
      );

      const filteredPastTrips = pastTrips.filter((trip) =>
        trip.some((flight) => searchCondition(flight))
      );

      return [
        {
          title: "Recent flights",
          data: filteredRecentTrips,
        },
        {
          title: "Past flights",
          data: filteredPastTrips,
        },
      ];
    },
    [pastFlights, recentFlights, searchValue]
    // [recentFlights, pastFlights, searchValue]
  );

  // const handleSelect = (item) => () => {
  //   setSelectedTripDepartTime(item.departLocal);
  //   console.log("here now");
  //   handleContinue();
  // };

  const handleContinue = (item) => () => {
    // if (!selectedTripDepartTime) {
    //   return;
    // }
    onContinue(item);
  };

  const renderItem = ({ item }) => {
    // const isItemSelected = item.departLocal === selectedTripDepartTime;
    const [firstLeg, lastLeg] = getFirstAndLastLeg(item);

    return (
      <TouchableOpacity style={styles.itemContainer} onPress={handleContinue(item)}>
        <Text style={styles.tripType}>
          {item.length === 1 ? "One way" : item.length === 2 ? "Round trip" : "Multi-city"}
        </Text>
        <View
          // style={isItemSelected ? [styles.tripItem, styles.tripItemSelected] : styles.tripItem}
          style={styles.tripItem}
        >
          <View style={styles.tripItemInfo}>
            <Text style={styles.tripIcao}>{firstLeg.departIcao}</Text>
            <Text style={styles.tripCity}>{firstLeg.departCity}</Text>
            <Text style={styles.tripAirport}>{`${firstLeg.departAirport?.label?.substr(
              0,
              airportDisplayLabelLength
            )}${
              firstLeg.departAirport?.label?.length > airportDisplayLabelLength ? "..." : ""
            }`}</Text>
          </View>
          <Icon
            name="MaterialCommunityIcons/arrow-right"
            style={styles.tripIcon}
            size={25}
            color={colors.palette.sky}
          />
          <View style={styles.tripItemInfo}>
            <Text style={styles.tripIcao}>{lastLeg.arriveIcao}</Text>
            <Text style={styles.tripCity}>{lastLeg.arriveCity}</Text>
            <Text style={styles.tripAirport}>{`${lastLeg.arriveAirport?.label?.substr(
              0,
              airportDisplayLabelLength
            )}${
              lastLeg.arriveAirport?.label?.length > airportDisplayLabelLength ? "..." : ""
            }`}</Text>
          </View>

          <Toggle
            variant="radio"
            //  value={isItemSelected}
            onPress={handleContinue(item)}
          />
        </View>
        <View style={{ flexDirection: "row", gap: 4 }}>
          {firstLeg?.pax?.map((passenger, idx) => (
            <UserAvatar
              key={`Passenger-${idx}`}
              size={27}
              textStyle={{ fontSize: 11 }}
              url={passenger?.photo_uuid}
              name={`${passenger?.firstName} ${passenger?.lastName}`}
            />
          ))}
        </View>
      </TouchableOpacity>
    );
  };

  const handleSearchValueChange = (value) => {
    setSearchValue(value);
  };

  const pastTravelQuery = useQuery({
    queryKey: ["pastTravel"],
    queryFn: () => api.pastTravel.get(),
    enabled: false,
    onSuccess: async (data) => {
      setLoading(true);

      const tripLegs = data?.tripLegs;
      const filteredRecentFlights = tripLegs?.filter((f) => {
        const flightDate = addDate(new Date(f.departLocal), {
          months: 3,
        });
        return isAfter(flightDate, new Date());
      });

      setRecentFlights(filteredRecentFlights);

      const filteredPastFlights = tripLegs?.filter((f) => {
        const flightDate = addDate(new Date(f.departLocal), {
          months: 3,
        });
        return isAfter(new Date(), flightDate);
      });
      setPastFlights(filteredPastFlights);
      // if (__DEV__)
      //   console.log({
      //     tripLegs: tripLegs.length,
      //     filteredRecentFlights: filteredRecentFlights.length,
      //     filteredPastFlights: filteredPastFlights.length,
      //   });
    },

    onError: () => {},
    onSettled: () => {
      setLoading(false);
    },
  });

  useEffect(() => {
    pastTravelQuery.refetch();
  }, [pastTravelQuery]);

  return (
    <>
      <View style={styles.modalHeader}>
        <View style={styles.modalStaticHeader}>
          <Text style={styles.modalHeaderText}>Repeat Trip</Text>
        </View>
        <SearchInput
          value={searchValue}
          onChange={handleSearchValueChange}
          style={{ marginHorizontal: 15, marginBottom: 10 }}


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/ReserveErrorModal.js

import { StyleSheet, useWindowDimensions, View } from "react-native";

import { Button, Text } from "..";
import { colors, spacing } from "../../themes";

export function ReserveErrorModal({ onOk, text, title }) {
  const dimensions = useWindowDimensions();
  const content =
    text ||
    "Unable to submit reservation. Please confirm depart dates are in the future and return dates are after depart dates.";
  const header = title || "Reservation Error";

  return (
    <View style={{ ...styles.modalContainer, height: dimensions.height }}>
      <View style={styles.modalInnerContainer}>
        <View style={styles.modalHeader}>
          <Text style={styles.modalHeaderText}>{header}</Text>
        </View>
        <View>
          <Text style={styles.contentText}>{content}</Text>

          <View style={styles.buttonWrapper}>
            <Button
              title="Ok"
              onPress={onOk}
              variant="contained"
              theme="halloween"
              style={styles.button}
            />
          </View>
        </View>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  modalHeader: {
    marginBottom: spacing.large,
  },
  contentText: { color: colors.palette.darkSlate, marginBottom: spacing.large },
  modalHeaderText: {
    fontWeight: "700",
    fontSize: 22,
    color: colors.error,
  },
  button: {
    // color: colors.palette.darkSlate,
    fontWeight: "700",
    borderWidth: 2,
    flex: 1,
    marginHorizontal: spacing.large,
  },
  buttonWrapper: {
    flexDirection: "row",
    justifyContent: "space-between",
  },

  modalContainer: {
    backgroundColor: "rgba(0,0,0,0.45)",
    height: 800,
    padding: spacing.large,
    justifyContent: "center",
  },
  modalInnerContainer: {
    paddingVertical: 20,
    paddingHorizontal: 25,
    backgroundColor: "white",
    borderRadius: 20,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/LogoutModal.js

import { StyleSheet, useWindowDimensions, View } from "react-native";

import { Button, Text } from "..";
import { colors, spacing } from "../../themes";

export function LogoutModal({ onConfirm, onCancel, text, title }) {
  const dimensions = useWindowDimensions();
  const content = text || "Are you sure you want to log out?";
  const header = title || "Log Out";
  return (
    <View style={{ ...styles.modalContainer, height: dimensions.height }}>
      <View style={styles.modalInnerContainer}>
        <View style={styles.modalHeader}>
          <Text style={styles.modalHeaderText}>{header}</Text>
        </View>
        <View>
          <Text style={styles.contentText}>{content}</Text>

          <View style={styles.buttonWrapper}>
            <Button
              title="Yes"
              onPress={onConfirm}
              variant="contained"
              theme="halloween"
              style={styles.button}
            />
            <Button title="No" onPress={onCancel} style={styles.button} />
          </View>
        </View>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  modalHeader: {
    marginBottom: spacing.large,
  },
  contentText: { color: colors.palette.darkSlate, marginBottom: spacing.large },
  modalHeaderText: {
    fontWeight: "700",
    fontSize: 22,
    color: colors.error,
  },
  button: {
    // color: colors.palette.darkSlate,
    fontWeight: "700",
    borderWidth: 2,
    flex: 1,
    marginHorizontal: spacing.large,
  },
  buttonWrapper: {
    flexDirection: "row",
    justifyContent: "space-between",
  },

  modalContainer: {
    backgroundColor: "rgba(0,0,0,0.45)",
    height: 800,
    padding: spacing.large,
    justifyContent: "center",
  },
  modalInnerContainer: {
    paddingVertical: 20,
    paddingHorizontal: 25,
    backgroundColor: "white",
    borderRadius: 20,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/.DS_Store

Error: Unable to extract code from /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/.DS_Store

File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/ModalWrapper.js

import { Modal } from "react-native";

export function ModalWrapper({ open, children, ...props }) {
  return (
    <Modal visible={open} {...props} style={{ flex: 1 }}>
      {children}
    </Modal>
  );
}


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/ImageGalleryModal.js

import { useEffect, useRef, useState } from "react";
import {
  Animated,
  Image,
  StyleSheet,
  TouchableOpacity,
  useWindowDimensions,
  View,
} from "react-native";

import { Text } from "..";
import { colors, spacing } from "../../themes";
import Close from "../Icons/Close";

export function ImageGalleryModal({ onClose, data = [], title = "" }) {
  const [imagePos, setImagePos] = useState(0);
  const dimensions = useWindowDimensions();

  const onViewableItemsChanged = ({ viewableItems }) => {
    setImagePos(viewableItems[0]?.index || 0);
  };
  const viewabilityConfigCallbackPairs = useRef([{ onViewableItemsChanged }]);

  return (
    <View style={{ ...styles.modalContainer, height: dimensions.height }}>
      <View style={styles.headerContainer}>
        <View style={styles.closeIcon}>
          <TouchableOpacity onPress={onClose}>
            <Close />
          </TouchableOpacity>
        </View>
        <View style={styles.headerTextContainer}>
          <Text style={styles.modalHeaderText}>{title}</Text>
        </View>
      </View>
      <View style={styles.modalInnerContainer}>
        <View style={{ ...styles.sliderWrapper, height: dimensions.height - 170 }}>
          <View style={styles.sliderContainer}>
            <Animated.FlatList
              data={data}
              horizontal
              snapToAlignment="center"
              pagingEnabled
              scrollEnabled
              keyExtractor={(_, idx) => `image-${idx}`}
              showsHorizontalScrollIndicator={false}
              viewabilityConfigCallbackPairs={viewabilityConfigCallbackPairs.current}
              renderItem={({ item }) => (
                <Image source={{ uri: item }} style={{ height: 300, width: dimensions.width }} />
              )}
            />
          </View>
        </View>
      </View>
      <View style={styles.slidingIndicatorWrapper}>
        <Text style={{ color: "white" }}>
          {imagePos + data.length === 0 ? 0 : 1} of {data.length}
        </Text>
        <View
          style={{
            ...styles.slidingIndicator,
            ...(data.length !== 1 && { width: data.length * 22 }),
          }}
        >
          {Array.from({ length: data.length }, () => 0).map((_, idx) => (
            <View
              key={`dot-${idx}`}
              style={{
                ...styles.slidingDot,
                backgroundColor: idx === imagePos ? "#fff" : "#F5F4EB99",
              }}
            />
          ))}
        </View>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  slidingIndicatorWrapper: {
    position: "absolute",
    bottom: 50,
    width: "100%",
    alignItems: "center",
  },
  slidingIndicator: {
    flexDirection: "row",

    justifyContent: "space-between",
    marginTop: 15,
  },
  slidingDot: {
    width: 10,
    height: 10,

    borderRadius: 50,
  },
  sliderContainer: {
    backgroundColor: "white",
    height: 300,
  },
  sliderWrapper: {
    justifyContent: "center",
  },
  headerTextContainer: {
    alignItems: "center",
    padding: 10,
  },
  modalHeader: {
    marginBottom: spacing.large,
  },
  contentText: { color: colors.palette.darkSlate, marginBottom: spacing.large },
  modalHeaderText: {
    fontSize: 16,
    color: "white",
  },
  button: {
    color: colors.palette.darkSlate,
    fontWeight: "700",
    borderWidth: 2,
  },
  buttonWrapper: { paddingHorizontal: spacing.extraLarge },

  modalContainer: {
    backgroundColor: "rgba(0,0,0,1)",
  },
  headerContainer: {
    marginTop: 60,
  },
  closeIcon: { alignItems: "flex-end", paddingRight: 20 },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/modalReducer.js

export const initialState = {
  view: undefined,
  isOpen: false,
  data: null,
};

export const modalReducer = (state, action) => {
  const { type, view, payload, wrapperOptions } = action;

  switch (type) {
    case "open":
      return {
        ...state,
        view,
        data: payload,
        isOpen: true,
        options: wrapperOptions,
      };
    case "close":
      return {
        ...state,
        view: undefined,
        data: null,
        isOpen: false,
        options: null,
      };
    default:
      throw new Error("Unknown Modal Action!");
  }
};


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/index.js

export * from "./DateSelectorModal/DateSelectorModal";
export * from "./TimeSelectorModal";
export * from "./ModalContext";
export * from "./LogoutModal";
export * from "./NetworkErrorModal";
export * from "./ImageGalleryModal";


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/SelectListModal.js

import { useState } from "react";
import { FlatList, StyleSheet, TouchableOpacity, useWindowDimensions, View } from "react-native";

import { Icon } from "@draftbit/ui";

import { Button, Text, Toggle, UserAvatar } from "..";
import { colors } from "../../themes";

export function SelectListModal({
  title,
  subTitle,
  items = [],
  onSubmit,
  onCancel,
  multiselect = false,
  selectOnItemTap = false,
  confirmLabel = "Save",
  cancelLabel = "Cancel",
  imageKey,
  canSelect,
}) {
  const [selectedItems, setSelectedItems] = useState([]);
  const dimensions = useWindowDimensions();

  const handleSelect = (item) => () => {
    if (selectOnItemTap) {
      onSubmit([item]);
    }
    if (!multiselect) {
      if (selectedItems.includes(item.value)) {
        setSelectedItems([]);
      } else {
        setSelectedItems([item.value]);
      }
      return;
    }

    const newItems = [...selectedItems];
    if (selectedItems.includes(item.value)) {
      newItems.splice(newItems.indexOf(item.value), 1);
      setSelectedItems(newItems);
    } else setSelectedItems([...selectedItems, item.value]);
  };
  const handleSubmit = () => {
    const finalSelectedItems = items.filter((item) => selectedItems.includes(item.value));
    onSubmit(multiselect ? finalSelectedItems : finalSelectedItems[0]);
  };
  return (
    <View style={{ ...styles.modalContainer }}>
      <View style={styles.modalContent}>
        <View style={styles.headerTextContainer}>
          <Text style={styles.modalHeaderText}>{title}</Text>
        </View>
        {subTitle && (
          <View style={styles.subTitleContainer}>
            <Text style={styles.subTitle}>{subTitle}</Text>
          </View>
        )}

        <View>
          <FlatList
            showsVerticalScrollIndicator
            contentContainerStyle={styles.flatList}
            data={items}
            renderItem={({ item }) => {
              const isSelected = selectedItems.includes(item.value);
              return (
                <TouchableOpacity onPress={handleSelect(item)}>
                  <View style={styles.listItem}>
                    <View style={styles.listItemInnerContainer}>
                      {item?.iconLabel ? (
                        <View style={styles.iconWrapper}>
                          <Icon
                            color={colors.palette.white}
                            name={`MaterialCommunityIcons/${item?.iconLabel}`}
                            size={25}
                          />
                        </View>
                      ) : (
                        <UserAvatar name={item.label} url={imageKey && item[imageKey]} />
                      )}

                      <View>
                        <Text style={{ color: colors.palette.midnight }}>{item.label}</Text>
                        {item.text && (
                          <Text style={{ color: colors.palette.bodyText }}>{item.text}</Text>
                        )}
                      </View>
                    </View>
                    {canSelect && !selectOnItemTap && (
                      <View>
                        <Toggle
                          value={isSelected}
                          onPress={handleSelect(item)}
                          variant={multiselect ? "checkbox" : "radio"}
                        />
                      </View>
                    )}
                  </View>
                </TouchableOpacity>
              );
            }}
          />
          {/* <View style={{ height: 400 }} /> */}
        </View>
      </View>
      <View style={styles.modalActions}>
        <Button style={styles.button} title={cancelLabel} onPress={onCancel} />
        {canSelect && !selectOnItemTap && (
          <Button
            style={styles.button}
            variant="contained"
            theme="halloween"
            title={confirmLabel}
            onPress={handleSubmit}
          />
        )}
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  modalActions: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    backgroundColor: colors.palette.cloud,
    padding: 20,
    paddingBottom: 30,
    borderTopWidth: 1,
    borderTopColor: colors.palette.darkCloud,
    // position: "absolute",
    // bottom: 50,
  },
  flatList: {
    flexGrow: 1,
    // paddingBottom: 700,
  },
  button: {
    flex: 1,
    marginHorizontal: 8,
  },
  modalContainer: {
    backgroundColor: "#fff",
    flex: 1,
    borderRadius: 30,
    paddingTop: 40,
  },
  modalContent: {
    flex: 1,
  },
  listItem: {
    backgroundColor: colors.palette.white,
    borderBottomWidth: 1,
    borderBottomColor: colors.palette.cardSeparator,
    paddingVertical: 10,
    paddingHorizontal: 16,
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  listItemSelected: {
    backgroundColor: colors.palette.greenAlpha,
  },
  listItemInnerContainer: {
    flexDirection: "row",
    alignItems: "center",
    gap: 10,
  },
  iconWrapper: {
    width: 45,
    height: 45,
    backgroundColor: colors.palette.midnightAlpha,
    borderRadius: 50,
    justifyContent: "center",
    alignItems: "center",
  },
  headerTextContainer: { padding: 20 },
  subTitleContainer: { padding: 20, marginTop: 20 },
  subTitle: { color: colors.palette.sky },
  modalHeaderText: { fontSize: 22, color: colors.palette.midnight },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/RedeemBenefitsModal.js

import { Image, StyleSheet, useWindowDimensions, View } from "react-native";

import { Button, Text } from "..";
import Images from "../../config/Images";
import { colors, spacing } from "../../themes";
import { screens } from "../../utils/screens";

export function RedeemBenefitsModal({ closeModal, partner, navigate }) {
  const dimensions = useWindowDimensions();
  const backToPartnerships = () => {
    closeModal();
    navigate(screens.PartnershipDetailScreen, { partnership: partner });
  };

  return (
    <View style={{ ...styles.modalContainer, height: dimensions.height }}>
      <View style={styles.modalInnerContainer}>
        <View>
          <View style={{ alignItems: "center", marginTop: 20 }}>
            <Image source={Images.CHECKCIRCLE} />
          </View>
          <View>
            <Text
              style={{
                color: colors.palette.midnight,
                fontSize: 16,
                textAlign: "center",
                paddingHorizontal: 30,
                marginVertical: 30,
              }}
            >
              The Experience Concierge team will reach out soon.
            </Text>
          </View>
          <View style={styles.buttonWrapper}>
            <Button
              title="Back to partnership"
              onPress={backToPartnerships}
              style={styles.button}
            />
          </View>
        </View>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  modalHeader: {
    marginBottom: spacing.large,
  },
  modalHeaderText: {
    fontWeight: "700",
    fontSize: 22,
    color: colors.error,
  },
  button: {
    // color: colors.palette.darkSlate,
    fontWeight: "700",
    borderWidth: 2,
    flex: 1,
    marginHorizontal: spacing.large,
    width: "100%",
  },
  buttonWrapper: {
    flexDirection: "row",
    justifyContent: "space-between",
  },

  modalContainer: {
    backgroundColor: "rgba(0,0,0,0.45)",
    height: 800,
    padding: spacing.large,
    justifyContent: "center",
  },
  modalInnerContainer: {
    paddingVertical: 20,
    paddingHorizontal: 25,
    backgroundColor: "white",
    borderRadius: 20,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/TransportModal.js

import { useEffect, useMemo, useState } from "react";
import { FlatList, StyleSheet, TouchableOpacity, View } from "react-native";

import { Icon } from "@draftbit/ui";
import { TabView } from "react-native-tab-view";

import { Button, Text, Toggle } from "..";
import { useStores } from "../../models/root";
import { colors } from "../../themes";

function TransportItem({ item, onAdd, active }) {
  const style = active ? [styles.viewItem, styles.viewItemActive] : styles.viewItem;

  return (
    <TouchableOpacity style={style} onPress={onAdd}>
      <View style={styles.viewItemContent}>
        <View style={styles.viewItemIcon}>
          <Icon color={colors.palette.white} name={item.icon} size={24} />
        </View>
        <Text style={styles.viewItemText}>{item.label}</Text>
      </View>
      {active ? <Toggle variant="radio" value /> : null}
    </TouchableOpacity>
  );
}

function TransportModal({ selected, onClose, onSave }) {
  const [activeTab, setActiveTab] = useState(0);
  const [cart, setCart] = useState({});
  const {
    cateringStore: { getTransportCategories },
  } = useStores();

  useEffect(() => {
    if (selected) {
      setCart(selected.reduce((acc, curr) => ({ ...acc, [curr.id]: curr.quantity }), {}));
    } else {
      setCart({});
    }
  }, [selected]);

  const categories = getTransportCategories();

  const reverseCategory = useMemo(() => {
    const result = {};
    categories.forEach((category) => {
      category.options.forEach((option) => {
        result[option.id] = category.id;
      });
    });
    return result;
  }, [categories]);

  const routes = useMemo(
    () =>
      categories.map((category) => ({
        key: category.id.toString(),
        title: category.label,
        icon: `MaterialCommunityIcons/${category.icon}`,
      })),
    [categories]
  );

  const handleAddItem = (id) => {
    const otherCart = Object.keys(cart)
      .filter((optionId) => reverseCategory[optionId] !== reverseCategory[id])
      .reduce((acc, curr) => ({ ...acc, [curr]: 1 }), {});
    setCart({
      ...cart,
      [id]: 1 - (cart[id] ?? 0),
    });
  };

  const renderScene = ({ route }) => {
    const id = parseInt(route.key);
    const foundIdx = categories.findIndex((category) => category.id === id);
    if (foundIdx === -1) {
      return null;
    }

    const options = categories[foundIdx].options.map((option) => ({
      ...option,
      icon: `MaterialCommunityIcons/${option.icon}`,
    }));

    return (
      <FlatList
        style={styles.listView}
        data={options}
        renderItem={({ item }) => (
          <TransportItem
            item={item}
            onAdd={() => handleAddItem(item.id)}
            active={cart[item.id] > 0}
          />
        )}
        showsHorizontalScrollIndicator={false}
      />
    );
  };

  const handleSave = () => {
    onSave(
      Object.keys(cart)
        .map((key) => ({
          id: parseInt(key),
          quantity: cart[key],
        }))
        .filter((item) => item.quantity > 0)
    );

    setCart({});
  };

  const renderTabBar = () => (
    <View style={styles.tabBar}>
      {routes.map((route, index) => {
        const isActive = activeTab === index;
        return (
          <TouchableOpacity
            style={isActive ? [styles.tabItem, styles.activeTabItem] : styles.tabItem}
            onPress={() => setActiveTab(index)}
            key={`transport-tab-${index}-${route.key}`}
          >
            <Icon
              name={route.icon}
              size={25}
              color={isActive ? colors.palette.sky : colors.palette.bodyText}
            />
            <Text
              style={isActive ? [styles.tabItemText, styles.activeTabItemText] : styles.tabItemText}
            >
              {route.title}
            </Text>
          </TouchableOpacity>
        );
      })}
    </View>
  );

  return (
    <>
      <View style={styles.modalHeader}>
        <Text style={styles.modalHeaderText}>Ground Transportation</Text>
      </View>
      <View style={styles.modalContent}>
        <TabView
          navigationState={{ index: activeTab, routes }}
          renderTabBar={renderTabBar}
          renderScene={renderScene}
          onIndexChange={setActiveTab}
          swipeEnabled={false}
        />
      </View>
      <View style={styles.modalActions}>
        <Button style={styles.button} title="Cancel" onPress={onClose} />
        <Button
          style={styles.button}
          variant="contained"
          theme="halloween"
          title="Save"
          onPress={handleSave}
        />
      </View>
    </>
  );
}

const styles = StyleSheet.create({
  modalHeader: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    backgroundColor: colors.palette.midnight,
    paddingHorizontal: 16,
    paddingVertical: 18,
  },
  modalHeaderText: {
    color: colors.palette.white,
    fontSize: 22,
    lineHeight: 28,
  },
  modalHeaderActionView: {
    flexDirection: "row",
  },
  modalContent: {
    flex: 1,
  },
  tabBar: {
    flexDirection: "row",
    alignItems: "flex-end",
    paddingHorizontal: 16,
    backgroundColor: colors.palette.midnight,
  },
  tabItem: {
    flexDirection: "row",
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    paddingBottom: 20,


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/CancelFlightModal.js

import { StyleSheet, useWindowDimensions, View } from "react-native";

import { Button, Text } from "..";
import { colors, spacing } from "../../themes";

export function CancelFlightModal({ onConfirm, onCancel, text, title }) {
  const dimensions = useWindowDimensions();
  const content =
    text ||
    "Proceeding with this cancellation will cancel the entire trip, not just this leg. Are you sure you want to continue?";
  const header = title || "Cancel?";
  return (
    <View style={{ ...styles.modalContainer, height: dimensions.height }}>
      <View style={styles.modalInnerContainer}>
        <View style={styles.modalHeader}>
          <Text style={styles.modalHeaderText}>{header}</Text>
        </View>
        <View>
          <Text style={styles.contentText}>{content}</Text>

          <View style={styles.buttonWrapper}>
            <Button
              title="Yes"
              onPress={onConfirm}
              variant="contained"
              theme="halloween"
              style={styles.button}
            />
            <Button title="No" onPress={onCancel} style={styles.button} />
          </View>
        </View>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  modalHeader: {
    marginBottom: spacing.large,
  },
  contentText: { color: colors.palette.darkSlate, marginBottom: spacing.large },
  modalHeaderText: {
    fontWeight: "700",
    fontSize: 22,
    color: colors.error,
  },
  button: {
    // color: colors.palette.darkSlate,
    fontWeight: "700",
    borderWidth: 2,
    flex: 1,
    marginHorizontal: spacing.large,
  },
  buttonWrapper: {
    flexDirection: "row",
    justifyContent: "space-between",
  },

  modalContainer: {
    backgroundColor: "rgba(0,0,0,0.45)",
    height: 800,
    padding: spacing.large,
    justifyContent: "center",
  },
  modalInnerContainer: {
    paddingVertical: 20,
    paddingHorizontal: 25,
    backgroundColor: "white",
    borderRadius: 20,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/WebViewModal.js

import { StyleSheet, useWindowDimensions, View } from "react-native";

import { useSafeAreaInsets } from "react-native-safe-area-context";
import WebView from "react-native-webview";

import { Button, Text } from "..";
import { colors, spacing } from "../../themes";

export function WebViewModal({ onClose, content, url, buttonText = "Ok" }) {
  const dimensions = useWindowDimensions();
  const insets = useSafeAreaInsets();

  const updatedContent = content
    .replace('<meta content="width=device-width, initial-scale=1" name="viewport">', "")
    .replace('<meta content="width=device-width, initial-scale=1" name="viewport" />', "")
    .replace(
      "<head>",
      '<head><meta name="viewport" content="width=device-width, initial-scale=0.55, maximum-scale=0.55, user-scalable=no" />'
    );

  return (
    <View
      style={{
        ...styles.modalContainer,
        height: dimensions.height,
        marginTop: insets.top,
      }}
    >
      <WebView
        // scalesPageToFit
        style={styles.webView}
        source={{
          html: updatedContent,
        }}
        // automaticallyAdjustContentInsets
        // javaScriptEnabled
        // domStorageEnabled
        // mixedContentMode="always"
      />
      <View style={styles.buttonWrapper}>
        <Button title={buttonText} onPress={onClose} style={styles.button} />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  button: {
    color: colors.palette.darkSlate,
    fontWeight: "700",
    borderWidth: 2,
  },
  buttonWrapper: {
    borderTopWidth: 1,
    borderTopColor: colors.palette.cardSeparator,
    backgroundColor: colors.palette.cloud,
    padding: spacing.extraLarge,
  },
  modalContainer: {
    backgroundColor: "white",
    flex: 1,
  },
  webView: {
    // flex: 1,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/ModalContext.js

import { createContext, useContext, useReducer } from "react";

import { initialState, modalReducer } from "./modalReducer";

export const ModalStateContext = createContext(initialState);
export const ModalDispatchContext = createContext(null);

export function ModalProvider({ children }) {
  const [state, dispatch] = useReducer(modalReducer, initialState);
  return (
    <ModalStateContext.Provider value={state}>
      <ModalDispatchContext.Provider value={dispatch}>
        {children}
      </ModalDispatchContext.Provider>
    </ModalStateContext.Provider>
  );
}

export function useModalState() {
  const context = useContext(ModalStateContext);
  if (context === undefined) {
    throw new Error(`useModalState must be used within a ModalProvider`);
  }
  return context;
}

export function useModalAction() {
  const dispatch = useContext(ModalDispatchContext);
  if (dispatch === undefined) {
    throw new Error(`useModalAction must be used within a ModalProvider`);
  }
  return {
    openModal(view, payload, wrapperOptions = {}) {
      dispatch({ type: "open", view, payload, wrapperOptions });
    },
    closeModal() {
      dispatch({ type: "close" });
    },
  };
}


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/CateringModal.js

import { useEffect, useMemo, useState } from "react";
import {
  FlatList,
  TextInput as NativeTextInput,
  StyleSheet,
  TouchableOpacity,
  useWindowDimensions,
  View,
} from "react-native";

import { Icon, IconButton } from "@draftbit/ui";
import { TabView } from "react-native-tab-view";

import { Button, Text, TextInput } from "..";
import { useStores } from "../../models/root";
import { colors, spacing } from "../../themes";

function CateringViewItem({ item, onAdd, onRemove, quantity }) {
  const isAddedToCart = quantity > 0;

  return (
    <View style={styles.viewItem}>
      <View style={styles.viewItemContent}>
        <View
          style={
            isAddedToCart ? [styles.viewItemIcon, styles.viewItemIconActive] : styles.viewItemIcon
          }
        >
          {isAddedToCart ? (
            <Text style={styles.viewItemQuantity}>{quantity}</Text>
          ) : (
            <Icon color={colors.palette.white} name={item.icon} size={24} />
          )}
        </View>
        <Text style={styles.viewItemText}>{item.label}</Text>
      </View>
      <View style={styles.viewItemActions}>
        <IconButton
          onPress={onAdd}
          style={styles.addButton}
          color={colors.palette.midnight}
          icon="MaterialCommunityIcons/plus"
          size={24}
        />
        <IconButton
          onPress={onRemove}
          color={isAddedToCart ? colors.palette.midnight : colors.palette.midnightAlpha}
          icon="MaterialCommunityIcons/minus"
          size={24}
        />
      </View>
    </View>
  );
}

function DrinksOrSnacks({ data, onAdd, onRemove, quantities }) {
  return (
    <FlatList
      showsVerticalScrollIndicator={false}
      style={styles.listView}
      data={data}
      renderItem={({ item }) => (
        <CateringViewItem
          item={item}
          onAdd={() => onAdd(item.id)}
          onRemove={() => onRemove(item.id)}
          quantity={quantities[item.id]}
        />
      )}
      showsHorizontalScrollIndicator={false}
    />
  );
}

function SpecialRequests({ notes, onChange }) {
  const dimensions = useWindowDimensions();
  return (
    <View style={{ paddingHorizontal: 10 }}>
      <View
        style={{
          marginTop: 10,
          height: dimensions.height - 300,
        }}
      >
        <Text style={{ ...styles.viewItemText, marginTop: 0 }}>Notes</Text>
        <View style={{ flex: 1, borderColor: "#f5f5f2", borderWidth: 2 }}>
          <NativeTextInput
            style={{ ...styles.specialRequest }}
            value={notes}
            multiline
            placeholder="ex. Needs seat harness, will be in carrier, etc"
            onChangeText={onChange}
          />
        </View>
      </View>
    </View>
  );
}

export function CateringModal({ selected, onClose, onSave }) {
  const [activeTab, setActiveTab] = useState(0);
  const [cart, setCart] = useState({});
  const [notes, setNotes] = useState("");
  const {
    cateringStore: { getCateringCategories },
  } = useStores();

  useEffect(() => {
    if (selected) {
      setCart(selected.reduce((acc, curr) => ({ ...acc, [curr.id]: curr.quantity }), {}));
    } else {
      setCart({});
    }
  }, [selected]);

  const categories = getCateringCategories();

  const totalQuantity = useMemo(() => Object.values(cart).reduce((a, c) => a + c, 0), [cart]);

  const routes = useMemo(() => {
    if (!categories) {
      return [];
    }

    return [
      ...categories.map((category) => ({
        key: category.id.toString(),
        title: category.label,
        icon: `MaterialCommunityIcons/${category.icon}`,
      })),
      {
        key: "special-request",
        title: "Special Request",
        icon: "MaterialCommunityIcons/plus",
      },
    ];
  }, [categories]);

  const handleAddItem = (id) => {
    setCart({
      ...cart,
      [id]: (cart[id] || 0) + 1,
    });
  };

  const handleRemoveItem = (id) => {
    if (!cart[id]) {
      return;
    }
    setCart({
      ...cart,
      [id]: cart[id] - 1,
    });
  };

  const handleNotesChange = (newNotes) => {
    setNotes(newNotes);
  };

  const renderScene = ({ route }) => {
    const id = parseInt(route.key);
    const foundIdx = categories.findIndex((category) => category.id === id);
    if (foundIdx === -1) {
      return <SpecialRequests notes={notes} onChange={handleNotesChange} />;
    }

    const options = categories[foundIdx].options.map((option) => ({
      ...option,
      icon: `MaterialCommunityIcons/${option.icon}`,
    }));

    const sortedOptions = options.sort((a, b) => a.label.localeCompare(b.label));
    return (
      <DrinksOrSnacks
        data={sortedOptions}
        onAdd={handleAddItem}
        onRemove={handleRemoveItem}
        quantities={cart || {}}
      />
    );
  };

  const handleSave = () => {
    onSave(
      Object.keys(cart)
        .map((key) => ({
          id: parseInt(key),
          quantity: cart[key],
        }))
        .filter((item) => item.quantity > 0)
    );

    setCart({});
  };

  const renderTabBar = () => (
    <View style={styles.tabBar}>
      {routes.map((route, index) => {
        const isActive = activeTab === index;
        return (


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/NetworkErrorModal.js

import { StyleSheet, useWindowDimensions, View } from "react-native";

import { Button, Text } from "..";
import { colors, spacing } from "../../themes";

export function NetworkErrorModal({ onClose, text, title, buttonText = "Ok" }) {
  const dimensions = useWindowDimensions();
  const content = text || "Please check your network connection";
  const header = title || "Network Error";
  return (
    <View style={{ ...styles.modalContainer, height: dimensions.height }}>
      <View style={styles.modalInnerContainer}>
        <View style={styles.modalHeader}>
          <Text style={styles.modalHeaderText}>{header}</Text>
        </View>
        <View>
          <Text style={styles.contentText}>{content}</Text>

          <View style={styles.buttonWrapper}>
            <Button title={buttonText} onPress={onClose} style={styles.button} />
          </View>
        </View>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  modalHeader: {
    marginBottom: spacing.large,
  },
  contentText: { color: colors.palette.darkSlate, marginBottom: spacing.large },
  modalHeaderText: {
    fontWeight: "700",
    fontSize: 22,
    color: colors.error,
  },
  button: {
    color: colors.palette.darkSlate,
    fontWeight: "700",
    borderWidth: 2,
  },
  buttonWrapper: { paddingHorizontal: spacing.extraLarge },

  modalContainer: {
    backgroundColor: "rgba(0,0,0,0.45)",
    height: 800,
    padding: spacing.large,
    justifyContent: "center",
  },
  modalInnerContainer: {
    paddingVertical: 20,
    paddingHorizontal: 25,
    backgroundColor: "white",
    borderRadius: 20,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/InformationModal.js

import { StyleSheet, useWindowDimensions, View } from "react-native";

import { Button, Text } from "..";
import { colors, spacing } from "../../themes";

export function InformationModal({ onClose, text, title, buttonText = "Ok" }) {
  const dimensions = useWindowDimensions();
  const content = text || "We shall be in touch.";
  const header = title || "Thanks!";
  return (
    <View style={{ ...styles.modalContainer, height: dimensions.height }}>
      <View style={styles.modalInnerContainer}>
        <View style={styles.modalHeader}>
          <Text style={styles.modalHeaderText}>{header}</Text>
        </View>
        <View>
          <Text style={styles.contentText}>{content}</Text>

          <View style={styles.buttonWrapper}>
            <Button title={buttonText} onPress={onClose} style={styles.button} />
          </View>
        </View>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  modalHeader: {
    marginBottom: spacing.large,
  },
  contentText: { color: colors.palette.darkSlate, marginBottom: spacing.large },
  modalHeaderText: {
    fontWeight: "700",
    fontSize: 22,
    color: colors.palette.midBlack,
  },
  button: {
    color: colors.palette.darkSlate,
    fontWeight: "700",
    borderWidth: 2,
  },
  buttonWrapper: { paddingHorizontal: spacing.extraLarge },

  modalContainer: {
    backgroundColor: "rgba(0,0,0,0.45)",
    height: 800,
    padding: spacing.large,
    justifyContent: "center",
  },
  modalInnerContainer: {
    paddingVertical: 20,
    paddingHorizontal: 25,
    backgroundColor: "white",
    borderRadius: 20,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/TimeSelectorModal.js

import { useEffect, useRef, useState } from "react";
import { FlatList, StyleSheet, TouchableOpacity, useWindowDimensions, View } from "react-native";

import { Button, Text } from "..";
import { colors, spacing } from "../../themes";
import Close from "../Icons/Close";

const ITEM_HEIGHT = 60;

export function TimeSelectorModal({
  onConfirm,
  onClose,
  selectedTimes,
  setSelectedTimes,
  index: position,
  title,
}) {
  const dimensions = useWindowDimensions();
  const [selectedHourIndex, setSelectedHourIndex] = useState(1);
  const [selectedMinuteIndex, setSelectedMinuteIndex] = useState(1);
  const [selectedPeriodIndex, setSelectedPeriodIndex] = useState(1);
  const hours = ["", ...Array.from({ length: 12 }, (_, i) => i + 1), ""];
  const minutes = ["", ...Array.from({ length: 4 }, (_, i) => (i === 0 ? "00" : `${i * 15}`)), ""];
  const period = ["", "AM", "PM", ""];

  const viewConfigRef = { viewAreaCoveragePercentThreshold: 50 };

  const handleItemsChanged =
    (type) =>
    ({ viewableItems }) => {
      if (viewableItems.length === 0) {
        return;
      }

      if (type === "HOUR") {
        if (viewableItems.length === 1) {
          setSelectedHourIndex(viewableItems[0].index);
        } else if (viewableItems.length >= 2) {
          setSelectedHourIndex(viewableItems[1].index);
        }
      } else if (type === "MINUTE") {
        if (viewableItems.length === 1) {
          setSelectedMinuteIndex(viewableItems[0].index);
        } else if (viewableItems.length >= 2) {
          setSelectedMinuteIndex(viewableItems[1].index);
        }
      } else if (type === "PERIOD") {
        if (viewableItems.length === 1) {
          setSelectedPeriodIndex(viewableItems[0].index);
        } else if (viewableItems.length >= 2) {
          setSelectedPeriodIndex(viewableItems[1].index);
        }
      }
    };

  const hoursViewabilityConfigCallbackPairs = useRef([
    { viewabilityConfig: viewConfigRef, onViewableItemsChanged: handleItemsChanged("HOUR") },
  ]);

  const minutesViewabilityConfigCallbackPairs = useRef([
    { viewabilityConfig: viewConfigRef, onViewableItemsChanged: handleItemsChanged("MINUTE") },
  ]);

  const periodViewabilityConfigCallbackPairs = useRef([
    { viewabilityConfig: viewConfigRef, onViewableItemsChanged: handleItemsChanged("PERIOD") },
  ]);

  const hourFlatListRef = useRef(null);
  const minFlatListRef = useRef(null);
  const periodFlatListRef = useRef(null);

  useEffect(() => {
    setTimeout(() => {
      hourFlatListRef?.current?.scrollToItem({
        // eslint-disable-next-line
        item: hours[selectedTimes[position] ? selectedTimes?.[position]?.hour - 1 : 8],
        animated: true,
      });
      const minItemPos = selectedTimes[position]
        ? minutes.indexOf(selectedTimes?.[position]?.minute)
        : 1;
      minFlatListRef?.current?.scrollToItem({
        // eslint-disable-next-line
        item: minutes[minItemPos - 1],
        animated: true,
      });

      const periodItemPos = selectedTimes[position]
        ? period.indexOf(selectedTimes?.[position]?.prd)
        : 1;
      periodFlatListRef?.current?.scrollToItem({
        // eslint-disable-next-line
        item: period[periodItemPos - 1],
        animated: true,
      });
    }, 1);
    // eslint-disable-next-line
  }, []);
  const getItemLayout = (data, index) => {
    const offset = ITEM_HEIGHT * index;

    return {
      length: ITEM_HEIGHT,
      offset,
      index,
    };
  };

  const handleConfirm = () => {
    const prd = period[selectedPeriodIndex];
    const hour = hours[selectedHourIndex];
    const minute = minutes[selectedMinuteIndex];
    setSelectedTimes({ ...selectedTimes, [position]: { hour, minute, prd } });

    let convertedHour = hour;
    if (prd === "AM" && convertedHour === 12) {
      convertedHour = 0;
    } else if (prd === "PM" && convertedHour !== 12) {
      convertedHour += 12;
    }

    const date = new Date();
    date.setHours(convertedHour);
    date.setMinutes(minute);
    date.setSeconds(0);

    onConfirm(date);
  };

  return (
    <View style={styles.modalContainer}>
      <View style={styles.modalInnerContainer}>
        <View>
          <View style={{ alignItems: "center", padding: 15, marginBottom: 30 }}>
            <Text style={{ color: colors.palette.midnight, fontSize: 22 }}>
              {title || "Depart Time"}
            </Text>
          </View>
          <View style={styles.closeIconWrapper}>
            <TouchableOpacity onPress={onClose}>
              <Close />
            </TouchableOpacity>
          </View>
        </View>

        <View style={styles.slidingItemsWrapper}>
          <FlatList
            ref={hourFlatListRef}
            showsVerticalScrollIndicator={false}
            data={hours}
            viewabilityConfigCallbackPairs={hoursViewabilityConfigCallbackPairs.current}
            snapToInterval={ITEM_HEIGHT}
            keyExtractor={(_, index) => index}
            getItemLayout={getItemLayout}
            renderItem={({ item, index }) => (
              <View
                style={
                  index === selectedHourIndex
                    ? [styles.pickerItem, styles.pickerItemActive]
                    : styles.pickerItem
                }
              >
                <Text
                  style={
                    index === selectedHourIndex
                      ? [styles.pickerItemText, styles.pickerItemTextActive]
                      : styles.pickerItemText
                  }
                >
                  {item}
                </Text>
              </View>
            )}
          />
          <FlatList
            ref={minFlatListRef}
            getItemLayout={getItemLayout}
            showsVerticalScrollIndicator={false}
            data={minutes}
            viewabilityConfigCallbackPairs={minutesViewabilityConfigCallbackPairs.current}
            snapToInterval={ITEM_HEIGHT}
            renderItem={({ item, index }) => (
              <View
                style={
                  index === selectedMinuteIndex
                    ? [styles.pickerItem, styles.pickerItemActive]
                    : styles.pickerItem
                }
              >
                <Text
                  style={
                    index === selectedMinuteIndex
                      ? [styles.pickerItemText, styles.pickerItemTextActive]
                      : styles.pickerItemText
                  }
                >
                  {item}
                </Text>
              </View>
            )}


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/PassengersViewModal.js

import { FlatList, StyleSheet, useWindowDimensions, View } from "react-native";

import { MaterialIcons } from "@expo/vector-icons";

import { Button, Text, UserAvatar } from "..";
import { colors } from "../../themes";

export function PassengersViewModal({
  title,
  items = [],
  onCancel,
  // confirmLabel = "Save",
  cancelLabel = "Cancel",
}) {
  const dimensions = useWindowDimensions();
  return (
    <View style={{ ...styles.modalContainer, height: dimensions.height }}>
      <View>
        <View style={styles.headerTextContainer}>
          <Text style={styles.modalHeaderText}>{title}</Text>
        </View>

        <View style={styles.subTitleContainer}>
          <Text style={styles.subTitle}>FAMILY /FRIENDS / PETS</Text>
        </View>

        <View>
          <FlatList
            showsVerticalScrollIndicator={false}
            contentContainerStyle={{ height: dimensions.height - 150 }}
            data={items}
            renderItem={({ item }) => {
              const contact = item.contact || item.contact_id;
              const name = `${contact?.firstName} ${contact?.lastName}`;
              return (
                <View style={styles.listItem}>
                  <View style={styles.listItemInnerContainer}>
                    <UserAvatar name={name} url={contact?.photo_uuid} />
                    <View style={styles.listItemInfo}>
                      <Text style={{ color: colors.palette.midnight }}>{name}</Text>
                      {item?.isLead ? (
                        <MaterialIcons name="star" size={20} color={colors.palette.bodyText} />
                      ) : null}
                    </View>
                  </View>
                </View>
              );
            }}
          />
        </View>
      </View>
      <View style={styles.modalActions}>
        <Button style={styles.button} title={cancelLabel} onPress={onCancel} />
        {/* <Button
          style={styles.button}
          variant="contained"
          theme="halloween"
          title={confirmLabel}
          onPress={onSubmit}
        /> */}
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  modalActions: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    backgroundColor: colors.palette.cloud,
    padding: 20,
    paddingBottom: 30,
    borderTopWidth: 1,
    borderTopColor: colors.palette.darkCloud,
    position: "absolute",
    bottom: 55,
  },
  button: {
    flex: 1,
    marginHorizontal: 8,
  },
  modalContainer: {
    backgroundColor: "#fff",
    marginTop: 50,
    borderRadius: 30,
  },
  listItem: {
    backgroundColor: colors.palette.greenAlpha,
    padding: 20,
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  listItemInnerContainer: {
    flexDirection: "row",
    alignItems: "center",
    gap: 10,
  },
  listItemInfo: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    flex: 1,
  },
  headerTextContainer: { padding: 20 },
  subTitleContainer: { padding: 20, marginTop: 20 },
  subTitle: { color: colors.palette.sky },
  modalHeaderText: { fontSize: 22, color: colors.palette.midnight },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/PassengerModal.js

import React, { useCallback, useEffect, useMemo, useState } from "react";
import { ActivityIndicator, SectionList, StyleSheet, TouchableOpacity, View } from "react-native";

import { Icon } from "@draftbit/ui";

import { Button, SearchInput, Text, Toggle, UserAvatar } from "..";
import { useContact } from "../../contexts/ContactContext";
import { useStores } from "../../models/root";
import { colors, spacing } from "../../themes";
import NewPassengerForm from "../forms/NewPassengerForm";

const MAXIMUM_PASSENGERS = 4;

function PassengerModal({ onClose, selected, onSave }) {
  const [isListView, setListView] = useState(true);
  const [loading, setLoading] = useState(false);
  const { contacts, pets } = useContact();
  const {
    userStore: { user },
    passengerStore,
  } = useStores();
  const [selectedPassengers, setSelectedPassengers] = useState([]);
  const [searchValue, setSearchValue] = useState("");

  useEffect(() => {
    if (selected) {
      setSelectedPassengers([...selected]);
    }
  }, [selected]);

  const passengersAndId = useMemo(() => {
    const passengers = [
      user,
      ...(Array.isArray(contacts) ? contacts : []),
      ...(Array.isArray(pets) ? pets : []),
    ];
    const passengersIds = passengers.map((p) => p.id);
    return { passengers, passengersIds };
  }, [user, contacts, pets]);
  const { passengers } = passengersAndId;

  const sectionListData = useMemo(
    () => [
      {
        title: "Family / Friends / Pets",
        data: passengers.filter(
          (p) => p && p.label?.toLowerCase().includes(searchValue.toLowerCase()) && !p.isGuest()
        ),
      },
      {
        title: "Contacts",
        data: passengers.filter(
          (p) => p && p.label?.toLowerCase().includes(searchValue.toLowerCase()) && p.isGuest()
        ),
      },
    ],
    [passengers, searchValue]
  );

  const isSelectDisabled = (selectedPassengers?.length || 0) >= MAXIMUM_PASSENGERS;
  const remainingSeats = MAXIMUM_PASSENGERS - (selectedPassengers?.length || 0);

  const handleSelect = (item) => () => {
    const newPassengers = [...selectedPassengers];

    if (newPassengers?.includes(item.id)) {
      newPassengers.splice(newPassengers.indexOf(item.id), 1);
      setSelectedPassengers([...newPassengers]);
    } else {
      if (isSelectDisabled) {
        return;
      }
      setSelectedPassengers([...newPassengers, item.id]);
    }
  };

  const handleCreateContact = async (contact) => {
    setLoading(true);
    try {
      await passengerStore.createPassenger(contact);
      setListView(true);
    } catch (error) {
      console.error("Error creating passenger:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleCreatePassenger = () => {
    setListView(false);
  };

  const handleSave = () => {
    onSave(selectedPassengers);
  };

  const renderItem = ({ item }) => {
    const isItemSelected = selectedPassengers?.includes(item.id);
    return (
      <TouchableOpacity
        style={
          isItemSelected
            ? [styles.passengerItem, styles.passengerItemSelected]
            : styles.passengerItem
        }
        onPress={handleSelect(item)}
      >
        <View style={styles.passengerItemAvatar}>
          <UserAvatar name={item.label} size={42} url={item?.photo_uuid} />
        </View>
        <View style={styles.passengerItemInfo}>
          <View>
            <Text>{item.label}</Text>
            <Text style={{ fontSize: 11 }}>{item?.relationshipType?.[0]?.label}</Text>
          </View>
          <Toggle value={isItemSelected} onPress={handleSelect(item)} />
        </View>
      </TouchableOpacity>
    );
  };

  const handleSearchValueChange = (value) => {
    setSearchValue(value);
  };

  return (
    <>
      <View style={styles.modalHeader}>
        <View style={styles.modalStaticHeader}>
          <Text style={styles.modalHeaderText}>Passengers</Text>

          <TouchableOpacity style={styles.modalActionButton} onPress={handleCreatePassenger}>
            <Icon color={colors.palette.midnight} name="MaterialCommunityIcons/plus" size={24} />
            <Text style={styles.modalActionButtonText}>Create New</Text>
          </TouchableOpacity>
        </View>
        <SearchInput
          value={searchValue}
          onChange={handleSearchValueChange}
          style={{ marginHorizontal: 15, marginBottom: 10 }}
        />
      </View>
      {isListView ? (
        <>
          <View style={styles.modalContent}>
            <Text style={styles.modalContentHeader}>
              {remainingSeats} {remainingSeats > 1 ? "Passengers" : "Passenger"} Left
            </Text>
            <SectionList
              sections={sectionListData}
              renderItem={renderItem}
              ListFooterComponent={loading ? <ActivityIndicator /> : null}
              renderSectionHeader={({ section: { title } }) => (
                <Text style={styles.modalContentSubHeader}>{title}</Text>
              )}
              renderSectionFooter={({ section: { data } }) => {
                if (data.length > 0) {
                  return null;
                }
                return <Text style={styles.modalContentEmptySection}>No content</Text>;
              }}
              stickySectionHeadersEnabled={false}
            />
          </View>
          <View style={styles.modalActions}>
            <Button style={styles.button} title="Cancel" onPress={onClose} />
            <Button
              style={styles.button}
              variant="contained"
              theme="halloween"
              title="Save"
              onPress={handleSave}
            />
          </View>
        </>
      ) : (
        <NewPassengerForm
          loading={loading}
          onSave={handleCreateContact}
          onCancel={() => setListView(true)}
        />
      )}
    </>
  );
}

const styles = StyleSheet.create({
  modalHeader: {
    borderBottomWidth: 1,
    borderColor: colors.palette.cardSeparator,
  },
  modalStaticHeader: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    backgroundColor: colors.palette.white,
    padding: 12,
  },
  modalHeaderText: {
    color: colors.palette.midnight,


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/SignContractModal.js

import { StyleSheet, useWindowDimensions, View } from "react-native";

import { Button, Text } from "..";
import { colors, spacing } from "../../themes";

export function SignContractModal({ onConfirm, onCancel, text, title }) {
  const dimensions = useWindowDimensions();
  const content =
    text || "Your flight request has been submitted. Do you want to sign your contract now?";
  const header = title || "Sign Contract";

  return (
    <View style={{ ...styles.modalContainer, height: dimensions.height }}>
      <View style={styles.modalInnerContainer}>
        <View style={styles.modalHeader}>
          <Text style={styles.modalHeaderText}>{header}</Text>
        </View>
        <View>
          <Text style={styles.contentText}>{content}</Text>

          <View style={styles.buttonWrapper}>
            <Button
              title="Yes"
              onPress={onConfirm}
              variant="contained"
              theme="halloween"
              style={styles.button}
            />
            <Button title="No" onPress={onCancel} style={styles.button} />
          </View>
        </View>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  modalHeader: {
    marginBottom: spacing.large,
  },
  contentText: { color: colors.palette.darkSlate, marginBottom: spacing.large },
  modalHeaderText: {
    fontWeight: "700",
    fontSize: 22,
    color: colors.error,
  },
  button: {
    // color: colors.palette.darkSlate,
    fontWeight: "700",
    borderWidth: 2,
    flex: 1,
    marginHorizontal: spacing.large,
  },
  buttonWrapper: {
    flexDirection: "row",
    justifyContent: "space-between",
  },

  modalContainer: {
    backgroundColor: "rgba(0,0,0,0.45)",
    height: 800,
    padding: spacing.large,
    justifyContent: "center",
  },
  modalInnerContainer: {
    paddingVertical: 20,
    paddingHorizontal: 25,
    backgroundColor: "white",
    borderRadius: 20,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Screens/.DS_Store

Error: Unable to extract code from /Users/codeshack-vii/Documents/_projects/Volato/components/Screens/.DS_Store

File: /Users/codeshack-vii/Documents/_projects/Volato/components/Icons/GreenAirplane.js

import * as React from "react";

import Svg, { Path } from "react-native-svg";

import { colors } from "../../themes";

function GreenAirplane(props) {
  return <Svg width={25} height={24} fill="none" {...props}>
    <Path
      fill={colors.palette.green}
      d="M8.5 22h2l5-8.5H21c.83 0 1.5-.67 1.5-1.5s-.67-1.5-1.5-1.5h-5.5l-5-8.5h-2l2.5 8.5H5.5L4 8H2.5l1 4-1 4H4l1.5-2.5H11L8.5 22Z"
    />
  </Svg>
}
export default GreenAirplane;


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Icons/ChevronRight.js

import * as React from "react";

import Svg, { Path } from "react-native-svg";

function ChevronRight(props) {
  return <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={24}
    height={24}
    fill="none"
    {...props}
  >
    <Path
      stroke="#494F5E"
      strokeLinejoin="round"
      strokeWidth={1.5}
      d="m10 18 5-5.5L10 7"
    />
  </Svg>
}

export default ChevronRight;


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Icons/Airplane.js

import * as React from "react";

import Svg, { Path } from "react-native-svg";

import { colors } from "../../themes";

function Airplane(props) {
  return <Svg width={25} height={24} fill="none" {...props}>
    <Path
      fill={colors.palette.sky}
      d="M8.5 22h2l5-8.5H21c.83 0 1.5-.67 1.5-1.5s-.67-1.5-1.5-1.5h-5.5l-5-8.5h-2l2.5 8.5H5.5L4 8H2.5l1 4-1 4H4l1.5-2.5H11L8.5 22Z"
    />
  </Svg>
}
export default Airplane;


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Icons/Edit.js

import * as React from "react";

import Svg, { Path, Rect } from "react-native-svg";

function Edit(props) {
  return <Svg
    xmlns="http://www.w3.org/2000/svg"
    width={36}
    height={36}
    fill="none"
    {...props}
  >
    <Rect
      width={36}
      height={36}
      x={36}
      y={36}
      fill="#BCC7C8"
      rx={18}
      transform="rotate(180 36 36)"
    />
    <Path
      fill="#494F5E"
      d="M22.555 10.303a2.4 2.4 0 0 1 3.395 3.394l-.952.952-3.394-3.394.951-.952Zm-2.648 2.649L9.853 23.006V26.4h3.394L23.3 16.346l-3.394-3.394Z"
    />
  </Svg>
}

export default Edit;


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Icons/Picture.js

import * as React from "react";

import Svg, { Path } from "react-native-svg";

function Picture(props) {
  return <Svg width={24} height={24} fill="none" {...props}>
    <Path
      fill="#BCC7C8"
      d="M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2ZM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5Z"
    />
  </Svg>
}

export default Picture;


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Icons/Close.js

import * as React from "react";

import Svg, { Path } from "react-native-svg";

function Close(props) {
  return <Svg
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <Path
      d="M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z"
      fill="#494F5E"
    />
  </Svg>
}

export default Close;


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Icons/ArrowLeft.js

import * as React from "react";

import Svg, { Circle, ClipPath, Defs, G, Path } from "react-native-svg";

function ArrowLeft(props) {
  return <Svg width={36} height={36} fill="none" {...props}>
    <G clipPath="url(#a)">
      <Path
        fill="#494F5E"
        d="M25 17.688h-9.888l4.542-4.542L18.5 12 12 18.5l6.5 6.5 1.146-1.146-4.534-4.541H25v-1.625Z"
      />
      <Circle cx={18} cy={18} r={17.5} stroke="#494F5E" />
    </G>
    <Defs>
      <ClipPath id="a">
        <Path fill="#fff" d="M0 0h36v36H0z" />
      </ClipPath>
    </Defs>
  </Svg>
}
export default ArrowLeft;


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Icons/Passenger.js

import * as React from "react";

import Svg, { Path } from "react-native-svg";

import { colors } from "../../themes";

function Passenger(props) {
  return <Svg width={25} height={24} fill="none" {...props}>
    <Path
      fill={colors.palette.white}
      d="M7.59 5.41012C6.81 4.63012 6.81 3.36012 7.59 2.58012C8.37 1.80012 9.64 1.80012 10.42 2.58012C11.2 3.36012 11.2 4.63012 10.42 5.41012C9.63 6.20012 8.37 6.20012 7.59 5.41012ZM6 16.0001L6 7.00012H4L4 16.0001C4 18.7601 6.24 21.0001 9 21.0001H15V19.0001H9C7.34 19.0001 6 17.6601 6 16.0001ZM20 20.0701L14.93 15.0001H11.5V11.3201C12.9 12.4701 15.1 13.4801 17 13.4801V11.3201C15.34 11.3401 13.39 10.4501 12.33 9.28012L10.93 7.73012C10.74 7.52012 10.5 7.35012 10.24 7.23012C9.95 7.09012 9.62 7.00012 9.28 7.00012H9.25C8.01 7.00012 7 8.01012 7 9.25012V15.0001C7 16.6601 8.34 18.0001 10 18.0001L15.07 18.0001L18.57 21.5001L20 20.0701Z"
    />
  </Svg>
}
export default Passenger;


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Icons/FlightTakeoffCircle.js

import * as React from "react";
import { View } from "react-native";

import { Icon } from "@draftbit/ui";

import { colors } from "../../themes";

function FlightTakeoffCircle() {
  return (
    <View
      style={{
        backgroundColor: colors.palette.sky,
        borderRadius: 100,
        padding: 3,
      }}
    >
      <Icon color={colors.palette.white} name="MaterialCommunityIcons/airplane-takeoff" size={24} />
    </View>
  );
}
export default FlightTakeoffCircle;


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Icons/MaintenanceCircle.js

import * as React from "react";
import { View } from "react-native";

import { Icon } from "@draftbit/ui";

import { colors } from "../../themes";

function MaintenanceCircle() {
  return (
    <View
      style={{
        backgroundColor: colors.palette.sky,
        borderRadius: 100,
        padding: 3,
      }}
    >
      <Icon color={colors.palette.white} name="MaterialCommunityIcons/hammer-wrench" size={24} />
    </View>
  );
}
export default MaintenanceCircle;


File: /Users/codeshack-vii/Documents/_projects/Volato/assets/images/.DS_Store

Error: Unable to extract code from /Users/codeshack-vii/Documents/_projects/Volato/assets/images/.DS_Store

File: /Users/codeshack-vii/Documents/_projects/Volato/screens/TripsAndDeals/components/StaticPosterItem.js

import React from "react";
import { ImageBackground, StyleSheet, Text, View } from "react-native";

import { LinearGradient } from "@draftbit/ui";

import { Button } from "../../../components";
import { useModalAction } from "../../../components/Modals";
import Images from "../../../config/Images";
import { colors, spacing } from "../../../themes";
import { modalViews } from "../../../utils";

function StaticPosterItem({ navigation }) {
  const { openModal, closeModal } = useModalAction();

  const openReservationScreen = () =>
    navigation.navigate("ReserveNavigator", {
      params: { screen: "ReserveScreen" },
    });

  const handleContinue = (trip) => {
    closeModal();
    navigation.navigate("ReserveNavigator", {
      screen: "ReserveScreen",
      params: { trip },
    });
  };

  const handleRepeatTrip = () => {
    openModal(
      modalViews.REPEAT_TRIP,
      {
        onContinue: handleContinue,
        onClose: closeModal,
      },
      {
        animationType: "slide",
        presentationStyle: "pageSheet",
        transparent: false,
      }
    );
  };

  return (
    <View style={styles.staticPoster}>
      <ImageBackground style={styles.imageBackground} source={Images.N420KA}>
        <LinearGradient
          style={styles.tripCardOverlayGradient}
          color1={colors.palette.tripCardGradientEnd}
          color2={colors.palette.tripCardGradientStart}
          endX={0}
          endY={0}
          startX={0}
          startY={100}
        />
      </ImageBackground>
      <View style={styles.staticPosterContent}>
        <Text style={styles.staticPosterTitle}>Enjoy Travel More</Text>
        <View style={styles.staticButtonsRow}>
          <Button
            style={[styles.inquireButton, { width: 140, marginRight: spacing.medium }]}
            variant="contained"
            theme="glass"
            title="Repeat a Trip"
            onPress={handleRepeatTrip}
          />
          <Button
            style={[styles.inquireButton, { width: 140 }]}
            variant="contained"
            theme="glass"
            title="New Itinerary"
            onPress={openReservationScreen}
          />
        </View>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  staticPoster: {
    backgroundColor: colors.palette.lightSky,
    borderRadius: 15,
    height: 240,
    marginVertical: 6,
    overflow: "hidden",
  },
  imageBackground: {
    height: "100%",
    width: "100%",
  },
  staticPosterContent: {
    bottom: 0,
    justifyContent: "space-between",
    left: 0,
    padding: 12,
    position: "absolute",
    right: 0,
    top: 0,
  },
  staticPosterTitle: {
    fontSize: 16,
    textTransform: "uppercase",
    fontFamily: "unionBold",
    color: colors.palette.white,
  },
  staticButtonsRow: {
    flexDirection: "row",
    justifyContent: "center",
    marginHorizontal: 32,
  },
  inquireButton: {
    blurRadius: 1,
  },
  tripCardOverlayGradient: {
    height: "100%",
    width: "100%",
    opacity: 0.5,
  },
});

export default StaticPosterItem;


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/TripsAndDeals/components/TripListItem.js

import React, { useEffect, useMemo, useState } from "react";
import {
  FlatList,
  Image,
  ImageBackground,
  Platform,
  StyleSheet,
  Text,
  useWindowDimensions,
  View,
} from "react-native";

import { LinearGradient } from "@draftbit/ui";
import { useQuery } from "@tanstack/react-query";
import { BlurView } from "expo-blur";

import { getCityPhoto } from "../../../apis/apirtport";
import { getFlightLegPassengers } from "../../../apis/flightleg-api";
import { getPricingQuoteItineraryPassengers } from "../../../apis/pricingquote-api";
import { Button, UserAvatar } from "../../../components";
import Images from "../../../config/Images";
import { useLookupData } from "../../../contexts/LookupDataContext";
import { colors, spacing } from "../../../themes/index";
import { formatDate, truncateText } from "../../../utils";

function TripListItem({ navigation, item, onOpen }) {
  const layout = useWindowDimensions();
  const { airports, aircrafts, aircraftTypes } = useLookupData();

  const [departAirport, setDepartAirport] = useState(null);
  const [arriveAirport, setArriveAirport] = useState(null);
  const [aircraft, setAircraft] = useState(null);
  const [aircraftType, setAircraftType] = useState("Aircraft to be Assigned");

  useEffect(() => {
    setDepartAirport(airports.find((airport) => airport.id === item.fromAirport_id));
    setArriveAirport(airports.find((airport) => airport.id === item.toAirport_id));

    const foundAircraft = item.aircraft_id
      ? aircrafts.find((a) => a.id === item.aircraft_id)
      : null;
    setAircraft(foundAircraft);

    if (foundAircraft) {
      const foundAircraftType = aircraftTypes.find(
        (type) => type.id === foundAircraft.aircrafttype_id
      )?.label;
      setAircraftType(foundAircraftType || "Aircraft to be Assigned");
    } else {
      setAircraftType("Aircraft to be Assigned");
    }
  }, [item, airports, aircrafts, aircraftTypes]);

  const { data: cityPhotoUrl } = useQuery(
    ["cityPhoto", arriveAirport?.id],
    () => getCityPhoto(arriveAirport.id),
    {
      enabled: !!arriveAirport,
      select: (response) =>
        response.kind === "ok" && response.result ? response.result.filename : null,
    }
  );

  const { data: passengers = [] } = useQuery(
    ["passengers", item.leg_id, item.record_type],
    () => {
      if (item.record_type && item.record_type.startsWith("FL")) {
        return getFlightLegPassengers(item.leg_id);
      }
      return getPricingQuoteItineraryPassengers(item.leg_id);
    },
    {
      enabled: !!item && !!item.leg_id,
      select: (response) => (response.kind === "ok" ? response.result : []),
    }
  );

  const fontCharWidth = Platform.OS === "android" ? 22 : 20;
  const charsPerLineDepart = Math.ceil(layout.width / fontCharWidth) - 6;
  const charsPerLineArrive = Math.ceil(layout.width / fontCharWidth) - 2;
  const departCityState = `${truncateText(departAirport?.city ?? "", charsPerLineDepart)}, ${
    departAirport?.province
  }`;
  const arriveCityState = `${truncateText(arriveAirport?.city ?? "", charsPerLineArrive)}, ${
    arriveAirport?.province
  }`;

  const formattedDepartDate = useMemo(() => {
    if (!item) {
      return "";
    }
    if (item.departLocal) {
      return formatDate(item?.departLocal, "eee, MMM dd, yyyy");
    }
    return formatDate(item?.departTimeLocal, "eee, MMM dd, yyyy");
  }, [item]);

  const formattedDepartTime = useMemo(() => {
    if (!item) {
      return "";
    }
    if (item.departLocal) {
      return formatDate(item?.departLocal, "h:mm aa");
    }
    return formatDate(item?.departTimeLocal, "h:mm aa");
  }, [item]);

  const formattedArriveTime = useMemo(() => {
    if (!item) {
      return "";
    }
    if (item.arriveLocal) {
      return formatDate(item?.arriveLocal, "h:mm aa");
    }
    return formatDate(item?.arriveTimeLocal, "h:mm aa");
  }, [item]);

  const itemPhotoUrl = useMemo(
    () => cityPhotoUrl || "https://picsum.photos/390/844",
    [cityPhotoUrl]
  );

  const itemTail = useMemo(() => {
    if (item?.record_type?.startsWith("FL")) {
      return aircraft?.label || "Aircraft to be Assigned";
    }
    return item.case_id
      ? `Quote #${item.pricing_quote_id} - (Case #${item.case_id})`
      : `Quote #${item.pricing_quote_id} - Signature Required`;
  }, [item, aircraft]);

  const handleItemPress = () => {
    if (onOpen) {
      onOpen();
    }
  };

  const handleContactPress = () => {
    const title = `Trip ${departAirport?.icao} -> ${arriveAirport?.icao}`;

    // navigate to chat screen
    navigation.navigate("ChatScreen", {
      chatId: item.case_id,
      title,
      tripId: item.trip_id,
      pricingQuoteId: item.pricing_quote_id,
    });
  };

  // Add a null check for item
  if (!item) {
    return null; // Or return a placeholder component
  }

  return (
    <View style={styles.tripListItem}>
      <ImageBackground
        style={styles.imageBackground}
        resizeMode="cover"
        source={{ uri: itemPhotoUrl }}
      >
        <LinearGradient
          style={styles.tripCardOverlayGradient}
          color1={colors.palette.tripCardGradientEnd}
          color2={colors.palette.tripCardGradientStart}
          endX={0}
          endY={0}
          startX={0}
          startY={100}
        />
      </ImageBackground>

      <View style={styles.tripListContent}>
        <View style={styles.airportHeaderTopHalf}>
          <View style={styles.airportHeader}>
            <View style={styles.airportHeaderItem}>
              <Text style={styles.airportTitle}>{departCityState}</Text>
              <Text style={styles.airportCode}>{departAirport?.icao}</Text>
              <Text style={styles.airportTime}>{formattedDepartTime}</Text>
            </View>
            <Image source={Images.AirplaneWhite} style={styles.airplaneImage} />
            <View style={styles.airportHeaderItem}>
              <Text style={styles.airportTitle}>{arriveCityState}</Text>
              <Text style={styles.airportCode}>{arriveAirport?.icao}</Text>
              <Text style={styles.airportTime}>{formattedArriveTime}</Text>
            </View>
          </View>
          <View style={styles.buttonRow}>
            <Button
              style={styles.inquireButton}
              variant="contained"
              theme="glass"
              title="Details"
              onPress={handleItemPress}
            />
            <Button
              style={[styles.inquireButton, { width: 140 }]}
              variant="contained"
              theme="glass"
              title="Contact Agent"


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/TripsAndDeals/components/Trips.js

import React from "react";
import { ActivityIndicator, FlatList, RefreshControl, StyleSheet, View } from "react-native";

import StaticPosterItem from "./StaticPosterItem";
import TripListItem from "./TripListItem";
import { colors, spacing } from "../../../themes/index";
import { screens } from "../../../utils/screens";

function Trips({ navigation, data, loading, fetchTravel, refreshing }) {
  const handleItemOpen = (flight) => () => {
    if (!flight.trip_id) {
      navigation.navigate({ name: screens.QuoteDetailsScreen, params: { flight } });
    } else {
      navigation.navigate({ name: screens.TripDetailsScreen, params: { flight } });
    }
  };

  return !data ? (
    <View style={styles.spinner}>
      <ActivityIndicator
        style={styles.activityIndicator}
        animating
        color={colors.palette.midnight}
        hidesWhenStopped
        size="large"
      />
    </View>
  ) : (
    <View style={styles.scrollView}>
      <FlatList
        renderItem={({ item, index }) => {
          if (index === data.length - 1) {
            return <StaticPosterItem navigation={navigation} />;
          }
          return <TripListItem navigation={navigation} item={item} onOpen={handleItemOpen(item)} />;
        }}
        data={data}
        keyExtractor={(item, index) => index.toString()}
        contentContainerStyle={{ flexGrow: 1 }}
        onEndReachedThreshold={0.5}
        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={fetchTravel} />}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  scrollView: {
    alignItems: "stretch",
    flex: 1,
    padding: 12,
  },
  spinner: {
    alignItems: "center",
    bottom: 0,
    justifyContent: "center",
    left: 0,
    position: "absolute",
    right: 0,
    top: 0,
    zIndex: 9999,
  },
  activityIndicator: {
    width: 36,
  },
});

export default Trips;


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Reserve/Modals/FBOLiveSearchModal.js

import React, { useEffect, useRef, useState } from "react";
import {
  ActivityIndicator,
  FlatList,
  Keyboard,
  Modal,
  StyleSheet,
  TouchableOpacity,
  View,
} from "react-native";

import { IconButton } from "@draftbit/ui";
import { useQuery } from "@tanstack/react-query";

import { api } from "../../../apis/VolatoMobileAPIApi";
import { Text } from "../../../components";
import { SearchBar } from "../../../components/SearchBar";
import { colors } from "../../../themes";

function FBOLiveSearchModal({ open, onClose, mode, selected, onSelect }) {
  const [searchText, setSearchText] = useState("");
  const [searchBarClicked, setSearchBarClicked] = useState(false);
  const [airports, setAirports] = useState(null);
  const [isSearching, setIsSearching] = React.useState(false);
  const debounceTimeoutRef = useRef(null);

  const debounce = (func, delay) => {
    clearTimeout(debounceTimeoutRef.current);
    debounceTimeoutRef.current = setTimeout(func, delay);
  };

  const airportQuery = useQuery({
    queryKey: ["airports"],
    queryFn: () => api.airports.post(searchText),
    enabled: false,
    onSuccess: (data) => {
      setAirports(data);
    },
    onError: (error) => {},
    onSettled: () => {
      setIsSearching(false);
    },
  });

  const onSearch = async (text) => {
    setAirports(null);
    if (!text || text.length < 3) {
      return;
    }
    setIsSearching(true);
    setSearchText(text);
    debounce(async () => {
      await airportQuery.refetch();
    }, 500);
  };

  const handleClose = () => {
    setSearchText("");
    setAirports(null);
    onClose();
  };

  const HandleSelect = (item) => {
    setSearchText("");
    setAirports(null);
    onSelect(item);
  };

  const renderItem = ({ item }) => (
    <TouchableOpacity onPress={() => HandleSelect(item)}>
      <View style={styles.airportItem}>
        <View style={styles.airportItemInfo}>
          <View>
            <Text style={styles.airportLabel}>{item.simpleLabel}</Text>
            <Text style={styles.airportLocation}>
              {item.city} {item.province}
            </Text>
          </View>
          <Text style={styles.airportCode}>{item.icao}</Text>
        </View>
      </View>
    </TouchableOpacity>
  );

  const resetForm = () => {
    setSearchText("");
    setAirports(null);
  };

  return (
    <Modal visible={open} animationType="slide" presentationStyle="pageSheet" onShow={resetForm}>
      <View style={styles.modalHeader}>
        <Text style={styles.modalHeaderText}>Where {mode === "departure" ? "From" : "To"}?</Text>
      </View>
      <SearchBar
        searchText={searchText}
        placeholderText="Search by City, State, or Airport Code"
        setSearchText={(text) => {
          setSearchText(text);
          onSearch(text);
        }}
        clicked={searchBarClicked}
        setClicked={setSearchBarClicked}
      />
      <View style={styles.modalContent}>
        {isSearching && !airports ? (
          <ActivityIndicator
            animating
            color={colors.palette.midnight}
            hidesWhenStopped
            size="large"
          />
        ) : (
          <FlatList data={airports} renderItem={renderItem} keyExtractor={(item) => `${item.id}`} />
        )}
      </View>
      <IconButton
        onPress={handleClose}
        color={colors.palette.midnight}
        icon="AntDesign/close"
        size={24}
        style={styles.closeButton}
      />
    </Modal>
  );
}

const styles = StyleSheet.create({
  closeButton: {
    position: "absolute",
    top: 18,
    right: 16,
  },
  modalHeader: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    padding: 18,
  },
  modalHeaderText: {
    color: colors.palette.midnight,
    fontSize: 22,
    fontWeight: 400,
    lineHeight: 28,
    justifyContent: "center",
  },
  modalContent: {
    marginHorizontal: 12,
    marginTop: 12,
    flex: 1,
  },
  modalActions: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    margin: 12,
  },
  modalActionButton: {
    padding: 12,
  },
  modalActionButtonText: {
    textTransform: "uppercase",
    color: colors.palette.midnight,
  },
  airportItem: {
    flexDirection: "row",
  },
  airportItemInfo: {
    borderBottomWidth: 1,
    borderBottomColor: colors.palette.cardSeparator,
    flex: 1,
    paddingTop: 9,
    paddingBottom: 13,
    paddingRight: 12,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
  },
  airportLabel: {
    color: colors.palette.midnight,
    fontSize: 16,
    fontWeight: 400,
    lineHeight: 24,
  },
  airportLocation: {
    color: colors.palette.bodyText,
    fontSize: 10,
    fontWeight: 400,
    lineHeight: 14,
  },
  airportCode: {
    color: colors.palette.midnight,
    fontSize: 14,
    fontWeight: 400,
    lineHeight: 18,
    textTransform: "uppercase",
  },
});

export default FBOLiveSearchModal;


File: /Users/codeshack-vii/Documents/_projects/Volato/screens/Reserve/Modals/SummaryModal.js

import { StyleSheet, View } from "react-native";

import { Modal, Portal } from "react-native-paper";

import { Button, Text } from "../../../components";
import Airplane from "../../../components/Icons/Airplane";
import { useStores } from "../../../models/root";
import { colors } from "../../../themes";
import { formatDate } from "../../../utils/formatDate";

function SummaryModal({ open, flights, onClose, onSave, price }) {
  const handleSave = () => {
    onSave();
    onClose();
  };

  const {
    userStore: { depositAccounts },
  } = useStores();

  return (
    <Portal>
      <Modal visible={open} onDismiss={onClose} contentContainerStyle={styles.container}>
        <View style={styles.modalHeader}>
          <Text style={styles.modalHeaderText} weight="bold">
            Confirm Reservation
          </Text>
        </View>
        <View style={styles.modalContent}>
          <Text style={styles.modalContentHeader}>Are you sure you want to reserve the trip?</Text>
          <View style={styles.flightsInformation}>
            {flights.map((flight, index) => (
              <View style={styles.flight} key={`flight-${index}`}>
                <Text style={styles.flightText}>
                  {formatDate(
                    (flight.departDate || new Date()).toISOString().split("T")[0],
                    "MMM d"
                  )}{" "}
                  -{" "}
                  {formatDate(
                    (flight.arriveDate || new Date()).toISOString().split("T")[0],
                    "MMM d y"
                  )}
                </Text>
                <View style={styles.airportRow}>
                  <Text style={styles.flightText}>
                    {flight.departAirport?.city}, {flight.departAirport?.province}
                  </Text>
                  <Airplane style={styles.plane} />
                  <Text style={styles.flightText}>
                    {flight.arriveAirport?.city}, {flight.arriveAirport?.province}
                  </Text>
                </View>
              </View>
            ))}
            <View style={styles.price}>
              <Text style={styles.flightText}>
                {price?.toLocaleString("en-US", {
                  style: "currency",
                  currency: "USD",
                })}{" "}
                USD
              </Text>
            </View>
          </View>
          {depositAccounts && depositAccounts.length > 0 ? (
            <Text style={styles.caution}>
              The amount will be charged to your Volato Insider Card before taking the flight.
            </Text>
          ) : null}
        </View>
        <View style={styles.modalActions}>
          <Button style={styles.button} title="Cancel" onPress={onClose} />
          <Button
            style={styles.button}
            variant="contained"
            theme="halloween"
            title="Confirm"
            onPress={handleSave}
          />
        </View>
      </Modal>
    </Portal>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: colors.palette.white,
    marginHorizontal: 20,
    borderRadius: 16,
  },
  modalHeader: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    // backgroundColor: colors.palette.midnight,
    paddingHorizontal: 16,
    paddingVertical: 18,
    borderBottomWidth: 1,
    borderColor: colors.palette.primary300,
  },
  modalHeaderText: {
    color: colors.palette.midnight,
    fontSize: 16,
    lineHeight: 24,
  },
  modalHeaderActionView: {
    flexDirection: "row",
  },
  modalContent: {
    padding: 20,
  },
  modalContentHeader: {
    color: colors.palette.midnight,
    fontSize: 14,
  },
  flightsInformation: {
    borderRadius: 4,
    backgroundColor: colors.palette.lightGray,
    padding: 16,
    marginVertical: 8,
    alignItems: "center",
  },
  flight: {
    alignItems: "center",
  },
  caution: {
    color: colors.palette.bodyText,
    fontSize: 10.5,
    lineHeight: 14,
  },
  modalActions: {
    flexDirection: "row",
    justifyContent: "space-between",
    borderTopWidth: 1,
    borderColor: colors.palette.primary300,
    padding: 20,
  },
  button: {
    flex: 1,
    marginHorizontal: 6,
  },
  airportRow: {
    flexDirection: "row",
    alignItems: "center",
    marginVertical: 16,
  },
  flightText: {
    color: colors.palette.midnight,
    fontSize: 14,
    lineHeight: 18,
  },
  plane: {
    marginHorizontal: 16,
  },
  price: {
    alignItems: "center",
    backgroundColor: colors.palette.green,
    borderRadius: 6,
    paddingVertical: 4,
    paddingHorizontal: 10,
  },
});

export default SummaryModal;


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/DateSelectorModal/CalendarRow.js

import { StyleSheet, TouchableOpacity, useWindowDimensions, View } from "react-native";

import { colors } from "../../../themes";
import { tripsTypes } from "../../../utils/constants";
import { Text } from "../../Text";

export function CalendarRow({
  data = [],
  date,
  beginAt,
  validExtremeDates,
  month,
  year,
  handleSelectedDate,
  arriveDate,
  departDate,
  type,
  isHeader,
  index,
  selectedEndDates,
  selectedStartDates,
  tripType,
  prices,
}) {
  let data_ = data;

  if (beginAt) {
    data_ = [...Array.from({ length: beginAt }, () => ""), ...data];
  }

  const cellWidth = useWindowDimensions().width / 7;
  return (
    <View style={styles.rowContainer}>
      {data_.map((item, idx) => {
        const monthStr = `${month}`.padStart(2, "0");
        const dayStr = `${item}`.padStart(2, "0");
        const cellDateStr = `${year}-${monthStr}-${dayStr}`;
        let price = prices?.[cellDateStr];
        if (price) {
          price /= 1000;
          price = price.toFixed(1);
        }
        const cellDate = new Date(year, month - 1, item);
        let isValid = false;

        if (
          cellDate.getTime() >= validExtremeDates?.validStartDate?.getTime() &&
          cellDate.getTime() <= validExtremeDates?.validEndDate?.getTime()
        ) {
          isValid = true;
        }

        let canNotChoose = false;
        if (
          (type === "arrive" && departDate && cellDate.getTime() < departDate.getTime()) ||
          (type === "depart" && arriveDate && cellDate.getTime() > arriveDate.getTime())
        ) {
          canNotChoose = true;
        }
        // alert(JSON.stringify({ price, isHeader, item, isValid }));

        // return;

        let timingIsOk = true;
        if (index > 0 && tripType === tripsTypes.ROUND_TRIP) {
          if (
            (type === "depart" && cellDate?.getTime() < selectedStartDates[index - 1]?.getTime()) ||
            (type === "arrive" && cellDate?.getTime() < selectedEndDates[index - 1]?.getTime())
          ) {
            timingIsOk = false;
          }
        }
        const ActiveComponent = canNotChoose || isHeader || !timingIsOk ? View : TouchableOpacity;
        return (
          <ActiveComponent
            onPress={() => {
              if (canNotChoose) return;

              if (isValid) {
                handleSelectedDate({ day: item, year, month });
              }
            }}
            key={`Item-${idx}`}
            style={{
              ...styles.cellStyle,
              width: cellWidth,
              ...(typeof item === "number" && date === item && styles.selectedCell),
              opacity: !canNotChoose && isValid && timingIsOk ? 1 : 0.4,
              ...(isHeader && { opacity: 1 }),
            }}
          >
            <Text style={{ color: "#494F5E" }}>{item}</Text>
            {/* <Text>{price}</Text> */}
            {/* <Text> */}
            {price && price !== 0 && !isHeader && item !== "" && isValid && (
              <Text style={styles.datePriceText}>
                {/* {price?.toLocaleString("en-US", {
                  style: "currency",
                  currency: "USD",
                  maximumFractionDigits: 1,
                })} */}
                ${price}k
              </Text>
            )}
            {/* </Text> */}
          </ActiveComponent>
        );
      })}
    </View>
  );
}

const styles = StyleSheet.create({
  cellStyle: { paddingVertical: 13, alignItems: "center", paddingHorizontal: 8 },
  rowContainer: {
    flexDirection: "row",
  },

  selectedCell: {
    backgroundColor: colors.palette.green,
    borderRadius: 15,
  },

  datePriceText: {
    fontSize: 12,
    marginTop: 4,
    // color: colors.palette.sky
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/DateSelectorModal/DateSelectorModal.js

import { useEffect, useState } from "react";
import {
  ActivityIndicator,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  useWindowDimensions,
  View,
} from "react-native";

import { useQuery } from "@tanstack/react-query";

import { CalendarMonth } from "./CalendarMonth";
import { CalendarRow } from "./CalendarRow";
import { api } from "../../../apis/VolatoMobileAPIApi";
import { colors, spacing } from "../../../themes";
import { queries } from "../../../utils/queries";
import Close from "../../Icons/Close";
import { Text } from "../../Text";

const days = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"];

export function DateSelectorModal({
  arriveDate,
  departDate,
  availableExtremeDates,
  validMonths = [],
  onClose,
  onSelect,
  selectedEndDates,
  selectedStartDates,
  departAirportId,
  arrivalAirportId,
  index,
  type,
  tripType,
  queryDates,
  title = "Travel Dates",
}) {
  const [datesPrices, setDatesPrices] = useState({});
  const [loadedPrices, setLoadedPrices] = useState(0);
  const dimensions = useWindowDimensions();

  let validStartDate;
  let validEndDate;
  if (availableExtremeDates.startDate) {
    validStartDate = new Date(
      availableExtremeDates.startDate[0] * 1,
      availableExtremeDates.startDate[1] - 1,
      availableExtremeDates.startDate[2] * 1
    );

    validEndDate = new Date(
      availableExtremeDates.endDate[0] * 1,
      availableExtremeDates.endDate[1] - 1,
      availableExtremeDates.endDate[2] * 1
    );
  }

  const getDatesPricesQuery = useQuery({
    queryKey: queries.getDatesPrices(
      queryDates[0],
      queryDates[1],
      departAirportId,
      arrivalAirportId,
      index
    ),
    queryFn: async () => {
      const result = await api.getDatesPrices.get(
        queryDates[0],
        queryDates[1],
        departAirportId,
        arrivalAirportId,
        index
      );

      return result?.data;
    },
    enabled: false,
    onSuccess: (data) => {
      setDatesPrices((prices) => ({ ...prices, ...data }));
    },
    onError: (error) => {
      console.log({ error: JSON.stringify(error, null, 2) });
    },
    onSettled: () => {
      // setIsLoading(false);
      setLoadedPrices((loaded) => loaded + 1);
    },
  });

  const getDatesPricesQuery1 = useQuery({
    queryKey: queries.getDatesPrices(
      queryDates[1],
      queryDates[2],
      departAirportId,
      arrivalAirportId,
      index
    ),
    queryFn: async () => {
      const result = await api.getDatesPrices.get(
        queryDates[1],
        queryDates[2],
        departAirportId,
        arrivalAirportId
      );
      return result?.data;
    },
    enabled: false,
    onSuccess: (data) => {
      setDatesPrices((prices) => ({ ...prices, ...data }));
    },
    onError: (error) => {
      console.log({ error: JSON.stringify(error, null, 2) });
    },
    onSettled: () => {
      // setIsLoading(false);
      setLoadedPrices((loaded) => loaded + 1);
    },
  });

  const getDatesPricesQuery2 = useQuery({
    queryKey: queries.getDatesPrices(
      queryDates[2],
      queryDates[3],
      departAirportId,
      arrivalAirportId,
      index
    ),
    queryFn: async () => {
      const result = await api.getDatesPrices.get(
        queryDates[2],
        queryDates[3],
        departAirportId,
        arrivalAirportId
      );
      return result?.data;
    },
    enabled: false,
    onSuccess: (data) => {
      setDatesPrices((prices) => ({ ...prices, ...data }));
    },
    onError: (error) => {
      console.log({ error: JSON.stringify(error, null, 2) });
    },
    onSettled: () => {
      // setIsLoading(false);
      setLoadedPrices((loaded) => loaded + 1);
    },
  });
  useEffect(() => {
    if (availableExtremeDates?.endDate && departAirportId && arrivalAirportId) {
      getDatesPricesQuery.refetch();
      getDatesPricesQuery1.refetch();
      getDatesPricesQuery2.refetch();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [
    availableExtremeDates?.startDate,
    availableExtremeDates?.endDate,
    departAirportId,
    arrivalAirportId,
  ]);

  const handleSelectedDate = (data) => {
    const composedDate = new Date(data.year * 1, data.month - 1, data.day * 1);

    onSelect(composedDate);
  };

  const isLoading = departAirportId && arrivalAirportId && loadedPrices < 3;
  const hasError =
    getDatesPricesQuery.isError || getDatesPricesQuery1.isError || getDatesPricesQuery2.isError;

  return (
    <View style={{ ...styles.modalContainer, height: dimensions.height }}>
      <View style={styles.modalHeaderWrapper}>
        <Text style={styles.modalHeaderText}>{title}</Text>

        {isLoading ? (
          <ActivityIndicator
            animating
            color={colors.palette.midnight}
            style={styles.activityIndicator}
            hidesWhenStopped
            size="small"
          />
        ) : hasError ? (
          <Text style={styles.modalHeaderErrorText}>There was an error while fetching prices</Text>
        ) : null}
        <TouchableOpacity onPress={onClose} style={styles.closeButton}>
          <Close />
        </TouchableOpacity>
      </View>

      <CalendarRow data={days} isHeader />
      <ScrollView
        showsVerticalScrollIndicator={false}
        contentContainerStyle={styles.monthsContainer}
        onMomentumScrollEnd={(e) => {


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Modals/DateSelectorModal/CalendarMonth.js

import { useState } from "react";
import { StyleSheet, View } from "react-native";

import { CalendarRow } from "./CalendarRow";
import { getDaysInMonth } from "../../../utils";
import { Text } from "../../Text";

const months = {
  1: "January",
  2: "February",
  3: "March",
  4: "April",
  5: "May",
  6: "June",
  7: "July",
  8: "August",
  9: "September",
  10: "October",
  11: "November",
  12: "December",
};

export function CalendarMonth({
  month,
  year,
  validExtremeDates,
  handleSelectedDate,
  arriveDate,
  departDate,
  type,
  index,
  selectedEndDates,
  selectedStartDates,
  tripType,
  prices,
}) {
  const date_ = new Date(year, month - 1, 2);
  const dates = Array.from({ length: getDaysInMonth(month, year) }, (d, i) => i + 1);

  const day = date_.getDay() - 1;
  const [date, setDate] = useState(null);
  const daysInAWeek = 7;
  const rows = Array.from({ length: 6 }, (_, i) => i + 1);

  return (
    <View>
      <View style={styles.monthHeaderWrapper}>
        <Text style={styles.monthHeader}>
          {months[month]} {year}
        </Text>
      </View>
      {rows.map((item, idx) => {
        let start;
        let stop;
        if (item === 1) {
          start = 0;
          stop = daysInAWeek - day;
        } else {
          start = daysInAWeek * (item - 1) - day;
          stop = daysInAWeek * item;
        }
        return (
          <CalendarRow
            key={`Calendar-row-${item}`}
            data={dates.slice(start, stop)}
            beginAt={idx === 0 ? day : null}
            date={date}
            validExtremeDates={validExtremeDates}
            month={month}
            year={year}
            handleSelectedDate={handleSelectedDate}
            arriveDate={arriveDate}
            departDate={departDate}
            tripType={tripType}
            type={type}
            index={index}
            selectedEndDates={selectedEndDates}
            selectedStartDates={selectedStartDates}
            prices={prices}
          />
        );
      })}
    </View>
  );
}

const styles = StyleSheet.create({
  monthHeader: { color: "#494F5E", fontWeight: "700", fontSize: 16 },
  monthHeaderWrapper: { paddingHorizontal: 15, marginVertical: 15 },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Screens/Profile/DepositAccountList.js

import React, { useMemo } from "react";
import { StyleSheet, View } from "react-native";

import { IconButton } from "@draftbit/ui";
import FastImage from "react-native-fast-image";

import { Text } from "../..";
import { useAircraftPhotoStore } from "../../../models/AircraftPhoto";
import { colors, spacing } from "../../../themes";

const DepositAccountList = React.memo(({ depositAccounts, onItemPress }) => {
  const { getRandom } = useAircraftPhotoStore();

  const depositAccountItems = useMemo(() => {
    if (!depositAccounts || depositAccounts.length === 0) {
      return (
        <View style={styles.noAccountsContainer}>
          <Text style={styles.noAccountsText}>No deposit accounts found.</Text>
        </View>
      );
    }

    return depositAccounts.map((item, index) => (
      <View
        style={[
          styles.poster,
          item.exitDate && new Date(item.exitDate) < new Date() && styles.closedPoster,
        ]}
        key={`deposit-account-${index}`}
      >
        <FastImage
          style={[
            styles.imageBackground,
            item.exitDate && new Date(item.exitDate) < new Date() && styles.closedPosterImage,
          ]}
          resizeMode="cover"
          source={{
            uri: `${process.env.EXPO_PUBLIC_IMAGE_API_URL}/${getRandom()?.filename}`,
          }}
        />
        <View
          style={[
            styles.posterContent,
            item.exitDate && new Date(item.exitDate) < new Date()
              ? styles.posterContentDisabled
              : null,
          ]}
        >
          <View style={styles.aircraftInfo}>
            <Text style={styles.aircraftInfoText} preset="bold">
              {item.exitDate && new Date(item.exitDate) < new Date() ? "(CLOSED) " : ""}
              {item.label}
            </Text>
            {(!item.exitDate || new Date(item.exitDate) >= new Date()) && (
              <>
                <Text style={styles.ownershipText} preset="bold">
                  Current Balance:{" "}
                  {item.balance.toLocaleString("en-US", {
                    style: "currency",
                    currency: "USD",
                  })}
                </Text>
                <Text style={styles.ownershipText} preset="bold">
                  Available Balance:{" "}
                  {item.availableBalance.toLocaleString("en-US", {
                    style: "currency",
                    currency: "USD",
                  })}
                </Text>
              </>
            )}
          </View>
          <View style={styles.actionButtonView}>
            <IconButton
              color={colors.palette.white}
              icon="MaterialCommunityIcons/file-document"
              size={36}
              onPress={() => onItemPress(item)}
            />
          </View>
        </View>
      </View>
    ));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [depositAccounts]);

  return depositAccountItems;
});

const styles = StyleSheet.create({
  poster: {
    backgroundColor: colors.palette.white,
    borderRadius: 15,
    height: 200,
    marginVertical: 12,
    overflow: "hidden",
  },
  closedPoster: {
    height: 100, // 50% of the original height
  },
  imageBackground: {
    height: "100%",
    width: "100%",
  },
  closedPosterImage: {
    height: 100, // 50% of the original height
  },
  posterContent: {
    backgroundColor: colors.palette.cardImageOverlay,
    position: "absolute",
    left: 0,
    top: 0,
    right: 0,
    bottom: 0,
  },
  posterContentDisabled: {
    backgroundColor: colors.palette.cardImageDisabledOverlay,
  },
  aircraftInfo: {
    paddingVertical: 10,
    paddingHorizontal: spacing.medium,
  },
  aircraftInfoText: {
    color: colors.palette.white,
    fontSize: 14,
    fontWeight: 400,
    lineHeight: 18,
    textTransform: "uppercase",
  },
  ownershipText: {
    color: colors.palette.white,
    fontSize: 14,
    fontWeight: 400,
    lineHeight: 18,
    marginTop: spacing.tiny,
  },
  actionButtonView: {
    flexDirection: "row",
    justifyContent: "flex-end",
    alignItems: "flex-end",
    paddingBottom: 10,
    paddingHorizontal: spacing.medium,
    flex: 1,
  },
  noAccountsContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    minHeight: 200,
  },
  noAccountsText: {
    color: colors.palette.bodyText,
    fontSize: 16,
    textAlign: "center",
  },
});

export default DepositAccountList;


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Screens/Profile/AircraftStats.js

import { useState } from "react";
import { ActivityIndicator, StyleSheet, View } from "react-native";

import { useQuery } from "@tanstack/react-query";
import { differenceInHours, parseISO } from "date-fns";
import { BarChart } from "react-native-chart-kit";

import { api } from "../../../apis/VolatoMobileAPIApi";
import { colors } from "../../../themes";
import { queries } from "../../../utils/queries";
import { Text } from "../../Text";

/**
 *
 * @param {object} props
 * @param {object} props.item
 * @param {boolean} props.isLast
 */
function MaintenanceItem(props) {
  const { item, isLast } = props;

  let headerText = item.timeIn ? item.timeIn.split("T")[0] : "Maintenance Item";
  try {
    if (item.timeOut) {
      const timeDiff = differenceInHours(parseISO(item.timeOut), parseISO(item.timeIn));
      if (!isNaN(timeDiff)) headerText += ` (${timeDiff} Hours)`;
    }
  } catch (error) {}

  return (
    <View
      style={[
        {
          padding: 16,
          display: "flex",
          flexDirection: "column",
        },
        !isLast && {
          borderBottomWidth: 1,
          borderBottomColor: colors.palette.cloud,
        },
      ]}
    >
      <Text weight="bold">{headerText}</Text>
      <Text>{item.maintenanceType}</Text>
      {item.notes && (
        <>
          <Text />
          <Text>{item.notes}</Text>
        </>
      )}
    </View>
  );
}

/**
 *
 * @param {object} props
 * @param {number} props.aircraftId
 */
export default function AircraftStats(props) {
  const { aircraftId } = props;
  const [chartWidth, setChartWidth] = useState(0);

  const aircraftQuery = useQuery({
    queryKey: queries.aircraft.index(aircraftId),
    queryFn: () => api.aircraft.get(aircraftId),
  });

  const statsQuery = useQuery({
    queryKey: queries.aircraft.stats(aircraftId),
    queryFn: () => api.aircraft.stats(aircraftId),
  });

  const isLoading = aircraftQuery.isLoading || statsQuery.isLoading;
  const isData = aircraftQuery.data && statsQuery.data;
  const isReady = !isLoading && isData;

  return (
    <View
      onLayout={(event) => {
        const { width } = event.nativeEvent.layout;
        setChartWidth(width);
      }}
    >
      {isReady ? (
        <View style={styles.container}>
          <Text style={styles.aircraftLabel} weight="bold">
            {aircraftQuery.data.label}
          </Text>
          <Text weight="bold">Monthly Flight Hours</Text>
          <BarChart
            data={{
              labels: statsQuery.data.flightHoursByMonth.map((item) => item.month),
              datasets: [
                {
                  data: statsQuery.data.flightHoursByMonth.map((item) =>
                    item === null ? "0.0" : item.hours.toFixed(1)
                  ),
                },
              ],
            }}
            width={chartWidth}
            height={400}
            withInnerLines={false}
            withHorizontalLabels={false}
            verticalLabelRotation={90}
            showValuesOnTopOfBars
            fromZero
            chartConfig={{
              backgroundGradientFrom: colors.palette.midnight,
              backgroundGradientTo: colors.palette.midnight,
              barPercentage: 0.5,
              decimalPlaces: 0, // optional, defaults to 2dp
              color: () => colors.palette.green,
              labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,
            }}
            style={{
              borderRadius: 16,
              paddingRight: 0,
              paddingLeft: 0,
              paddingTop: 32,
            }}
          />
          <Text weight="bold">Maintenance History</Text>
          <View style={styles.maintenanceContainer}>
            {statsQuery.data.maintenanceHistory
              .sort((a, b) => parseISO(b.timeIn) - parseISO(a.timeIn))
              .map((mi, i) => (
                <MaintenanceItem
                  key={i}
                  item={mi}
                  isLast={i === statsQuery.data.maintenanceHistory.length - 1}
                />
              ))}
          </View>
        </View>
      ) : (
        <View style={styles.spinner}>
          <ActivityIndicator
            style={styles.activityIndicator}
            animating
            color={colors.palette.green}
            hidesWhenStopped
            size="large"
          />
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    display: "flex",
    flexDirection: "column",
    gap: 16,
  },
  spinner: {
    alignItems: "center",
    backgroundColor: colors.palette.midnightAlpha,
    bottom: 0,
    justifyContent: "center",
    left: 0,
    position: "absolute",
    right: 0,
    top: 0,
    zIndex: 9999,
  },
  activityIndicator: {
    width: 36,
  },
  aircraftLabel: {
    fontSize: 24,
  },
  maintenanceContainer: {
    backgroundColor: "white",
    borderRadius: 16,
    display: "flex",
    flexDirection: "column",
  },
  maintenanceItem: {
    padding: 16,
    display: "flex",
    flexDirection: "column",
    borderBottomWidth: 1,
    borderBottomColor: colors.palette.cloud,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Screens/Reserve/ReserveScreenLegForm.js

import { useEffect, useMemo, useState } from "react";
import { ScrollView, StyleSheet, TouchableOpacity, useWindowDimensions, View } from "react-native";

import { Icon } from "@draftbit/ui";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { add as addDate, addMonths, sub as subDate } from "date-fns";
import { getTimezoneOffset } from "date-fns-tz";
import { Controller } from "react-hook-form";

import AirportModal from "./AirportModal";
import { Text, UserAvatar } from "../..";
import { useContact } from "../../../contexts/ContactContext";
import { colors, spacing } from "../../../themes";
import { modalViews } from "../../../utils";
import { formatDate } from "../../../utils/formatDate";
import { useModalAction } from "../../Modals";
import { useStores } from "../../../models/root";

/**
 * @param {object} props
 * @param {string} props.label
 * @param {string} props.icon
 * @param {React.ReactNode} props.children
 * @param {function(): void} props.onPress
 * @param {any} props.style
 */
function IconButton(props) {
  const { label, icon, children, onPress, style } = props;
  return (
    <TouchableOpacity
      onPress={onPress}
      style={[
        {
          display: "flex",
          flexDirection: "row",
          alignItems: "center",
          paddingVertical: 10,
          minHeight: 56,
        },
        style,
      ]}
    >
      <Icon style={{ marginLeft: 14 }} name={icon} size={24} />
      <View style={{ display: "flex", flexDirection: "column" }}>
        <Text
          style={{
            marginLeft: 10,
            fontSize: 11,
            lineHeight: 15,
            color: colors.palette.bodyText,
          }}
        >
          {label}
        </Text>
        {children}
      </View>
    </TouchableOpacity>
  );
}

/**
 *
 * @param {object} props
 * @param {number} props.index
 * @param {object} props.form
 * @param {function(index, string, any): void} props.setFlightFieldValue
 */
export default function ReserveScreenLegForm(props) {
  const {
    index,
    form,
    setFlightFieldValue,
    selectedEndDates,
    setSelectedEndDates,
    selectedStartDates,
    setSelectedStartDates,
    tripType,
    selectedDepartTimes,
    setSelectedDepartTimes,
    selectedArriveTimes,
    setSelectedArriveTimes,
    availableExtremeDates,
    validMonths,
  } = props;
  const queryClient = useQueryClient();
  const [isAirportOpen, setIsAirportOpen] = useState(false);
  const [legPassengers, setLegPassengers] = useState([]);
  const [arriveDate, setArriveDate] = useState(null);
  const [departDate, setDepartDate] = useState(null);
  const [departAirportId, setDepartAirportId] = useState(null);
  const [arrivalAirportId, setArrivalAirportId] = useState(null);

  const [airportSelection, setAirportSelection] = useState("depart");
  const { openModal, closeModal } = useModalAction();
  const { width } = useWindowDimensions();

  const maxItemCount = useMemo(() => {
    const containerWidth = width - spacing.medium * 2;
    const viewableWidth = containerWidth - spacing.medium - 24;
    const itemWidth = 40 + spacing.medium;
    return Math.floor(viewableWidth / itemWidth) - 1;
  }, [width]);
  const {
    cateringStore: { getCateringCategories, getTransportCategories },
    userStore: { user },
  } = useStores();

  const { contacts, pets } = useContact();
  const values = form.getValues();
  const startDate = new Date();
  const queryDates = [
    startDate,
    addMonths(startDate, 1),
    addMonths(startDate, 2),
    addMonths(startDate, 3),
  ].map((date) => formatDate(date.toISOString(), "yyyy-MM-dd"));
  const cateringCategories = getCateringCategories();
  const transportCategories = getTransportCategories();

  const passengers = [user, ...legPassengers, ...pets].reduce(
    (acc, curr) => ({ ...acc, [curr.id]: curr }),
    {}
  );

  const cateringOptions = useMemo(
    () =>
      (cateringCategories.reduce((acc, curr) => [...acc, ...curr.options], []) || []).reduce(
        (acc, curr) => ({ ...acc, [curr.id]: curr }),
        {}
      ),
    [cateringCategories]
  );

  const transportOptions = useMemo(
    () =>
      (transportCategories.reduce((acc, curr) => [...acc, ...curr.options], []) || []).reduce(
        (acc, curr) => ({ ...acc, [curr.id]: curr }),
        {}
      ),
    [transportCategories]
  );

  const departAirportTz = useMemo(() => {
    const airport = values.flights[index]?.departAirport;
    return airport?.timezone;
  }, [values, index]);

  const arriveAirportTz = useMemo(() => {
    const airport = values.flights[index]?.arriveAirport;
    return airport?.timezone;
  }, [values, index]);

  const handleConfirmTime = (type) => (date) => {
    const localTimeZone = -new Date().getTimezoneOffset();
    let targetTimeZone =
      getTimezoneOffset(type === "depart" ? departAirportTz : arriveAirportTz) / 1000 / 60;
    if ((type === "depart" && !departAirportTz) || (type === "arrive" && !arriveAirportTz)) {
      targetTimeZone = localTimeZone;
    }
    let newDate = date;
    if (localTimeZone > targetTimeZone) {
      newDate = addDate(newDate, {
        minutes: localTimeZone - targetTimeZone,
      });
    } else {
      newDate = subDate(newDate, {
        minutes: targetTimeZone - localTimeZone,
      });
    }
    setFlightFieldValue(index, type === "depart" ? "departTime" : "arriveTime", newDate);
    closeModal();
  };

  return (
    <ScrollView contentContainerStyle={{ paddingBottom: 50 }}>
      <View style={styles.container}>
        <View style={[styles.ItemRow]}>
          <Controller
            control={form.control}
            name={`flights.${index}.departAirport`}
            render={({ field: { value } }) => (
              <IconButton
                icon="MaterialCommunityIcons/airport"
                style={{
                  borderBottomWidth: 1,
                  borderBottomColor: colors.palette.fieldsShadow,
                }}
                onPress={() => {
                  setAirportSelection("depart");
                  setIsAirportOpen(true);
                }}
                label="Departing From"
              >
                <Text style={value ? [styles.inputText, styles.inputTextActive] : styles.inputText}>
                  {value ? value.simpleLabel : "Where From?"}
                </Text>
              </IconButton>
            )}
          />
          <Controller


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Screens/Reserve/ServerErrorModal.js

import { StyleSheet, View } from "react-native";

import { Modal, Portal } from "react-native-paper";

import { Button, Text } from "../..";
import { colors } from "../../../themes";

/**
 *
 * @param {object} props
 * @param {boolean} props.isOpen
 * @param {function(): void} props.onClose
 * @param {any} props.error
 */
export default function ServerErrorModal(props) {
  const { isOpen, onClose, error } = props;

  return (
    <Portal>
      <Modal visible={isOpen} onDismiss={onClose} contentContainerStyle={styles.container}>
        <View style={styles.modalHeader}>
          <Text style={styles.modalHeaderText} weight="bold">
            Error While Booking Your Trip
          </Text>
        </View>
        <View style={styles.modalContent}>
          <Text style={styles.modalContentHeader}>
            Something went wrong while submitting your itinerary. Our team is looking into it.
          </Text>
          <Text />
          <Text style={styles.caution}>{error?.toString()}</Text>
        </View>
        <View style={styles.modalActions}>
          <Button
            style={styles.button}
            variant="contained"
            theme="halloween"
            title="Acknowledge"
            onPress={onClose}
          />
        </View>
      </Modal>
    </Portal>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: colors.palette.white,
    marginHorizontal: 20,
    borderRadius: 16,
  },
  modalHeader: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    // backgroundColor: colors.palette.midnight,
    paddingHorizontal: 16,
    paddingVertical: 18,
    borderBottomWidth: 1,
    borderColor: colors.palette.primary300,
  },
  modalHeaderText: {
    color: colors.palette.midnight,
    fontSize: 16,
    lineHeight: 24,
  },
  modalHeaderActionView: {
    flexDirection: "row",
  },
  modalContent: {
    padding: 20,
  },
  modalContentHeader: {
    color: colors.palette.midnight,
    fontSize: 14,
  },
  flightsInformation: {
    borderRadius: 4,
    backgroundColor: colors.palette.lightGray,
    padding: 16,
    marginVertical: 8,
    alignItems: "center",
  },
  flight: {
    alignItems: "center",
  },
  caution: {
    color: colors.palette.bodyText,
    fontSize: 16,
    lineHeight: 14,
  },
  modalActions: {
    flexDirection: "row",
    justifyContent: "space-between",
    borderTopWidth: 1,
    borderColor: colors.palette.primary300,
    padding: 20,
  },
  button: {
    flex: 1,
    marginHorizontal: 6,
  },
  airportRow: {
    flexDirection: "row",
    alignItems: "center",
    marginVertical: 16,
  },
  flightText: {
    color: colors.palette.midnight,
    fontSize: 14,
    lineHeight: 18,
  },
  plane: {
    marginHorizontal: 16,
  },
  price: {
    alignItems: "center",
    backgroundColor: colors.palette.green,
    borderRadius: 6,
    paddingVertical: 4,
    paddingHorizontal: 10,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Screens/Reserve/ReserveScreenHeader.js

import { useEffect, useState } from "react";
import { ImageBackground, StyleSheet, TouchableOpacity, View } from "react-native";

import Images from "../../../config/Images";
import { useStores } from "../../../models/root";
import { colors, spacing } from "../../../themes";
import { tripsTypes } from "../../../utils/constants";
import { Text } from "../../Text";

/**
 *
 * @param {object} props
 * @param {string} props.label
 * @param {boolean} props.active
 * @param {string} props.value
 */
function Tab({ onChange, label, value, active }) {
  return (
    <TouchableOpacity
      style={[styles.tabItem, active && styles.tabItemActive]}
      onPress={() => onChange(value)}
    >
      <Text style={[styles.tabItemText, active && styles.tabItemTextActive]}>{label}</Text>
    </TouchableOpacity>
  );
}

/**
 *
 * @param {object} props
 * @param {string} props.defaultTab
 * @param {function(string): void} props.onTabChange
 */
export default function ReserveScreenHeader(props) {
  const { onTabChange, defaultTab } = props;

  const [activeTab, setActiveTab] = useState(tripsTypes.ONE_WAY);

  const { userStore } = useStores();

  useEffect(() => {
    if (defaultTab) {
      setActiveTab(defaultTab);
    }
  }, [defaultTab]);

  /**
   *
   * @param {string} value
   */
  const handleTabChange = (value) => {
    setActiveTab(value);
    onTabChange(value);
  };

  return (
    <View style={styles.navHeader}>
      <ImageBackground
        source={Images.ReserveHeader}
        style={styles.navHeaderImage}
        resizeMode="cover"
      >
        <View style={styles.navHeaderView}>
          <Text style={styles.welcomeText}>Welcome, {userStore.user?.firstName}</Text>
          <Text style={styles.whereToText}>Where to next?</Text>
        </View>
        <View style={styles.tabBar}>
          <Tab
            label="One Way"
            value={tripsTypes.ONE_WAY}
            active={activeTab === tripsTypes.ONE_WAY}
            onChange={handleTabChange}
          />
          <Tab
            label="Round Trip"
            value={tripsTypes.ROUND_TRIP}
            active={activeTab === tripsTypes.ROUND_TRIP}
            onChange={handleTabChange}
          />
          <Tab
            label="Multi-City"
            value={tripsTypes.MULTI_CITY}
            active={activeTab === tripsTypes.MULTI_CITY}
            onChange={handleTabChange}
          />
        </View>
      </ImageBackground>
    </View>
  );
}

const styles = StyleSheet.create({
  navHeader: {
    // flex: 1,
    borderBottomLeftRadius: 16,
    borderBottomRightRadius: 16,
    overflow: "hidden",
    height: 200,
  },
  navHeaderImage: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  navHeaderView: {
    backgroundColor: colors.palette.cardImageOverlay,
    position: "absolute",
    left: 0,
    top: 0,
    right: 0,
    bottom: 0,
    paddingTop: 63,
    paddingHorizontal: 15,
  },
  welcomeText: {
    color: colors.palette.sky,
    fontSize: 14,
    lineHeight: 18,
  },
  whereToText: {
    color: colors.palette.white,
    fontSize: 22,
    lineHeight: 28,
  },
  tabBar: {
    flex: 1,
    alignItems: "flex-end",
    flexDirection: "row",
    paddingHorizontal: spacing.medium,
    position: "absolute",
    bottom: spacing.medium,
    zIndex: 1,
  },
  tabItem: {
    backgroundColor: colors.transparent,
    borderRadius: 100,
    flex: 1,
    justifyContent: "center",
    alignItems: "flex-end",
    height: 28,
  },
  tabItemActive: {
    backgroundColor: colors.palette.green,
  },
  tabItemText: {
    color: colors.palette.white,
    fontSize: 15,
    lineHeight: 18,
    marginBottom: 1,
    textAlign: "center",
    justifyContent: "flex-end",
    width: "100%",
  },
  tabItemTextActive: {
    color: colors.palette.midnight,
  },
});


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Screens/Reserve/AirportModal.js

import React, { useEffect, useRef, useState } from "react";
import {
  ActivityIndicator,
  FlatList,
  Modal,
  StyleSheet,
  TouchableOpacity,
  View,
} from "react-native";

import { IconButton } from "@draftbit/ui";
import { useQuery } from "@tanstack/react-query";

import { api } from "../../../apis/VolatoMobileAPIApi";
import { useFboSavedSearchStore } from "../../../models/stores/FboSearchStore";
import { colors } from "../../../themes";
import { queries } from "../../../utils/queries";
import { SearchBar } from "../../SearchBar";
import { Text } from "../../Text";

/**
 *
 * @param {object} props
 * @param {boolean} props.isOpen
 * @param {function(): void} props.onClose
 * @param {object} props.value
 * @param {function(object): void} props.onChange
 * @param {string | undefined} props.direction
 */
export default function AirportModal(props) {
  const { isOpen, onClose, onChange, direction } = props;

  const [searchText, setSearchText] = useState("");
  const [searchBarClicked, setSearchBarClicked] = useState(false);
  const [airports, setAirports] = useState(null);
  const [isSearching, setIsSearching] = React.useState(false);
  const searchInputRef = useRef(null);
  const debounceTimeoutRef = useRef(null);
  const { savedSearches, updateSavedSearches } = useFboSavedSearchStore();

  useEffect(() => {
    if (isOpen) {
      searchInputRef.current?.focus();
    }
  }, [isOpen]);

  const debounce = (func, delay) => {
    clearTimeout(debounceTimeoutRef.current);
    debounceTimeoutRef.current = setTimeout(func, delay);
  };
  const airportQuery = useQuery({
    queryKey: queries.airports,
    queryFn: () => api.airports.post(searchText),
    enabled: false,
    onSuccess: (data) => {
      setAirports(data);
    },
    onError: () => {},
    onSettled: () => {
      setIsSearching(false);
    },
  });

  const onSearch = async (text) => {
    setAirports(null);
    if (!text || text.length < 3) {
      return;
    }
    setIsSearching(true);
    setSearchText(text);
    debounce(async () => {
      await airportQuery.refetch();
    }, 500);
  };

  const handleClose = () => {
    setSearchText("");
    setAirports(null);
    onClose();
  };

  const handleSelect = (item) => {
    setSearchText("");
    setAirports(null);
    onChange(item);

    // update saved searches
    updateSavedSearches({
      id: item.id,
      simpleLabel: item.simpleLabel,
      city: item.city,
      province: item.province,
      country: item.country,
      icao: item.icao,
      lastSearchDate: new Date(),
      timezone: item.timezone,
    });

    handleClose();
  };

  const searchResultItem = ({ item }) => (
    <TouchableOpacity onPress={() => handleSelect(item)}>
      <View style={styles.airportItem}>
        <View style={styles.airportItemInfo}>
          <View>
            <Text style={styles.airportLabel}>{item.simpleLabel}</Text>
            <Text style={styles.airportLocation}>
              {item.city} {item.province}
            </Text>
          </View>
          <Text style={styles.airportCode}>{item.icao}</Text>
        </View>
      </View>
    </TouchableOpacity>
  );

  const resetForm = () => {
    setSearchText("");
    setAirports(null);
  };

  const getHeader = () => {
    if (airports) {
      return "Results";
    }
    if (savedSearches && savedSearches.length > 0) {
      return "Recent Searches";
    }
    return "";
  };

  return (
    <Modal visible={isOpen} animationType="slide" presentationStyle="pageSheet" onShow={resetForm}>
      <View style={styles.modalHeader}>
        <Text style={styles.modalHeaderText}>Where {direction === "depart" ? "From" : "To"}?</Text>
      </View>
      <SearchBar
        searchText={searchText}
        placeholderText="Search by City, State, or Airport Code"
        setSearchText={(text) => {
          setSearchText(text);
          onSearch(text);
        }}
        clicked={searchBarClicked}
        setClicked={setSearchBarClicked}
      />
      <View style={styles.modalContent}>
        {isSearching && !airports ? (
          <ActivityIndicator
            animating
            color={colors.palette.midnight}
            hidesWhenStopped
            size="large"
          />
        ) : (
          <>
            <Text style={styles.searchResultHeader} weight="bold">
              {getHeader()}
            </Text>
            <FlatList
              data={airports || savedSearches}
              renderItem={searchResultItem}
              keyExtractor={(item) => `${item.id}`}
            />
          </>
        )}
      </View>
      <IconButton
        onPress={handleClose}
        color={colors.palette.midnight}
        icon="AntDesign/close"
        size={24}
        style={styles.closeButton}
      />
    </Modal>
  );
}

const styles = StyleSheet.create({
  closeButton: {
    position: "absolute",
    top: 18,
    right: 16,
  },
  modalHeader: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    padding: 18,
  },
  modalHeaderText: {
    color: colors.palette.midnight,
    fontSize: 22,
    fontWeight: 400,
    lineHeight: 28,
    justifyContent: "center",
  },
  modalContent: {
    marginHorizontal: 12,


File: /Users/codeshack-vii/Documents/_projects/Volato/components/Screens/Reserve/ReserveScreenSwiper.js

import { useRef } from "react";
import { LayoutAnimation, StyleSheet, View } from "react-native";

import Swiper from "react-native-swiper";

import { colors } from "../../../themes";

/**
 *
 * @param {object} props
 * @param {React.ReactNode} props.children
 * @param {function(number): void} props.onIndexChanged
 */
export default function ReserveScreenSwiper(props) {
  const { children, onIndexChanged, swiperRef } = props;
  return (
    <Swiper
      ref={swiperRef}
      showsPagination={false}
      loop={false}
      onIndexChanged={(newIndex) => {
        LayoutAnimation.easeInEaseOut();
        onIndexChanged(newIndex);
      }}
      // dot={<View style={styles.swiperDot} />}
      // activeDot={<View style={[styles.swiperDot, styles.swiperDotActive]} />}
    >
      {children}
    </Swiper>
  );
}

const styles = StyleSheet.create({
  swiperDot: {
    backgroundColor: colors.palette.midnight,
    width: 13,
    height: 13,
    borderRadius: 7,
    marginLeft: 7,
    marginRight: 7,
  },
  swiperDotActive: {
    backgroundColor: colors.palette.green,
  },
});



</source_code>

Follow these steps to complete the task:

1. **Analyze each file in the source code:**
   - Assess the file's importance to the overall project implementation.
   - Evaluate the complexity of the code within the file.
   - Determine the uniqueness of the file's content.
   - Consider how the file interacts with or is used by other components.

2. **Prioritize the files based on your analysis:**
   - Rank files higher if they are crucial to the core functionality of the project.
   - Give higher priority to files with more complex or sophisticated algorithms.
   - Prioritize files that contain unique or custom implementations over standard or library code.
   - Consider the interdependencies between files and prioritize those that are most central to the project's structure.

3. **Create a prioritized list of the files, ordering them from most important to least important for copyright submission.**

4. **For each file in your prioritized list, include the following in your output:**
   - A header clearly indicating the file name.
   - The entire contents of the file.

Your output should be structured as follows:

```
# [Name of the most important file]
[Entire contents of the file]

# [Name of the second most important file]
[Entire contents of the file]

# [Continue this pattern for all files in order of importance]
```

Ensure that you include every file from the source code in your output, maintaining the order of importance you have determined. Do not include any formatting, comments, or other text in your output. The contents of each file should be exactly as they appear in the original source code, without any modifications or omissions.
